{
  "version": 3,
  "sources": ["../node_modules/uicore-ts/scripts/UICoreExtensionValueObject.ts", "../node_modules/uicore-ts/scripts/UITimer.ts", "../node_modules/uicore-ts/scripts/UIObject.ts", "../node_modules/uicore-ts/scripts/ClientCheckers.ts", "../node_modules/uicore-ts/scripts/UIColor.ts", "../node_modules/uicore-ts/scripts/UICoreValues.ts", "../node_modules/uicore-ts/scripts/UIPoint.ts", "../node_modules/uicore-ts/scripts/UIRectangle.ts", "../node_modules/uicore-ts/scripts/UICoreExtensions.ts", "../node_modules/uicore-ts/scripts/UIView.ts", "../node_modules/uicore-ts/scripts/UIRoute.ts", "../node_modules/uicore-ts/scripts/UIViewController.ts", "../node_modules/uicore-ts/scripts/UITextView.ts", "../node_modules/uicore-ts/scripts/UITextField.ts", "../node_modules/uicore-ts/scripts/UITextArea.ts", "../node_modules/uicore-ts/scripts/UIBaseButton.ts", "../node_modules/uicore-ts/scripts/UIImageView.ts", "../node_modules/uicore-ts/scripts/UIButton.ts", "../node_modules/uicore-ts/scripts/UINativeScrollView.ts", "../node_modules/uicore-ts/scripts/UITableView.ts", "inline-worker:__inline-worker", "../node_modules/uicore-ts/compiledScripts/UIStringFilterWebWorker.worker.js", "../node_modules/uicore-ts/scripts/UIStringFilter.ts", "../node_modules/uicore-ts/scripts/UIScrollView.ts", "../node_modules/uicore-ts/scripts/UISlideScrollerView.ts", "../node_modules/uicore-ts/scripts/UILink.ts", "../node_modules/uicore-ts/scripts/UILinkButton.ts", "../node_modules/uicore-ts/scripts/UILayoutGrid.ts", "../node_modules/uicore-ts/compiledScripts/UIKeyValueStringFilterWebWorker.worker.js", "../node_modules/uicore-ts/scripts/UIKeyValueStringFilter.ts", "../node_modules/uicore-ts/compiledScripts/UIKeyValueStringSorterWebWorker.worker.js", "../node_modules/uicore-ts/scripts/UIKeyValueStringSorter.ts", "../node_modules/uicore-ts/scripts/UIDialogView.ts", "../node_modules/uicore-ts/scripts/UIDateTimeInput.ts", "../node_modules/uicore-ts/scripts/UICore.ts", "../node_modules/uicore-ts/scripts/UIActionIndicator.ts", "../node_modules/uicore-ts/scripts/UIInterfaces.ts", "../node_modules/uicore-ts/scripts/UIRootViewController.ts", "../node_modules/uicore-ts/scripts/index.ts", "../scripts/RootViewController.ts", "../scripts/BottomBarView.ts", "../scripts/CBCore/CBColor.ts", "../scripts/CBCore/CBCore.ts", "../scripts/Custom components/LanguageService.ts", "../scripts/CBCore/CBServerClient.ts", "../scripts/CBCore/CBSocketClient.ts", "../scripts/Custom components/CBDialogViewShower.ts", "../scripts/RootViewParameters.ts", "../scripts/Custom components/CBDialogView.ts", "../scripts/Custom components/CBFlatButton.ts", "../scripts/Custom components/CBButton.ts", "../scripts/Custom components/RowView.ts", "../scripts/CBCore/CBSocketCallbackHolder.ts", "../scripts/InformationViewController.ts", "../scripts/InternalDropdownSettingsViewController.ts", "../scripts/Custom components/CBCheckbox.ts", "../scripts/Custom components/CBTextField.ts", "../scripts/Custom components/SearchableDropdown.ts", "../scripts/Custom components/SearchableDropdownRow.ts", "../scripts/Custom components/SearchTextField.ts", "../scripts/InternalLanguageSettingsViewController.ts", "../scripts/LanguagesDialogView.ts", "../scripts/SomeContentViewController.ts", "../scripts/TopBarView.ts"],
  "sourcesContent": ["\nexport class UICoreExtensionValueObject {\n    \n    isAUICoreExtensionValueObject = true;\n    value: any\n    \n    constructor(value: any) {\n        \n        this.value = value\n        \n    }\n    \n}\n", "const YES = true\nconst NO = false\n\n\nexport class UITimer {\n    \n    \n    \n    \n    \n    _intervalID: number\n    \n    isValid: boolean = YES\n    \n    \n    constructor(public interval: number, public repeats: boolean, public target: Function) {\n        \n        this.schedule()\n        \n    }\n    \n    \n    \n    schedule() {\n    \n        const callback = function () {\n            if (this.repeats == NO) {\n                this.invalidate()\n            }\n            this.target()\n        }.bind(this)\n    \n        this._intervalID = window.setInterval(callback, this.interval * 1000)\n        \n    }\n    \n    \n    reschedule() {\n        \n        this.invalidate()\n        this.schedule()\n        \n    }\n    \n    \n    \n    fire() {\n        if (this.repeats == NO) {\n            this.invalidate()\n        }\n        else {\n            this.reschedule()\n        }\n        this.target()\n    }\n    \n    invalidate() {\n        \n        if (this.isValid) {\n            \n            clearInterval(this._intervalID)\n            \n            this.isValid = NO\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UICoreExtensionValueObject } from \"./UICoreExtensionValueObject\"\nimport { UITimer } from \"./UITimer\"\n\n\nexport function NilFunction() {\n    return nil\n}\n\n\n\nexport var nil: any = new Proxy(Object.assign(NilFunction, { \"class\": nil, \"className\": \"Nil\" }), {\n    \n    get(target, name) {\n        \n        if (name == Symbol.toPrimitive) {\n            \n            return function (hint) {\n                if (hint == \"number\") {\n                    return 0\n                }\n                if (hint == \"string\") {\n                    return \"\"\n                }\n                return false\n            }\n            \n        }\n        \n        if (name == \"toString\") {\n            \n            return function toString() {\n                return \"\"\n            }\n            \n        }\n        \n        return NilFunction()\n    },\n    \n    set(target, name, value) {\n        return NilFunction()\n    }\n    \n})\n\n\n\n\n\nexport function wrapInNil<T>(object?: T): T {\n    \n    \n    let result = FIRST_OR_NIL(object)\n    \n    if (object instanceof Object && !(object instanceof Function)) {\n        \n        result = new Proxy(object as Object & T, {\n            \n            get(target, name) {\n                \n                if (name == \"wrapped_nil_target\") {\n                    \n                    return target\n                    \n                }\n                \n                \n                const value = Reflect.get(target, name)\n                \n                if (typeof value === \"object\") {\n                    \n                    return wrapInNil(value)\n                    \n                }\n                \n                if (IS_NOT_LIKE_NULL(value)) {\n                    \n                    return value\n                    \n                }\n                \n                return nil\n                \n            },\n            \n            set(target, name, value) {\n                \n                if (IS(target)) {\n                    \n                    target[name] = value\n                    \n                }\n                \n                return YES\n                \n            }\n            \n        })\n        \n    }\n    \n    return result\n    \n}\n\n\nexport const YES = true\nexport const NO = false\n\nexport function IS(object) {\n    \n    if (object && object !== nil) {\n        \n        return YES\n        \n    }\n    \n    return NO\n    \n    //return (object != nil && object);\n    \n}\n\nexport function IS_NOT(object) {\n    \n    return !IS(object)\n    \n}\n\nexport function IS_DEFINED(object) {\n    \n    if (object != undefined) {\n        \n        return YES\n        \n    }\n    \n    return NO\n    \n}\n\nexport function IS_UNDEFINED(object) {\n    \n    return !IS_DEFINED(object)\n    \n}\n\nexport function IS_NIL(object) {\n    \n    if (object === nil) {\n        \n        return YES\n        \n    }\n    \n    return NO\n    \n}\n\nexport function IS_NOT_NIL(object) {\n    \n    return !IS_NIL(object)\n    \n}\n\n\nexport function IS_LIKE_NULL(object) {\n    \n    return (IS_UNDEFINED(object) || IS_NIL(object) || object == null)\n    \n}\n\nexport function IS_NOT_LIKE_NULL(object) {\n    \n    return !IS_LIKE_NULL(object)\n    \n}\n\n\nexport function IS_AN_EMAIL_ADDRESS(email: string) {\n    const re = /\\S+@\\S+\\.\\S+/\n    return re.test(email)\n}\n\n\nexport function FIRST_OR_NIL<T>(...objects: T[]): T {\n    \n    const result = objects.find(function (object, index, array) {\n        \n        return IS(object)\n        \n    })\n    \n    return result || nil\n    \n}\n\nexport function FIRST<T>(...objects: T[]): T {\n    \n    const result = objects.find(function (object, index, array) {\n        \n        return IS(object)\n        \n    })\n    \n    return result || IF(IS_DEFINED(objects.lastElement))(RETURNER(objects.lastElement))()\n    \n}\n\n\nexport function MAKE_ID(randomPartLength = 15) {\n    \n    let result = \"\"\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    \n    for (let i = 0; i < randomPartLength; i++) {\n        \n        result = result + characters.charAt(Math.floor(Math.random() * characters.length))\n        \n    }\n    \n    result = result + Date.now()\n    \n    return result\n    \n}\n\n\nexport function RETURNER<T>(value?: T) {\n    \n    return (...objects: any[]) => value\n    \n}\n\n\n\n\n\nexport type UIIFBlockReceiver<T> = (functionToCall: () => any) => UIIFEvaluator<T>;\n\nexport type UIIFEvaluatorBase<T> = () => T;\n\n\nexport interface UIIFEvaluator<T> extends UIIFEvaluatorBase<T> {\n    \n    ELSE_IF: (otherValue: any) => UIIFBlockReceiver<T>;\n    ELSE: (functionToCall: () => any) => T;\n    \n}\n\n\nexport function IF<T = any>(value: any): UIIFBlockReceiver<T> {\n    \n    let thenFunction = nil\n    let elseFunction = nil\n    \n    const result: any = function (functionToCall: () => T) {\n        thenFunction = functionToCall\n        return result.evaluateConditions\n    }\n    \n    \n    result.evaluateConditions = function () {\n        if (IS(value)) {\n            return thenFunction()\n        }\n        return elseFunction()\n    }\n    \n    \n    result.evaluateConditions.ELSE_IF = function (otherValue: any) {\n        \n        const functionResult = IF(otherValue) as (UIIFBlockReceiver<T> & { evaluateConditions: UIIFEvaluator<T> })\n        elseFunction = functionResult.evaluateConditions\n        \n        const functionResultEvaluateConditionsFunction: any = function () {\n            return result.evaluateConditions()\n        }\n        functionResultEvaluateConditionsFunction.ELSE_IF = functionResult.evaluateConditions.ELSE_IF\n        functionResultEvaluateConditionsFunction.ELSE = functionResult.evaluateConditions.ELSE\n        \n        functionResult.evaluateConditions = functionResultEvaluateConditionsFunction\n        \n        return functionResult\n        \n    }\n    \n    \n    result.evaluateConditions.ELSE = function (functionToCall: () => T) {\n        elseFunction = functionToCall\n        return result.evaluateConditions()\n    }\n    \n    \n    return result\n}\n\n\n\n\n\nexport class UIFunctionCall<T extends (...args: any) => any> {\n    \n    isAUIFunctionCallObject = YES\n    parameters: Parameters<T>[]\n    \n    constructor(...parameters: Parameters<T>) {\n        \n        this.parameters = parameters\n        \n    }\n    \n    callFunction(functionToCall: T) {\n        \n        const parameters = this.parameters\n        functionToCall(...parameters)\n        \n    }\n    \n    \n}\n\n\nexport function CALL<T extends (...args: any) => any>(...objects: Parameters<T>) {\n    \n    const result = new UIFunctionCall<T>(...objects)\n    return result\n    \n}\n\n\nexport class UIFunctionExtender<T extends (...args: any) => any> {\n    \n    isAUIFunctionExtenderObject = YES\n    extendingFunction: T\n    \n    constructor(extendingFunction: T) {\n        \n        this.extendingFunction = extendingFunction\n        \n    }\n    \n    extendedFunction(functionToExtend: T) {\n        \n        const extendingFunction = this.extendingFunction\n        \n        function extendedFunction(...objects: any[]) {\n            \n            const boundFunctionToExtend = functionToExtend.bind(this)\n            boundFunctionToExtend(...objects)\n            \n            const boundExtendingFunction = extendingFunction.bind(this)\n            boundExtendingFunction(...objects)\n            \n        }\n        \n        return extendedFunction\n        \n    }\n    \n    \n}\n\n\nexport function EXTEND<T extends (...args: any) => any>(extendingFunction: T) {\n    \n    const result = new UIFunctionExtender(extendingFunction)\n    return result\n    \n}\n\n\nexport class UILazyPropertyValue<T> {\n    \n    isAUILazyPropertyValueObject = YES\n    initFunction: () => T\n    \n    constructor(initFunction: () => T) {\n        \n        this.initFunction = initFunction\n        \n    }\n    \n    setLazyPropertyValue(key: string, target: object) {\n        \n        let isValueInitialized = NO\n        \n        // property value\n        let _value = nil\n        \n        const initValue = () => {\n            \n            _value = this.initFunction()\n            isValueInitialized = YES\n            this.initFunction = nil\n            \n        }\n        \n        if (delete target[key]) {\n            \n            // Create new property with getter and setter\n            Object.defineProperty(target, key, {\n                get: function () {\n                    \n                    if (IS_NOT(isValueInitialized)) {\n                        \n                        initValue()\n                        \n                    }\n                    \n                    return _value\n                    \n                },\n                set: function (newValue) {\n                    \n                    _value = newValue\n                    \n                },\n                enumerable: true,\n                configurable: true\n            })\n            \n        }\n        \n    }\n    \n    \n}\n\n\nexport function LAZY_VALUE<T>(initFunction: () => T) {\n    \n    const result = new UILazyPropertyValue(initFunction)\n    \n    return result\n    \n}\n\n\nexport type UIInitializerObject<T> = {\n    \n    [P in keyof T]?:\n    //T[P] extends (infer U)[] ? UIInitializerObject<U>[] :\n    T[P] extends (...args: any) => any ? UIFunctionCall<T[P]> | UIFunctionExtender<T[P]> | T[P] :\n        T[P] extends object ? UIInitializerObject<T[P]> | UILazyPropertyValue<T[P]> :\n            T[P];\n    \n}\n\n\nexport class UIObject {\n    \n    constructor() {\n        \n        // Do something here if needed\n        \n    }\n    \n    public get class(): any {\n        return Object.getPrototypeOf(this).constructor\n    }\n    \n    public get superclass(): any {\n        return Object.getPrototypeOf(Object.getPrototypeOf(this)).constructor\n    }\n    \n    \n    public static wrapObject<T>(object: T): UIObject & T {\n        \n        if (IS_NOT(object)) {\n            return nil\n        }\n        \n        if (object instanceof UIObject) {\n            return object\n        }\n        \n        return Object.assign(new UIObject(), object)\n        \n    }\n    \n    \n    isKindOfClass(classObject) {\n        if (this.isMemberOfClass(classObject)) {\n            return YES\n        }\n        for (let superclassObject = this.superclass; IS(superclassObject); superclassObject = superclassObject.superclass) {\n            if (superclassObject == classObject) {\n                return YES\n            }\n        }\n        return NO\n    }\n    \n    \n    isMemberOfClass(classObject: any) {\n        return (this.class == classObject)\n    }\n    \n    \n    \n    valueForKey(key: string) {\n        return this[key]\n    }\n    \n    valueForKeyPath(keyPath: string): any {\n        return UIObject.valueForKeyPath(keyPath, this)\n    }\n    \n    static valueForKeyPath(keyPath: string, object: any): any {\n        \n        if (IS_NOT(keyPath)) {\n            return object\n        }\n        \n        const keys = keyPath.split(\".\")\n        let currentObject = object\n        \n        for (let i = 0; i < keys.length; i++) {\n            \n            const key = keys[i]\n            \n            if (key.substring(0, 2) == \"[]\") {\n                \n                // This next object will be an array and the rest of the keys need to be run for each of the elements\n                currentObject = currentObject[key.substring(2)]\n                \n                // CurrentObject is now an array\n                \n                const remainingKeyPath = keys.slice(i + 1).join(\".\")\n                const currentArray = currentObject as unknown as any[]\n                currentObject = currentArray.map(function (subObject, index, array) {\n                    return UIObject.valueForKeyPath(remainingKeyPath, subObject)\n                })\n                \n                break\n                \n            }\n            \n            currentObject = currentObject[key]\n            if (IS_NOT(currentObject)) {\n                currentObject = nil\n            }\n            \n        }\n        \n        return currentObject\n        \n    }\n    \n    setValueForKeyPath(keyPath: string, value: any, createPath = YES) {\n        return UIObject.setValueForKeyPath(keyPath, value, this, createPath)\n    }\n    \n    static setValueForKeyPath(keyPath: string, value: any, currentObject: any, createPath) {\n        \n        const keys = keyPath.split(\".\")\n        let didSetValue = NO\n        \n        keys.forEach(function (key, index, array) {\n            if (index == array.length - 1 && IS_NOT_LIKE_NULL(currentObject)) {\n                currentObject[key] = value\n                didSetValue = YES\n                return\n            }\n            else if (IS_NOT(currentObject)) {\n                return\n            }\n            \n            const currentObjectValue = currentObject[key]\n            if (IS_LIKE_NULL(currentObjectValue) && createPath) {\n                currentObject[key] = {}\n            }\n            currentObject = currentObject[key]\n        })\n        \n        return didSetValue\n        \n    }\n    \n    \n    configureWithObject(object: UIInitializerObject<this>) {\n        this.configuredWithObject(object)\n    }\n    \n    configuredWithObject(object: UIInitializerObject<this>): this {\n        return UIObject.configureWithObject(this, object)\n    }\n    \n    \n    static configureWithObject<T extends object>(configurationTarget: T, object: UIInitializerObject<T>) {\n        \n        const isAnObject = (item: any) => (item && typeof item === \"object\" && !Array.isArray(item) &&\n            !(item instanceof UICoreExtensionValueObject))\n        \n        function isAClass(funcOrClass) {\n            const isFunction = functionToCheck => (functionToCheck && {}.toString.call(functionToCheck) ===\n                \"[object Function]\")\n            const propertyNames = Object.getOwnPropertyNames(funcOrClass)\n            return (isFunction(funcOrClass) && !propertyNames.includes(\"arguments\") &&\n                propertyNames.includes(\"prototype\"))\n        }\n        \n        let keyPathsAndValues = []\n        \n        function prepareKeyPathsAndValues(target: object, source: object, keyPath = \"\") {\n            \n            if ((isAnObject(target) || isAClass(target)) && isAnObject(source)) {\n                \n                source.forEach((sourceValue, key) => {\n                    \n                    const valueKeyPath = keyPath + \".\" + key\n                    function addValueAndKeyPath(sourceValue) {\n                        keyPathsAndValues.push({\n                            value: sourceValue,\n                            keyPath: valueKeyPath.replace(\".\", \"\")\n                        })\n                    }\n                    \n                    if (isAnObject(sourceValue) || isAClass(sourceValue)) {\n                        if (!(key in target) || target[key] instanceof Function) {\n                            addValueAndKeyPath(sourceValue)\n                        }\n                        else {\n                            prepareKeyPathsAndValues(target[key], sourceValue, valueKeyPath)\n                        }\n                    }\n                    else if (sourceValue instanceof UICoreExtensionValueObject) {\n                        addValueAndKeyPath(sourceValue.value)\n                    }\n                    else {\n                        addValueAndKeyPath(sourceValue)\n                    }\n                    \n                })\n                \n            }\n            \n        }\n        \n        prepareKeyPathsAndValues(configurationTarget, object)\n        \n        // Sort based on key paths\n        keyPathsAndValues = keyPathsAndValues.sort((a, b) => {\n            \n            const firstKeyPath = (a.keyPath as string).split(\".\").length\n            const secondKeyPath = (b.keyPath as string).split(\".\").length\n            \n            if (firstKeyPath < secondKeyPath) {\n                return -1\n            }\n            if (firstKeyPath > secondKeyPath) {\n                return 1\n            }\n            return 0\n            \n        })\n        \n        keyPathsAndValues.forEach((valueAndKeyPath) => {\n            \n            const keyPath: string = valueAndKeyPath.keyPath\n            let value = valueAndKeyPath.value\n            \n            const getTargetFunction = (bindThis = NO) => {\n                let result = (UIObject.valueForKeyPath(keyPath, configurationTarget) as Function)\n                if (bindThis) {\n                    const indexOfDot = keyPath.lastIndexOf(\".\")\n                    const thisObject = UIObject.valueForKeyPath(keyPath.substring(0, indexOfDot), configurationTarget)\n                    result = result.bind(thisObject)\n                }\n                return result\n            }\n            \n            if (value instanceof UILazyPropertyValue) {\n                const indexOfDot = keyPath.lastIndexOf(\".\")\n                const thisObject = UIObject.valueForKeyPath(keyPath.substring(0, indexOfDot), configurationTarget)\n                const key = keyPath.substring(indexOfDot + 1)\n                value.setLazyPropertyValue(key, thisObject)\n                return\n            }\n            \n            if (value instanceof UIFunctionCall) {\n                value.callFunction(getTargetFunction(YES))\n                return\n            }\n            \n            if (value instanceof UIFunctionExtender) {\n                value = value.extendedFunction(getTargetFunction())\n            }\n            \n            UIObject.setValueForKeyPath(keyPath, value, configurationTarget, YES)\n            \n        })\n        \n        \n        return configurationTarget\n        \n    }\n    \n    \n    performFunctionWithSelf<T>(functionToPerform: (self: this) => T): T {\n        return functionToPerform(this)\n    }\n    \n    performingFunctionWithSelf(functionToPerform: (self: this) => void): this {\n        functionToPerform(this)\n        return this;\n    }\n    \n    performFunctionWithDelay(delay: number, functionToCall: Function) {\n        \n        new UITimer(delay, NO, functionToCall)\n        \n    }\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "export const IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1\nexport const IS_SAFARI = /^((?!chrome|android).)*safari/i.test(navigator.userAgent)\n", "import { UIObject } from \"./UIObject\"\n\n\nexport interface UIColorDescriptor {\n    \n    red: number;\n    green: number;\n    blue: number;\n    alpha?: number;\n    \n}\n\n\n\n\n\nexport class UIColor extends UIObject {\n    \n    \n    constructor(public stringValue: string) {\n        \n        super()\n        \n    }\n    \n    \n    \n    toString() {\n        return this.stringValue\n    }\n    \n    static get redColor() {\n        return new UIColor(\"red\")\n    }\n    \n    static get blueColor() {\n        return new UIColor(\"blue\")\n    }\n    \n    static get greenColor() {\n        return new UIColor(\"green\")\n    }\n    \n    static get yellowColor() {\n        return new UIColor(\"yellow\")\n    }\n    \n    static get blackColor() {\n        return new UIColor(\"black\")\n    }\n    \n    static get brownColor() {\n        return new UIColor(\"brown\")\n    }\n    \n    static get whiteColor() {\n        return new UIColor(\"white\")\n    }\n    \n    static get greyColor() {\n        return new UIColor(\"grey\")\n    }\n    \n    static get lightGreyColor() {\n        return new UIColor(\"lightgrey\")\n    }\n    \n    static get transparentColor() {\n        return new UIColor(\"transparent\")\n    }\n    \n    static get undefinedColor() {\n        return new UIColor(\"\")\n    }\n    \n    static get nilColor() {\n        return new UIColor(\"\")\n    }\n    \n    \n    \n    static nameToHex(name: string) {\n        return {\n            \"aliceblue\": \"#f0f8ff\",\n            \"antiquewhite\": \"#faebd7\",\n            \"aqua\": \"#00ffff\",\n            \"aquamarine\": \"#7fffd4\",\n            \"azure\": \"#f0ffff\",\n            \"beige\": \"#f5f5dc\",\n            \"bisque\": \"#ffe4c4\",\n            \"black\": \"#000000\",\n            \"blanchedalmond\": \"#ffebcd\",\n            \"blue\": \"#0000ff\",\n            \"blueviolet\": \"#8a2be2\",\n            \"brown\": \"#a52a2a\",\n            \"burlywood\": \"#deb887\",\n            \"cadetblue\": \"#5f9ea0\",\n            \"chartreuse\": \"#7fff00\",\n            \"chocolate\": \"#d2691e\",\n            \"coral\": \"#ff7f50\",\n            \"cornflowerblue\": \"#6495ed\",\n            \"cornsilk\": \"#fff8dc\",\n            \"crimson\": \"#dc143c\",\n            \"cyan\": \"#00ffff\",\n            \"darkblue\": \"#00008b\",\n            \"darkcyan\": \"#008b8b\",\n            \"darkgoldenrod\": \"#b8860b\",\n            \"darkgray\": \"#a9a9a9\",\n            \"darkgreen\": \"#006400\",\n            \"darkkhaki\": \"#bdb76b\",\n            \"darkmagenta\": \"#8b008b\",\n            \"darkolivegreen\": \"#556b2f\",\n            \"darkorange\": \"#ff8c00\",\n            \"darkorchid\": \"#9932cc\",\n            \"darkred\": \"#8b0000\",\n            \"darksalmon\": \"#e9967a\",\n            \"darkseagreen\": \"#8fbc8f\",\n            \"darkslateblue\": \"#483d8b\",\n            \"darkslategray\": \"#2f4f4f\",\n            \"darkturquoise\": \"#00ced1\",\n            \"darkviolet\": \"#9400d3\",\n            \"deeppink\": \"#ff1493\",\n            \"deepskyblue\": \"#00bfff\",\n            \"dimgray\": \"#696969\",\n            \"dodgerblue\": \"#1e90ff\",\n            \"firebrick\": \"#b22222\",\n            \"floralwhite\": \"#fffaf0\",\n            \"forestgreen\": \"#228b22\",\n            \"fuchsia\": \"#ff00ff\",\n            \"gainsboro\": \"#dcdcdc\",\n            \"ghostwhite\": \"#f8f8ff\",\n            \"gold\": \"#ffd700\",\n            \"goldenrod\": \"#daa520\",\n            \"gray\": \"#808080\",\n            \"green\": \"#008000\",\n            \"greenyellow\": \"#adff2f\",\n            \"honeydew\": \"#f0fff0\",\n            \"hotpink\": \"#ff69b4\",\n            \"indianred \": \"#cd5c5c\",\n            \"indigo\": \"#4b0082\",\n            \"ivory\": \"#fffff0\",\n            \"khaki\": \"#f0e68c\",\n            \"lavender\": \"#e6e6fa\",\n            \"lavenderblush\": \"#fff0f5\",\n            \"lawngreen\": \"#7cfc00\",\n            \"lemonchiffon\": \"#fffacd\",\n            \"lightblue\": \"#add8e6\",\n            \"lightcoral\": \"#f08080\",\n            \"lightcyan\": \"#e0ffff\",\n            \"lightgoldenrodyellow\": \"#fafad2\",\n            \"lightgrey\": \"#d3d3d3\",\n            \"lightgreen\": \"#90ee90\",\n            \"lightpink\": \"#ffb6c1\",\n            \"lightsalmon\": \"#ffa07a\",\n            \"lightseagreen\": \"#20b2aa\",\n            \"lightskyblue\": \"#87cefa\",\n            \"lightslategray\": \"#778899\",\n            \"lightsteelblue\": \"#b0c4de\",\n            \"lightyellow\": \"#ffffe0\",\n            \"lime\": \"#00ff00\",\n            \"limegreen\": \"#32cd32\",\n            \"linen\": \"#faf0e6\",\n            \"magenta\": \"#ff00ff\",\n            \"maroon\": \"#800000\",\n            \"mediumaquamarine\": \"#66cdaa\",\n            \"mediumblue\": \"#0000cd\",\n            \"mediumorchid\": \"#ba55d3\",\n            \"mediumpurple\": \"#9370d8\",\n            \"mediumseagreen\": \"#3cb371\",\n            \"mediumslateblue\": \"#7b68ee\",\n            \"mediumspringgreen\": \"#00fa9a\",\n            \"mediumturquoise\": \"#48d1cc\",\n            \"mediumvioletred\": \"#c71585\",\n            \"midnightblue\": \"#191970\",\n            \"mintcream\": \"#f5fffa\",\n            \"mistyrose\": \"#ffe4e1\",\n            \"moccasin\": \"#ffe4b5\",\n            \"navajowhite\": \"#ffdead\",\n            \"navy\": \"#000080\",\n            \"oldlace\": \"#fdf5e6\",\n            \"olive\": \"#808000\",\n            \"olivedrab\": \"#6b8e23\",\n            \"orange\": \"#ffa500\",\n            \"orangered\": \"#ff4500\",\n            \"orchid\": \"#da70d6\",\n            \"palegoldenrod\": \"#eee8aa\",\n            \"palegreen\": \"#98fb98\",\n            \"paleturquoise\": \"#afeeee\",\n            \"palevioletred\": \"#d87093\",\n            \"papayawhip\": \"#ffefd5\",\n            \"peachpuff\": \"#ffdab9\",\n            \"peru\": \"#cd853f\",\n            \"pink\": \"#ffc0cb\",\n            \"plum\": \"#dda0dd\",\n            \"powderblue\": \"#b0e0e6\",\n            \"purple\": \"#800080\",\n            \"red\": \"#ff0000\",\n            \"rosybrown\": \"#bc8f8f\",\n            \"royalblue\": \"#4169e1\",\n            \"saddlebrown\": \"#8b4513\",\n            \"salmon\": \"#fa8072\",\n            \"sandybrown\": \"#f4a460\",\n            \"seagreen\": \"#2e8b57\",\n            \"seashell\": \"#fff5ee\",\n            \"sienna\": \"#a0522d\",\n            \"silver\": \"#c0c0c0\",\n            \"skyblue\": \"#87ceeb\",\n            \"slateblue\": \"#6a5acd\",\n            \"slategray\": \"#708090\",\n            \"snow\": \"#fffafa\",\n            \"springgreen\": \"#00ff7f\",\n            \"steelblue\": \"#4682b4\",\n            \"tan\": \"#d2b48c\",\n            \"teal\": \"#008080\",\n            \"thistle\": \"#d8bfd8\",\n            \"tomato\": \"#ff6347\",\n            \"turquoise\": \"#40e0d0\",\n            \"violet\": \"#ee82ee\",\n            \"wheat\": \"#f5deb3\",\n            \"white\": \"#ffffff\",\n            \"whitesmoke\": \"#f5f5f5\",\n            \"yellow\": \"#ffff00\",\n            \"yellowgreen\": \"#9acd32\"\n        }[name.toLowerCase()]\n    }\n    \n    \n    \n    static hexToDescriptor(c: string): UIColorDescriptor {\n        if (c[0] === \"#\") {\n            c = c.substr(1)\n        }\n        const r = parseInt(c.slice(0, 2), 16)\n        const g = parseInt(c.slice(2, 4), 16)\n        const b = parseInt(c.slice(4, 6), 16)\n        const a = parseInt(c.slice(6, 8), 16)\n    \n        const result = { \"red\": r, \"green\": g, \"blue\": b, \"alpha\": a }\n    \n        return result\n        \n        //return 'rgb(' + r + ',' + g + ',' + b + ')';\n        \n    }\n    \n    static rgbToDescriptor(colorString: string) {\n        \n        \n        if (colorString.startsWith(\"rgba(\")) {\n            \n            colorString = colorString.slice(5, colorString.length - 1)\n            \n        }\n        \n        if (colorString.startsWith(\"rgb(\")) {\n            \n            colorString = colorString.slice(4, colorString.length - 1) + \", 0\"\n            \n        }\n    \n    \n        const components = colorString.split(\",\")\n    \n    \n    \n        const result = {\n            \"red\": Number(components[0]),\n            \"green\": Number(components[1]),\n            \"blue\": Number(components[2]),\n            \"alpha\": Number(components[3])\n        }\n    \n    \n        return result\n        \n        \n    }\n    \n    \n    \n    get colorDescriptor(): UIColorDescriptor {\n    \n        var descriptor\n    \n        const colorHEXFromName = UIColor.nameToHex(this.stringValue)\n    \n        if (this.stringValue.startsWith(\"rgb\")) {\n            \n            descriptor = UIColor.rgbToDescriptor(this.stringValue)\n            \n        }\n        else if (colorHEXFromName) {\n            \n            descriptor = UIColor.hexToDescriptor(colorHEXFromName)\n            \n        }\n        else {\n            \n            descriptor = UIColor.hexToDescriptor(this.stringValue)\n            \n        }\n        \n        return descriptor\n        \n    }\n    \n    \n    \n    colorWithRed(red: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + red + \",\" + descriptor.green + \",\" + descriptor.blue + \",\" +\n            descriptor.alpha + \")\")\n    \n        return result\n        \n    }\n    \n    colorWithGreen(green: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + descriptor.red + \",\" + green + \",\" + descriptor.blue + \",\" +\n            descriptor.alpha + \")\")\n    \n        return result\n        \n    }\n    \n    colorWithBlue(blue: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + descriptor.red + \",\" + descriptor.green + \",\" + blue + \",\" +\n            descriptor.alpha + \")\")\n    \n        return result\n        \n    }\n    \n    \n    colorWithAlpha(alpha: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + descriptor.red + \",\" + descriptor.green + \",\" + descriptor.blue + \",\" +\n            alpha + \")\")\n    \n        return result\n        \n    }\n    \n    \n    \n    static colorWithRGBA(red: number, green: number, blue: number, alpha: number = 1) {\n    \n    \n        const result = new UIColor(\"rgba(\" + red + \",\" + green + \",\" + blue + \",\" + alpha + \")\")\n    \n        return result\n        \n        \n    }\n    \n    static colorWithDescriptor(descriptor: UIColorDescriptor) {\n    \n    \n        const result = new UIColor(\"rgba(\" + descriptor.red.toFixed(0) + \",\" + descriptor.green.toFixed(0) + \",\" +\n            descriptor.blue.toFixed(0) + \",\" + this.defaultAlphaToOne(descriptor.alpha) + \")\")\n    \n        return result\n        \n    }\n    \n    \n    private static defaultAlphaToOne(value = 1) {\n        if (value != value) {\n            value = 1\n        }\n        return value\n    }\n    \n    \n    \n    colorByMultiplyingRGB(multiplier: number) {\n    \n        const descriptor = this.colorDescriptor\n    \n        descriptor.red = descriptor.red * multiplier\n        descriptor.green = descriptor.green * multiplier\n        descriptor.blue = descriptor.blue * multiplier\n    \n        const result = UIColor.colorWithDescriptor(descriptor)\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UICore } from \"./UICore\"\nimport { UILanguageService } from \"./UIInterfaces\"\nimport { nil } from \"./UIObject\"\n\n\nexport class UICoreValues {\n    \n    static RootViewControllerClass: any\n    static main: UICore\n    \n    static languageService: UILanguageService = nil\n    \n    static readonly broadcastEventName = {\n        \n        \"RouteDidChange\": \"RouteDidChange\",\n        \"WindowDidResize\": \"WindowDidResize\"\n        \n    }\n    \n    \n}\n", "import { UIObject } from \"./UIObject\"\n\n\n\n\n\nexport class UIPoint extends UIObject {\n    \n    constructor(public x: number, public y: number) {\n        \n        super()\n        \n    }\n    \n    \n    \n    \n    \n    copy() {\n        return new UIPoint(this.x, this.y)\n    }\n    \n    \n    isEqualTo(point: UIPoint) {\n    \n        const result = (this.x == point.x && this.y == point.y)\n    \n        return result\n        \n    }\n    \n    scale(zoom: number) {\n        const x = this.x\n        const y = this.y\n        this.x = x * zoom\n        this.y = y * zoom\n        return this\n    }\n    \n    \n    \n    add(v: UIPoint) {\n        this.x = this.x + v.x\n        this.y = this.y + v.y\n        return this\n    }\n    \n    subtract(v: UIPoint) {\n        this.x = this.x - v.x\n        this.y = this.y - v.y\n        return this\n    }\n    \n    to(b: UIPoint) {\n        const a = this\n        const ab = b.copy().add(a.copy().scale(-1))\n        return ab\n    }\n    \n    pointWithX(x: number) {\n        const result = this.copy()\n        result.x = x\n        return result\n    }\n    \n    pointWithY(y: number) {\n        const result = this.copy()\n        result.y = y\n        return result\n    }\n    \n    pointByAddingX(x: number) {\n        return this.pointWithX(this.x + x)\n    }\n    \n    pointByAddingY(y: number) {\n        return this.pointWithY(this.y + y)\n    }\n    \n    \n    get length() {\n        var result = this.x * this.x + this.y * this.y\n        result = Math.sqrt(result)\n        return result\n    }\n    \n    \n    didChange(b) {\n        \n        // Callback to be set by delegate\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { FIRST_OR_NIL, IS, IS_NIL, IS_NOT_NIL, nil, NO, UIObject, YES } from \"./UIObject\"\nimport { UIPoint } from \"./UIPoint\"\nimport { UIView } from \"./UIView\"\n\n\n\n\n\nexport class UIRectangle extends UIObject {\n    \n    _isBeingUpdated: boolean\n    rectanglePointDidChange: (b: any) => void\n    max: UIPoint\n    min: UIPoint\n    \n    \n    constructor(x: number = 0, y: number = 0, height: number = 0, width: number = 0) {\n        \n        super()\n        \n        this.min = new UIPoint(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY)\n        this.max = new UIPoint(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY)\n        \n        this.min.didChange = this.rectanglePointDidChange\n        this.max.didChange = this.rectanglePointDidChange\n        \n        this._isBeingUpdated = NO\n        \n        this.min = new UIPoint(x, y)\n        this.max = new UIPoint(x + width, y + height)\n        \n        if (IS_NIL(height)) {\n            this.max.y = height\n        }\n        \n        if (IS_NIL(width)) {\n            this.max.x = width\n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    copy() {\n        const result = new UIRectangle(this.x, this.y, this.height, this.width)\n        return result\n    }\n    \n    isEqualTo(rectangle: UIRectangle) {\n    \n    \n        const result = (IS(rectangle) && this.min.isEqualTo(rectangle.min) && this.max.isEqualTo(rectangle.max))\n    \n        return result\n        \n    }\n    \n    static zero() {\n    \n        const result = new UIRectangle(0, 0, 0, 0)\n    \n        return result\n        \n    }\n    \n    containsPoint(point: UIPoint) {\n        return this.min.x <= point.x && this.min.y <= point.y &&\n            point.x <= this.max.x && point.y <= this.max.y\n    }\n    \n    updateByAddingPoint(point: UIPoint) {\n        \n        if (!point) {\n            point = new UIPoint(0, 0)\n        }\n        \n        this.beginUpdates()\n    \n        const min = this.min.copy()\n        if (min.x === nil) {\n            min.x = this.max.x\n        }\n        if (min.y === nil) {\n            min.y = this.max.y\n        }\n    \n        const max = this.max.copy()\n        if (max.x === nil) {\n            max.x = this.min.x\n        }\n        if (max.y === nil) {\n            max.y = this.min.y\n        }\n        \n        this.min.x = Math.min(min.x, point.x)\n        this.min.y = Math.min(min.y, point.y)\n        this.max.x = Math.max(max.x, point.x)\n        this.max.y = Math.max(max.y, point.y)\n        \n        this.finishUpdates()\n        \n    }\n    \n    get height() {\n        if (this.max.y === nil) {\n            return nil\n        }\n        return this.max.y - this.min.y\n    }\n    \n    set height(height: number) {\n        this.max.y = this.min.y + height\n    }\n    \n    \n    \n    get width() {\n        if (this.max.x === nil) {\n            return nil\n        }\n        return this.max.x - this.min.x\n    }\n    \n    set width(width: number) {\n        this.max.x = this.min.x + width\n    }\n    \n    \n    \n    get x() {\n        return this.min.x\n    }\n    \n    set x(x: number) {\n        \n        this.beginUpdates()\n    \n        const width = this.width\n        this.min.x = x\n        this.max.x = this.min.x + width\n        \n        this.finishUpdates()\n        \n    }\n    \n    \n    get y() {\n        return this.min.y\n    }\n    \n    \n    set y(y: number) {\n        \n        this.beginUpdates()\n    \n        const height = this.height\n        this.min.y = y\n        this.max.y = this.min.y + height\n        \n        this.finishUpdates()\n        \n    }\n    \n    \n    \n    \n    get topLeft() {\n        \n        return this.min.copy()\n        \n    }\n    \n    get topRight() {\n        return new UIPoint(this.max.x, this.y)\n    }\n    \n    get bottomLeft() {\n        return new UIPoint(this.x, this.max.y)\n    }\n    \n    get bottomRight() {\n        \n        return this.max.copy()\n        \n    }\n    \n    \n    get center() {\n    \n        const result = this.min.copy().add(this.min.to(this.max).scale(0.5))\n    \n        return result\n        \n    }\n    \n    set center(center: UIPoint) {\n    \n        const offset = this.center.to(center)\n        this.offsetByPoint(offset)\n        \n    }\n    \n    offsetByPoint(offset: UIPoint) {\n        \n        this.min.add(offset)\n        this.max.add(offset)\n        \n        return this\n        \n    }\n    \n    \n    \n    concatenateWithRectangle(rectangle: UIRectangle) {\n        \n        this.updateByAddingPoint(rectangle.bottomRight)\n        this.updateByAddingPoint(rectangle.topLeft)\n        \n        return this\n        \n    }\n    \n    \n    \n    \n    \n    intersectionRectangleWithRectangle(rectangle: UIRectangle): UIRectangle {\n    \n    \n        const result = this.copy()\n    \n        result.beginUpdates()\n    \n        const min = result.min\n        if (min.x === nil) {\n            min.x = rectangle.max.x - Math.min(result.width, rectangle.width)\n        }\n        if (min.y === nil) {\n            min.y = rectangle.max.y - Math.min(result.height, rectangle.height)\n        }\n    \n        const max = result.max\n        if (max.x === nil) {\n            max.x = rectangle.min.x + Math.min(result.width, rectangle.width)\n        }\n        if (max.y === nil) {\n            max.y = rectangle.min.y + Math.min(result.height, rectangle.height)\n        }\n        \n        result.min.x = Math.max(result.min.x, rectangle.min.x)\n        result.min.y = Math.max(result.min.y, rectangle.min.y)\n        result.max.x = Math.min(result.max.x, rectangle.max.x)\n        result.max.y = Math.min(result.max.y, rectangle.max.y)\n        \n        \n        if (result.height < 0) {\n    \n            const averageY = (this.center.y + rectangle.center.y) * 0.5\n            result.min.y = averageY\n            result.max.y = averageY\n            \n        }\n        \n        if (result.width < 0) {\n    \n            const averageX = (this.center.x + rectangle.center.x) * 0.5\n            result.min.x = averageX\n            result.max.x = averageX\n            \n        }\n        \n        result.finishUpdates()\n        \n        return result\n        \n    }\n    \n    \n    \n    get area() {\n        const result = this.height * this.width\n        return result\n    }\n    \n    \n    intersectsWithRectangle(rectangle: UIRectangle) {\n        \n        return (this.intersectionRectangleWithRectangle(rectangle).area != 0)\n        \n    }\n    \n    \n    \n    \n    \n    // add some space around the rectangle\n    rectangleWithInsets(left: number, right: number, bottom: number, top: number) {\n        const result = this.copy()\n        result.min.x = this.min.x + left\n        result.max.x = this.max.x - right\n        result.min.y = this.min.y + top\n        result.max.y = this.max.y - bottom\n        return result\n    }\n    \n    rectangleWithInset(inset: number) {\n        const result = this.rectangleWithInsets(inset, inset, inset, inset)\n        return result\n    }\n    \n    rectangleWithHeight(height: number, centeredOnPosition: number = nil) {\n        \n        if (isNaN(centeredOnPosition)) {\n            centeredOnPosition = nil\n        }\n    \n        const result = this.copy()\n        result.height = height\n        \n        if (centeredOnPosition != nil) {\n            const change = height - this.height\n            result.offsetByPoint(new UIPoint(0, change * centeredOnPosition).scale(-1))\n        }\n        \n        return result\n        \n    }\n    \n    rectangleWithWidth(width: number, centeredOnPosition: number = nil) {\n        \n        if (isNaN(centeredOnPosition)) {\n            centeredOnPosition = nil\n        }\n    \n        const result = this.copy()\n        result.width = width\n        \n        if (centeredOnPosition != nil) {\n            const change = width - this.width\n            result.offsetByPoint(new UIPoint(change * centeredOnPosition, 0).scale(-1))\n        }\n        \n        return result\n        \n    }\n    \n    rectangleWithHeightRelativeToWidth(heightRatio: number = 1, centeredOnPosition: number = nil) {\n    \n        const result = this.rectangleWithHeight(this.width * heightRatio, centeredOnPosition)\n    \n        return result\n        \n    }\n    \n    rectangleWithWidthRelativeToHeight(widthRatio: number = 1, centeredOnPosition: number = nil) {\n    \n        const result = this.rectangleWithWidth(this.height * widthRatio, centeredOnPosition)\n    \n        return result\n        \n    }\n    \n    rectangleWithX(x: number, centeredOnPosition: number = 0) {\n    \n        const result = this.copy()\n        result.x = x - result.width * centeredOnPosition\n        \n        return result\n        \n    }\n    \n    rectangleWithY(y: number, centeredOnPosition: number = 0) {\n    \n        const result = this.copy()\n        result.y = y - result.height * centeredOnPosition\n        \n        return result\n        \n    }\n    \n    \n    \n    rectangleByAddingX(x: number) {\n    \n        const result = this.copy()\n        result.x = this.x + x\n        \n        return result\n        \n    }\n    \n    rectangleByAddingY(y: number) {\n    \n        const result = this.copy()\n        result.y = this.y + y\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    rectanglesBySplittingWidth(\n        weights: number[],\n        paddings: number | number[] = 0,\n        absoluteWidths: number | number[] = nil\n    ) {\n        \n        if (IS_NIL(paddings)) {\n            \n            paddings = 1\n            \n        }\n        \n        if (!(paddings instanceof Array)) {\n            \n            paddings = [paddings].arrayByRepeating(weights.length - 1)\n            \n        }\n        \n        paddings = paddings.arrayByTrimmingToLengthIfLonger(weights.length - 1)\n        \n        if (!(absoluteWidths instanceof Array) && IS_NOT_NIL(absoluteWidths)) {\n            absoluteWidths = [absoluteWidths].arrayByRepeating(weights.length)\n        }\n    \n        const result: UIRectangle[] = []\n        const sumOfWeights = weights.reduce(function (a, b, index) {\n            if (IS_NOT_NIL(absoluteWidths[index])) {\n                b = 0\n            }\n            return a + b\n        }, 0)\n        const sumOfPaddings = paddings.summedValue\n        const sumOfAbsoluteWidths = (absoluteWidths as number[]).summedValue\n        const totalRelativeWidth = this.width - sumOfPaddings - sumOfAbsoluteWidths\n        var previousCellMaxX = this.x\n    \n        for (var i = 0; i < weights.length; i++) {\n    \n            var resultWidth: number\n            if (IS_NOT_NIL(absoluteWidths[i])) {\n                \n                resultWidth = absoluteWidths[i] || 0\n                \n            }\n            else {\n                \n                resultWidth = totalRelativeWidth * (weights[i] / sumOfWeights)\n                \n            }\n    \n            const rectangle = this.rectangleWithWidth(resultWidth)\n    \n            var padding = 0\n            if (paddings.length > i && paddings[i]) {\n                padding = paddings[i]\n            }\n            \n            rectangle.x = previousCellMaxX\n            previousCellMaxX = rectangle.max.x + padding\n            //rectangle = rectangle.rectangleWithInsets(0, padding, 0, 0);\n            result.push(rectangle)\n            \n        }\n        \n        return result\n        \n    }\n    \n    rectanglesBySplittingHeight(\n        weights: number[],\n        paddings: number | number[] = 0,\n        absoluteHeights: number | number[] = nil\n    ) {\n        \n        if (IS_NIL(paddings)) {\n            \n            paddings = 1\n            \n        }\n        \n        if (!(paddings instanceof Array)) {\n            \n            paddings = [paddings].arrayByRepeating(weights.length - 1)\n            \n        }\n        \n        paddings = paddings.arrayByTrimmingToLengthIfLonger(weights.length - 1)\n        \n        if (!(absoluteHeights instanceof Array) && IS_NOT_NIL(absoluteHeights)) {\n            absoluteHeights = [absoluteHeights].arrayByRepeating(weights.length)\n        }\n    \n        const result: UIRectangle[] = []\n        const sumOfWeights = weights.reduce(function (a, b, index) {\n            if (IS_NOT_NIL(absoluteHeights[index])) {\n                b = 0\n            }\n            return a + b\n        }, 0)\n        const sumOfPaddings = paddings.summedValue\n        const sumOfAbsoluteHeights = (absoluteHeights as number[]).summedValue\n        const totalRelativeHeight = this.height - sumOfPaddings - sumOfAbsoluteHeights\n        var previousCellMaxY = this.y\n    \n        for (var i = 0; i < weights.length; i++) {\n            var resultHeight: number\n            if (IS_NOT_NIL(absoluteHeights[i])) {\n                \n                resultHeight = absoluteHeights[i] || 0\n                \n            }\n            else {\n                \n                resultHeight = totalRelativeHeight * (weights[i] / sumOfWeights)\n                \n            }\n    \n            const rectangle = this.rectangleWithHeight(resultHeight)\n    \n            var padding = 0\n            if (paddings.length > i && paddings[i]) {\n                padding = paddings[i]\n            }\n            \n            rectangle.y = previousCellMaxY\n            previousCellMaxY = rectangle.max.y + padding\n            //rectangle = rectangle.rectangleWithInsets(0, 0, padding, 0);\n            result.push(rectangle)\n        }\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    rectanglesByEquallySplittingWidth(numberOfFrames: number, padding: number = 0) {\n        const result: UIRectangle[] = []\n        const totalPadding = padding * (numberOfFrames - 1)\n        const resultWidth = (this.width - totalPadding) / numberOfFrames\n        for (var i = 0; i < numberOfFrames; i++) {\n            const rectangle = this.rectangleWithWidth(resultWidth, i / (numberOfFrames - 1))\n            result.push(rectangle)\n        }\n        return result\n    }\n    \n    rectanglesByEquallySplittingHeight(numberOfFrames: number, padding: number = 0) {\n        const result: UIRectangle[] = []\n        const totalPadding = padding * (numberOfFrames - 1)\n        const resultHeight = (this.height - totalPadding) / numberOfFrames\n        for (var i = 0; i < numberOfFrames; i++) {\n            const rectangle = this.rectangleWithHeight(resultHeight, i / (numberOfFrames - 1))\n            result.push(rectangle)\n        }\n        return result\n    }\n    \n    \n    \n    distributeViewsAlongWidth(\n        views: UIView[],\n        weights: number | number[] = 1,\n        paddings?: number | number[],\n        absoluteWidths?: number | number[]\n    ) {\n        \n        if (!(weights instanceof Array)) {\n            weights = [weights].arrayByRepeating(views.length)\n        }\n    \n        const frames = this.rectanglesBySplittingWidth(weights, paddings, absoluteWidths)\n    \n        frames.forEach((frame, index, array) => FIRST_OR_NIL(views[index]).frame = frame)\n        \n        return this\n        \n    }\n    \n    distributeViewsAlongHeight(\n        views: UIView[],\n        weights: number | number[] = 1,\n        paddings?: number | number[],\n        absoluteHeights?: number | number[]\n    ) {\n        \n        if (!(weights instanceof Array)) {\n            weights = [weights].arrayByRepeating(views.length)\n        }\n    \n        const frames = this.rectanglesBySplittingHeight(weights, paddings, absoluteHeights)\n    \n        frames.forEach((frame, index, array) => FIRST_OR_NIL(views[index]).frame = frame)\n        \n        return this\n        \n    }\n    \n    \n    distributeViewsEquallyAlongWidth(views: UIView[], padding: number) {\n    \n        const frames = this.rectanglesByEquallySplittingWidth(views.length, padding)\n    \n        frames.forEach(function (frame, index, array) {\n            views[index].frame = frame\n        })\n        \n        return this\n        \n    }\n    \n    distributeViewsEquallyAlongHeight(views: UIView[], padding: number) {\n    \n        const frames = this.rectanglesByEquallySplittingHeight(views.length, padding)\n    \n        frames.forEach(function (frame, index, array) {\n            views[index].frame = frame\n        })\n        \n        return this\n        \n    }\n    \n    \n    \n    rectangleForNextRow(padding: number = 0, height = this.height) {\n        const result = this.rectangleWithY(this.max.y + padding)\n        if (height != this.height) {\n            result.height = height\n        }\n        return result\n    }\n    \n    rectangleForNextColumn(padding: number = 0, width = this.width) {\n        const result = this.rectangleWithX(this.max.x + padding)\n        if (width != this.width) {\n            result.width = width\n        }\n        return result\n    }\n    \n    rectangleForPreviousRow(padding: number = 0) {\n        const result = this.rectangleWithY(this.min.y - this.height - padding)\n        return result\n    }\n    \n    rectangleForPreviousColumn(padding: number = 0) {\n        const result = this.rectangleWithX(this.min.x - this.width - padding)\n        return result\n    }\n    \n    \n    \n    // Bounding box\n    static boundingBoxForPoints(points) {\n        const result = new UIRectangle()\n        for (var i = 0; i < points.length; i++) {\n            result.updateByAddingPoint(points[i])\n        }\n        return result\n    }\n    \n    \n    beginUpdates() {\n        this._isBeingUpdated = YES\n    }\n    \n    finishUpdates() {\n        this._isBeingUpdated = NO\n        this.didChange()\n    }\n    \n    \n    didChange() {\n        \n        // Callback to be set by delegate\n        \n    }\n    \n    _rectanglePointDidChange() {\n        \n        if (!this._isBeingUpdated) {\n            \n            this.didChange()\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UICoreExtensionValueObject } from \"./UICoreExtensionValueObject\"\nimport { UIObject } from \"./UIObject\"\n\n\n\n\n\ndeclare global {\n    \n    \n    interface Array<T> {\n        \n        removeElementAtIndex(index: number);\n        \n        removeElement(element: T);\n        \n        insertElementAtIndex(index: number, element: T);\n        \n        replaceElementAtIndex(index: number, element: T);\n        \n        \n        contains(element: T): boolean;\n        \n        findAsyncSequential(functionToCall: (value: any) => Promise<boolean>): Promise<any>;\n        \n        groupedBy(keyFunction: (item: T) => any): { [key: string]: Array<T> } & Object;\n        \n        copy(): Array<T>;\n        \n        arrayByRepeating(numberOfRepetitions: number): Array<T>;\n        \n        arrayByTrimmingToLengthIfLonger(maxLength: number): Array<T>;\n        \n        anyMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n        \n        noneMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n        \n        allMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n        \n        firstElement: T;\n        lastElement: T;\n        readonly summedValue: T;\n        \n        everyElement: UIEveryElementItem<T>;\n        \n        max(): number;\n        \n        min(): number;\n        \n        isEqualToArray(array: Array<T>, keyPath?: string): boolean;\n        \n    }\n    \n    \n    \n    interface String {\n        \n        contains(string): boolean;\n        \n        readonly numericalValue: number;\n        isAString: boolean;\n        \n    }\n    \n    \n    \n    interface Number {\n        \n        isANumber: boolean;\n        \n        readonly integerValue: number;\n        \n    }\n    \n    \n    \n    interface Date {\n        \n        readonly dateString: string;\n        \n    }\n    \n    \n    interface Object {\n        \n        forEach(callbackFunction: (value: any, key: string) => void): void;\n        \n        readonly allValues: Array<any>;\n        \n        readonly allKeys: string[];\n        \n    }\n    \n    \n}\n\nexport {}\n\nconst YES = true\nconst NO = false\n\nif (\"removeElementAtIndex\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).removeElementAtIndex = function (this: Array<any>, index: number) {\n        \n        // @ts-ignore\n        if (index >= 0 && index < this.length) {\n            \n            this.splice(index, 1)\n            \n        }\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     removeElementAtIndex(index: number);\n//\n// }\n\n\nif (\"removeElement\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).removeElement = function (this: Array<any>, element) {\n        \n        this.removeElementAtIndex(this.indexOf(element))\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     removeElement(element: T);\n//\n// }\n\n\nif (\"insertElementAtIndex\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).insertElementAtIndex = function (this: Array<any>, index: number, element: any) {\n        \n        if (index >= 0 && index <= this.length) {\n            \n            this.splice(index, 0, element)\n            \n        }\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     insertElementAtIndex(index: number, element: T);\n//\n// }\n\n\nif (\"replaceElementAtIndex\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).replaceElementAtIndex = function (this: Array<any>, index: number, element: any) {\n        \n        this.removeElementAtIndex(index)\n        this.insertElementAtIndex(index, element)\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     replaceElementAtIndex(index: number, element: T);\n//\n// }\n\n\nif (\"contains\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).contains = function (this: Array<any>, element) {\n        \n        const result = (this.indexOf(element) != -1)\n        return result\n        \n    }\n    \n}\n\nif (\"containsAny\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).containsAny = function (this: Array<any>, elements: any[]) {\n        \n        const result = this.anyMatch(function (element, index, array) {\n            return elements.contains(element)\n        })\n        \n        return result\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     contains(element: T): boolean;\n//\n//     containsAny(element: T[]): boolean;\n//\n// }\n\n\nif (\"anyMatch\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).anyMatch = function (\n        this: Array<any>,\n        functionToCall: (value: any, index: number, array: any[]) => boolean\n    ) {\n        \n        // @ts-ignore\n        const result = (this.findIndex(functionToCall) > -1)\n        \n        return result\n        \n    }\n    \n}\n\nif (\"noneMatch\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).noneMatch = function (\n        this: Array<any>,\n        functionToCall: (value: any, index: number, array: any[]) => boolean\n    ) {\n        \n        // @ts-ignore\n        const result = (this.findIndex(functionToCall) == -1)\n        \n        return result\n        \n    }\n    \n}\n\nif (\"allMatch\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).allMatch = function (\n        this: Array<any>,\n        functionToCall: (value: any, index: number, array: any[]) => boolean\n    ) {\n        \n        function reversedFunction(value: any, index: number, array: any[]) {\n            return !functionToCall(value, index, array)\n        }\n        \n        // @ts-ignore\n        const result = (this.findIndex(reversedFunction) == -1)\n        \n        return result\n        \n    }\n    \n}\n\nif (\"findAsyncSequential\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).findAsyncSequential = function (\n        this: Array<any>,\n        functionToCall: (value: any) => Promise<boolean>\n    ) {\n    \n        // https://stackoverflow.com/questions/55601062/using-an-async-function-in-array-find\n        async function findAsyncSequential<T>(\n            array: T[],\n            predicate: (t: T) => Promise<boolean>,\n        ): Promise<T | undefined> {\n            for (const t of array) {\n                if (await predicate(t)) {\n                    return t;\n                }\n            }\n            return undefined;\n        }\n        \n        const result = findAsyncSequential(this, functionToCall);\n        \n        return result\n        \n    }\n    \n}\n\n\n\n// interface Array<T> {\n//\n//     anyMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n//\n//     noneMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n//\n//     allMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n//\n// }\n\n\nif (\"groupedBy\" in Array.prototype == NO) {\n    \n    Array.prototype.groupedBy = function (this: Array<any>, funcProp) {\n        return this.reduce(function (acc, val) {\n            (acc[funcProp(val)] = acc[funcProp(val)] || []).push(val)\n            return acc\n        }, {})\n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     groupedBy(keyFunction: (item: T) => any): { [key: string]: Array<T> };\n//\n// }\n\n\nif (\"firstElement\" in Array.prototype == NO) {\n    Object.defineProperty(Array.prototype, \"firstElement\", {\n        get: function firstElement(this: Array<any>) {\n            const result = this[0]\n            return result\n        },\n        set: function (this: Array<any>, element: any) {\n            if (this.length == 0) {\n                this.push(element)\n                return\n            }\n            this[0] = element\n        }\n    })\n}\n\nif (\"lastElement\" in Array.prototype == NO) {\n    Object.defineProperty(Array.prototype, \"lastElement\", {\n        get: function lastElement(this: Array<any>) {\n            const result = this[this.length - 1]\n            return result\n        },\n        set: function (this: Array<any>, element: any) {\n            if (this.length == 0) {\n                this.push(element)\n                return\n            }\n            this[this.length - 1] = element\n        }\n    })\n}\n\nif (\"everyElement\" in Array.prototype == NO) {\n    \n    Object.defineProperty(Array.prototype, \"everyElement\", {\n        \n        get: function everyElement(this: Array<any>) {\n            \n            var valueKeys = []\n            \n            const targetFunction = (objects) => {\n                \n                return this.map((element, index, array) => {\n                    \n                    var elementFunction = (UIObject.valueForKeyPath(valueKeys.join(\".\"), element) as Function).bind(\n                        element,\n                        objects\n                    )\n                    \n                    return elementFunction()\n                    \n                })\n                \n            }\n            \n            const result = new Proxy(\n                targetFunction,\n                {\n                    \n                    get: (target, key, receiver) => {\n                        \n                        if (key == \"UI_elementValues\") {\n                            \n                            return this.map((element, index, array) => UIObject.valueForKeyPath(\n                                valueKeys.join(\".\"),\n                                element\n                            ))\n                            \n                        }\n                        \n                        valueKeys.push(key)\n                        \n                        return result\n                        \n                    },\n                    set: (target, key, value, receiver) => {\n                        \n                        valueKeys.push(key)\n                        \n                        this.forEach((element, index, array) => {\n                            \n                            UIObject.setValueForKeyPath(valueKeys.join(\".\"), value, element, YES)\n                            \n                        })\n                        \n                        return true\n                        \n                    }\n                    \n                }\n            )\n            \n            return result\n            \n        },\n        set: function (this: Array<any>, element: any) {\n            \n            for (var i = 0; i < this.length; ++i) {\n                \n                this[i] = element\n                \n            }\n            \n        }\n        \n    })\n    \n}\n\n\nexport type UIEveryElementItem<T> = {\n    \n    [P in keyof T]: UIEveryElementItem<T[P]>\n    \n} & {\n    \n    UI_elementValues?: T[];\n    \n} & T\n\n// interface Array<T> {\n//\n//     firstElement: T;\n//     lastElement: T;\n//\n//     everyElement: UIEveryElementItem<T>;\n//\n// }\n\n\nif (\"copy\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).copy = function (this: Array<any>) {\n        \n        const result = this.slice(0)\n        return result\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     copy(): Array<T>;\n//\n// }\n\n\nif (\"arrayByRepeating\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).arrayByRepeating = function (this: Array<any>, numberOfRepetitions: number) {\n        const result = []\n        for (var i = 0; i < numberOfRepetitions; i++) {\n            this.forEach(function (element, index, array) {\n                result.push(element)\n            })\n        }\n        return result\n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     arrayByRepeating(numberOfRepetitions: number): Array<T>;\n//\n// }\n\n\nif (\"arrayByTrimmingToLengthIfLonger\" in Array.prototype == NO) {\n    (Array.prototype as any).arrayByTrimmingToLengthIfLonger = function (this: Array<any>, maxLength: number) {\n        const result = []\n        for (var i = 0; i < maxLength && i < this.length; i++) {\n            result.push(this[i])\n        }\n        return result\n    }\n}\n\n\n// interface Array<T> {\n//\n//     arrayByTrimmingToLengthIfLonger(maxLength: number): Array<T>;\n//\n// }\n\n\nif (\"summedValue\" in Array.prototype == NO) {\n    \n    Object.defineProperty(Array.prototype, \"summedValue\", {\n        get: function summedValue(this: Array<any>) {\n            const result = this.reduce(function (a, b) {\n                return a + b\n            }, 0)\n            return result\n        }\n    })\n    \n}\n\n\n// interface Array<T> {\n//\n//     readonly summedValue: T;\n//\n//     max(): number;\n//     min(): number;\n//\n//\n// }\n\nArray.prototype.max = function () {\n    return Math.max.apply(null, this)\n}\n\nArray.prototype.min = function () {\n    return Math.min.apply(null, this)\n}\n\n\n// interface Array<T> {\n//\n//     isEqualToArray(array: Array<T>, keyPath?: string): boolean;\n//\n// }\n\n// Warn if overriding existing method\nif (\"isEqualToArray\" in Array.prototype == YES) {\n    console.warn(\n        \"Overriding existing Array.prototype.isEqualToArray. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\")\n}\n// attach the .equals method to Array's prototype to call it on any array\nArray.prototype.isEqualToArray = function (array: any[], keyPath?: string) {\n    \n    // if the other array is a falsy value, return\n    if (!array) {\n        return false\n    }\n    \n    // compare lengths - can save a lot of time \n    if (this.length != array.length) {\n        return false\n    }\n    \n    var i = 0\n    const l = this.length\n    for (; i < l; i++) {\n        \n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array && !keyPath) {\n            \n            // recurse into the nested arrays\n            if (!this[i].isEqualToArray(array[i])) {\n                return false\n            }\n            \n        }\n        else if (keyPath && UIObject.valueForKeyPath(keyPath, this[i]) != UIObject.valueForKeyPath(keyPath, array[i])) {\n            \n            return false\n            \n        }\n        else if (this[i] != array[i]) {\n            \n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false\n            \n        }\n        \n    }\n    \n    return true\n    \n}\n\n// Hide method from for-in loops\nObject.defineProperty(Array.prototype, \"isEqualToArray\", { enumerable: false })\n\n\n\n\n\nif (\"forEach\" in Object.prototype == NO) {\n    \n    (Object.prototype as any).forEach = function (this: Object, callbackFunction: (value: any, key: string) => void) {\n        const keys = Object.keys(this)\n        keys.forEach(function (key, index, array) {\n            callbackFunction(this[key], key)\n        }.bind(this))\n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"forEach\", { enumerable: false })\n    \n}\n\n\n// interface Object {\n//\n//     forEach(callbackFunction: (value: any, key: string) => void): void;\n//\n// }\n\n\nif (\"allValues\" in Object.prototype == NO) {\n    Object.defineProperty(Object.prototype, \"allValues\", {\n        get: function (this: Object) {\n            const values = []\n            this.forEach(function (value: any) {\n                values.push(value)\n            })\n            return values\n        }\n    })\n}\n\n\n// interface Object {\n//\n//     readonly allValues: Array<any>;\n//\n// }\n\n\nif (\"allKeys\" in Object.prototype == NO) {\n    Object.defineProperty(Object.prototype, \"allKeys\", {\n        get: function (this: Object) {\n            const values = Object.keys(this)\n            return values\n        }\n    })\n}\n\n\n// interface Object {\n//\n//     readonly allKeys: string[];\n//\n// }\n\n\nif (\"objectByCopyingValuesRecursivelyFromObject\" in Object.prototype == NO) {\n    \n    (Object.prototype as any).objectByCopyingValuesRecursivelyFromObject = function (this: Object, object: any) {\n        \n        \n        function isAnObject(item: any) {\n            return (item && typeof item === \"object\" && !Array.isArray(item))\n        }\n        \n        function mergeRecursively(target: any, source: any) {\n            \n            const output = Object.assign({}, target)\n            \n            if (isAnObject(target) && isAnObject(source)) {\n                \n                Object.keys(source).forEach(function (key) {\n                    \n                    if (isAnObject(source[key])) {\n                        \n                        // if (!(key in target)) {\n                        \n                        //     Object.assign(output, { [key]: source[key] });\n                        \n                        // }\n                        // else {\n                        \n                        output[key] = mergeRecursively(target[key], source[key])\n                        \n                        //}\n                        \n                    }\n                    else {\n                        \n                        Object.assign(output, { [key]: source[key] })\n                        \n                    }\n                    \n                })\n                \n            }\n            \n            return output\n            \n        }\n        \n        const result = mergeRecursively(this, object)\n        \n        return result\n        \n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"objectByCopyingValuesRecursivelyFromObject\", { enumerable: false })\n    \n}\n\n\nif (\"asValueObject\" in Object.prototype == NO) {\n    \n    (Object.prototype as any).asValueObject = function () {\n        \n        const result = new UICoreExtensionValueObject(this)\n        \n        return result\n        \n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"asValueObject\", { enumerable: false })\n    \n}\n\n\n// interface Object {\n//\n//     objectByCopyingValuesRecursivelyFromObject<T>(object: T): this & T;\n//\n//     asValueObject(): this;\n//\n// }\n\nexport type Unpacked<T> =\n    T extends (infer U)[]\n        ? U\n        : T extends (...args: any[]) => infer U\n            ? U\n            : T extends Promise<infer U>\n                ? U\n                : T\n\nexport type UnpackedObject<T> = {\n    [P in keyof T]: Unpacked<T[P]>\n}\n\nexport function promisedProperties<ObjectType extends object>(object: ObjectType): UnpackedObject<ObjectType> {\n    \n    let promisedProperties = []\n    const objectKeys = Object.keys(object)\n    \n    objectKeys.forEach((key) => promisedProperties.push(object[key]))\n    \n    // @ts-ignore\n    return Promise.all(promisedProperties)\n        .then((resolvedValues) => {\n            return resolvedValues.reduce((resolvedObject, property, index) => {\n                resolvedObject[objectKeys[index]] = property\n                return resolvedObject\n            }, object)\n        })\n    \n}\n\n// if (\"promisedProperties\" in Object.prototype == NO) {\n//\n//     (Object.prototype as any).promisedProperties = function () {\n//\n//         const result = promisedProperties(this);\n//\n//         return result\n//\n//     }\n//\n//     // Hide method from for-in loops\n//     Object.defineProperty(Object.prototype, \"promisedProperties\", { enumerable: false });\n//\n// }\n//\n//\n// interface Object {\n//\n//     readonly promisedProperties: UnpackedObject<this>;\n//\n// }\n\n\nif (\"contains\" in String.prototype == NO) {\n    \n    (String.prototype as any).contains = function (this: String, string) {\n        \n        const result = (this.indexOf(string) != -1)\n        return result\n        \n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"contains\", { enumerable: false })\n    \n}\n\n\n// interface String {\n//\n//     contains(string): boolean;\n//\n// }\n\n\nif (\"capitalizedString\" in String.prototype == NO) {\n    Object.defineProperty(Object.prototype, \"capitalizedString\", {\n        get: function (this: String) {\n            const result = this.charAt(0).toUpperCase() + this.slice(1).toLowerCase()\n            return result\n        }\n    })\n}\n\n\n// interface String {\n//\n//     readonly capitalizedString: string;\n//\n// }\n\n\nif (\"numericalValue\" in String.prototype == NO) {\n    Object.defineProperty(String.prototype, \"numericalValue\", {\n        get: function numericalValue(this: string) {\n            const result = Number(this)\n            return result\n        }\n    })\n}\n\n\n// interface String {\n//\n//     readonly numericalValue: number;\n//\n// }\n\n\nif (\"isAString\" in String.prototype == NO) {\n    \n    (String.prototype as any).isAString = YES\n    \n}\n\n\n// interface String {\n//\n//     isAString: boolean;\n//\n// }\n\n\nif (\"isANumber\" in Number.prototype == NO) {\n    \n    (Number.prototype as any).isANumber = YES\n    \n}\n\n\n// interface Number {\n//\n//     isANumber: boolean;\n//\n// }\n\n\n\n\n\nif (\"integerValue\" in Number.prototype == NO) {\n    Object.defineProperty(Number.prototype, \"integerValue\", {\n        get: function (this: number) {\n            const result = parseInt(\"\" + (Math.round(this) + 0.5))\n            return result\n        }\n    })\n}\n\n\n// interface Number {\n//\n//     readonly integerValue: number;\n//\n// }\n\n\n\nexport class PrimitiveNumber {\n    \n    // @ts-ignore\n    static [Symbol.hasInstance](x) {\n        return\n    }\n    \n}\n\n\nif (\"integerValue\" in Boolean.prototype == NO) {\n    \n    Object.defineProperty(Boolean.prototype, \"integerValue\", {\n        get: function (this: boolean) {\n            \n            if (this == true) {\n                \n                return 1\n                \n            }\n            \n            return 0\n            \n        }\n    })\n    \n}\n\n\n// interface Boolean {\n//\n//     readonly integerValue: number;\n//\n// }\n\n\nif (\"dateString\" in Date.prototype == NO) {\n    \n    Object.defineProperty(Date.prototype, \"dateString\", {\n        get: function dateString(this: Date) {\n            \n            const result = (\"0\" + this.getDate()).slice(-2) + \"-\" + (\"0\" + (this.getMonth() + 1)).slice(-2) + \"-\" +\n                this.getFullYear() + \" \" + (\"0\" + this.getHours()).slice(-2) + \":\" +\n                (\"0\" + this.getMinutes()).slice(-2)\n            \n            return result\n            \n        }\n    })\n    \n    \n    \n}\n\n\n// interface Date {\n//\n//     readonly dateString: string;\n//\n// }\n\n\n\n\n\n\n\n\n", "import { IS_FIREFOX, IS_SAFARI } from \"./ClientCheckers\"\nimport { UIColor } from \"./UIColor\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { UILocalizedTextObject } from \"./UIInterfaces\"\nimport { FIRST, IS, IS_DEFINED, IS_NIL, IS_NOT, nil, NO, UIObject, YES } from \"./UIObject\"\nimport { UIPoint } from \"./UIPoint\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport \"./UICoreExtensions\"\n\n\ndeclare module AutoLayout {\n    \n    \n    class Constraint {\n        \n        [key: string]: any\n        \n    }\n    \n    \n    class View {\n        \n        [key: string]: any\n        \n    }\n    \n    \n    class VisualFormat {\n        \n        static parse(arg0: any, arg1: any): any;\n        \n        [key: string]: any\n        \n    }\n    \n    \n    enum Attribute {\n        \n        LEFT, RIGHT, BOTTOM, TOP, CENTERX, CENTERY, WIDTH, HEIGHT, ZINDEX, VARIABLE, NOTANATTRIBUTE\n        \n    }\n    \n    \n    enum Relation {\n        \n        EQU, LEQ, GEQ\n        \n    }\n    \n    \n}\n\n// @ts-ignore\nif (!window.AutoLayout) {\n    \n    // @ts-ignore\n    window.AutoLayout = nil\n    \n}\n\n\n\ninterface LooseObject {\n    [key: string]: any\n}\n\n\nexport interface ControlEventTargetsObject {\n    \n    [key: string]: Function[];\n    \n}\n\n\nexport interface UIViewBroadcastEvent {\n    \n    name: string;\n    parameters: {\n        [key: string]: string | string[];\n    }\n    \n}\n\n\n\nexport type UIViewAddControlEventTargetObject<T extends typeof UIView.controlEvent> = {\n    \n    [K in keyof T]: ((sender: UIView, event: Event) => void) & Partial<UIViewAddControlEventTargetObject<T>>\n    \n}\n\n\n\n\n\nexport class UIView extends UIObject {\n    \n    _nativeSelectionEnabled: boolean = YES\n    _shouldLayout: boolean\n    _UITableViewRowIndex: number\n    _UITableViewReusabilityIdentifier: any\n    _UIViewIntrinsicTemporaryWidth: string\n    _UIViewIntrinsicTemporaryHeight: string\n    _enabled: boolean = YES\n    _frame: any\n    _backgroundColor: UIColor = UIColor.transparentColor\n    \n    _viewHTMLElement: HTMLElement & LooseObject\n    \n    _innerHTMLKey: string\n    _defaultInnerHTML: string\n    _parameters: { [x: string]: (string | UILocalizedTextObject) }\n    \n    _localizedTextObject: UILocalizedTextObject = nil\n    \n    _controlEventTargets: ControlEventTargetsObject = {} //{ \"PointerDown\": Function[]; \"PointerMove\": Function[]; \"PointerLeave\": Function[]; \"PointerEnter\": Function[]; \"PointerUpInside\": Function[]; \"PointerUp\": Function[]; \"PointerHover\": Function[]; };\n    _frameTransform: string\n    _viewControllerLayoutFunction: () => void = nil\n    _willLayoutSubviewsDelegateFunction: () => void = nil\n    _didLayoutSubviewsDelegateFunction: () => void = nil\n    _didReceiveBroadcastEventDelegateFunction: (event: UIViewBroadcastEvent) => void = nil\n    _updateLayoutFunction: any = nil\n    // @ts-ignore\n    _constraints: any[] //AutoLayout.Constraint[];\n    superview: UIView\n    subviews: UIView[]\n    _styleClasses: any[]\n    _isHidden: boolean = NO\n    \n    pausesPointerEvents: boolean = NO\n    stopsPointerEventPropagation: boolean = YES\n    _isPointerInside: boolean\n    _isPointerValid: boolean\n    _initialPointerPosition: UIPoint\n    _hasPointerDragged: boolean\n    _pointerDragThreshold = 2\n    \n    ignoresTouches: boolean = NO\n    ignoresMouse: boolean = NO\n    \n    \n    static _UIViewIndex: number = -1\n    _UIViewIndex: number\n    \n    static _viewsToLayout: UIView[] = []\n    \n    forceIntrinsicSizeZero: boolean = NO\n    _touchEventTime: number\n    \n    static _pageScale = 1\n    \n    constructor(\n        elementID: string = (\"UIView\" +\n            UIView.nextIndex),\n        viewHTMLElement: HTMLElement & LooseObject = null,\n        elementType: string = null,\n        initViewData?: any\n    ) {\n        \n        super()\n        \n        // Instance variables\n        \n        UIView._UIViewIndex = UIView.nextIndex\n        this._UIViewIndex = UIView._UIViewIndex\n        \n        this._styleClasses = []\n        // Object.defineProperty(this, \"styleClasses\", { get: this.styleClasses, set: this.setStyleClasses });\n        // Object.defineProperty(this, \"styleClassName\", { get: this.styleClassName });\n        \n        this._initViewHTMLElement(elementID, viewHTMLElement, elementType)\n        \n        this.subviews = []\n        this.superview = nil\n        \n        // Object.defineProperty(this, \"elementID\", { get: this.elementID });\n        \n        // Object.defineProperty(this, \"constraints\", { get: this.constraints, set: this.setConstraints });\n        this._constraints = []\n        \n        this._updateLayoutFunction = nil\n        \n        //Object.defineProperty(this, \"backgroundColor\", { get: this.backgroundColor, set: this.setBackgroundColor });\n        //this.backgroundColor = \"transparent\";\n        \n        // Object.defineProperty(this, \"alpha\", { get: this.alpha, set: this.setAlpha });\n        \n        // Object.defineProperty(this, \"frame\", { get: this.frame, set: this.setFrame });\n        // Object.defineProperty(this, \"bounds\", { get: this.bounds, set: this.setBounds });\n        \n        // Object.defineProperty(this, \"userInteractionEnabled\", { get: this.userInteractionEnabled, set: this.setUserInteractionEnabled });\n        \n        // this._controlEventTargets = {\n        //     \"PointerDown\": [],\n        //     \"PointerMove\": [],\n        //     \"PointerLeave\": [],\n        //     \"PointerEnter\": [],\n        //     \"PointerUpInside\": [],\n        //     \"PointerUp\": [],\n        //     \"PointerHover\": []\n        // }\n        \n        \n        this._frameTransform = \"\"\n        \n        this.initView(this.viewHTMLElement.id, this.viewHTMLElement, initViewData)\n        \n        this._initViewCSSSelectorsIfNeeded()\n        \n        this._loadUIEvents()\n        \n        \n        this.setNeedsLayout()\n        \n        \n    }\n    \n    \n    static get nextIndex() {\n        \n        return UIView._UIViewIndex + 1\n        \n    }\n    \n    static get pageHeight() {\n        \n        const body = document.body\n        const html = document.documentElement\n        \n        const height = Math.max(\n            body.scrollHeight,\n            body.offsetHeight,\n            html.clientHeight,\n            html.scrollHeight,\n            html.offsetHeight\n        )\n        \n        return height\n        \n    }\n    \n    static get pageWidth() {\n        \n        const body = document.body\n        const html = document.documentElement\n        \n        const width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth)\n        \n        return width\n        \n    }\n    \n    \n    \n    \n    \n    initView(elementID: string, viewHTMLElement: HTMLElement, initViewData?: any) {\n    \n    \n    \n    }\n    \n    \n    \n    \n    \n    centerInContainer() {\n        this.style.left = \"50%\"\n        this.style.top = \"50%\"\n        this.style.transform = \"translateX(-50%) translateY(-50%)\"\n    }\n    \n    centerXInContainer() {\n        this.style.left = \"50%\"\n        this.style.transform = \"translateX(-50%)\"\n    }\n    \n    centerYInContainer() {\n        this.style.top = \"50%\"\n        this.style.transform = \"translateY(-50%)\"\n    }\n    \n    \n    \n    _initViewHTMLElement(elementID, viewHTMLElement, elementType = \"div\") {\n        \n        \n        if (!IS(elementType)) {\n            \n            elementType = \"div\"\n            \n        }\n        \n        if (!IS(viewHTMLElement)) {\n            \n            this._viewHTMLElement = this.createElement(elementID, elementType)\n            \n            this.style.position = \"absolute\"\n            this.style.margin = \"0\"\n            \n        }\n        else {\n            \n            this._viewHTMLElement = viewHTMLElement\n            \n        }\n        \n        if (IS(elementID)) {\n            \n            \n            this.viewHTMLElement.id = elementID\n            \n            \n        }\n        \n        \n        this.viewHTMLElement.obeyAutolayout = YES\n        \n        this.viewHTMLElement.UIView = this\n        \n        this.addStyleClass(this.styleClassName)\n        \n    }\n    \n    \n    \n    set nativeSelectionEnabled(selectable: boolean) {\n        this._nativeSelectionEnabled = selectable\n        if (!selectable) {\n            this.style.cssText = this.style.cssText +\n                \" -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;\"\n        }\n        else {\n            this.style.cssText = this.style.cssText +\n                \" -webkit-touch-callout: text; -webkit-user-select: text; -khtml-user-select: text; -moz-user-select: text; -ms-user-select: text; user-select: text;\"\n        }\n    }\n    \n    \n    get nativeSelectionEnabled() {\n        return this._nativeSelectionEnabled\n    }\n    \n    \n    \n    get styleClassName() {\n        \n        const result = \"UICore_UIView_\" + this.class.name\n        \n        return result\n        \n    }\n    \n    _initViewCSSSelectorsIfNeeded() {\n        \n        if (!this.class._areViewCSSSelectorsInitialized) {\n            \n            this.initViewStyleSelectors()\n            \n            this.class._areViewCSSSelectorsInitialized = YES\n            \n        }\n        \n    }\n    \n    initViewStyleSelectors() {\n        \n        // Override this in a subclass\n        \n    }\n    \n    initStyleSelector(selector, style) {\n        \n        const styleRules = UIView.getStyleRules(selector)\n        \n        if (!styleRules) {\n            \n            UIView.createStyleSelector(selector, style)\n            \n        }\n        \n    }\n    \n    \n    createElement(elementID, elementType) {\n        let result = document.getElementById(elementID)\n        if (!result) {\n            result = document.createElement(elementType)\n        }\n        return result\n    }\n    \n    public get viewHTMLElement() {\n        return this._viewHTMLElement\n    }\n    \n    public get elementID() {\n        \n        return this.viewHTMLElement.id\n        \n    }\n    \n    \n    setInnerHTML(key: string, defaultString: string, parameters?: { [x: string]: string | UILocalizedTextObject }) {\n        \n        this._innerHTMLKey = key\n        this._defaultInnerHTML = defaultString\n        this._parameters = parameters\n        \n        const languageName = UICoreValues.languageService.currentLanguageKey\n        const result = UICoreValues.languageService.stringForKey(key, languageName, defaultString, parameters)\n        \n        this.innerHTML = result\n        \n    }\n    \n    \n    _setInnerHTMLFromKeyIfPossible() {\n        \n        if (this._innerHTMLKey && this._defaultInnerHTML) {\n            \n            this.setInnerHTML(this._innerHTMLKey, this._defaultInnerHTML, this._parameters)\n            \n        }\n        \n    }\n    \n    _setInnerHTMLFromLocalizedTextObjectIfPossible() {\n        \n        if (IS(this._localizedTextObject)) {\n            \n            this.innerHTML = UICoreValues.languageService.stringForCurrentLanguage(this._localizedTextObject)\n            \n        }\n        \n    }\n    \n    \n    get localizedTextObject() {\n        \n        return this._localizedTextObject\n        \n    }\n    \n    set localizedTextObject(localizedTextObject: UILocalizedTextObject) {\n        \n        this._localizedTextObject = localizedTextObject\n        \n        this._setInnerHTMLFromLocalizedTextObjectIfPossible()\n        \n    }\n    \n    \n    get innerHTML() {\n        return this.viewHTMLElement.innerHTML\n    }\n    \n    \n    set innerHTML(innerHTML) {\n        \n        if (this.innerHTML != innerHTML) {\n            \n            this.viewHTMLElement.innerHTML = FIRST(innerHTML, \"\")\n            \n        }\n        \n    }\n    \n    \n    \n    set hoverText(hoverText: string) {\n        this.viewHTMLElement.setAttribute(\"title\", hoverText)\n    }\n    \n    get hoverText() {\n        return this.viewHTMLElement.getAttribute(\"title\")\n    }\n    \n    \n    get scrollSize() {\n        \n        const result = new UIRectangle(0, 0, this.viewHTMLElement.scrollHeight, this.viewHTMLElement.scrollWidth)\n        \n        return result\n        \n    }\n    \n    \n    \n    get dialogView(): UIDialogView {\n        if (!IS(this.superview)) {\n            return nil\n        }\n        if (!(this[\"_isAUIDialogView\"])) {\n            return this.superview.dialogView\n        }\n        return this as any as UIDialogView\n    }\n    \n    \n    get rootView(): UIView {\n        if (IS(this.superview)) {\n            return this.superview.rootView\n        }\n        return this\n    }\n    \n    \n    public set enabled(enabled: boolean) {\n        this._enabled = enabled\n        this.updateContentForCurrentEnabledState()\n    }\n    \n    public get enabled(): boolean {\n        return this._enabled\n    }\n    \n    updateContentForCurrentEnabledState() {\n        this.hidden = !this.enabled\n        this.userInteractionEnabled = this.enabled\n    }\n    \n    \n    \n    \n    public get tabIndex(): number {\n        \n        return Number(this.viewHTMLElement.getAttribute(\"tabindex\"))\n        \n    }\n    \n    \n    public set tabIndex(index: number) {\n        \n        this.viewHTMLElement.setAttribute(\"tabindex\", \"\" + index)\n        \n    }\n    \n    \n    \n    \n    \n    get styleClasses() {\n        \n        return this._styleClasses\n        \n    }\n    \n    set styleClasses(styleClasses) {\n        \n        this._styleClasses = styleClasses\n        \n    }\n    \n    hasStyleClass(styleClass) {\n        \n        // This is for performance reasons\n        if (!IS(styleClass)) {\n            return NO\n        }\n        \n        const index = this.styleClasses.indexOf(styleClass)\n        if (index > -1) {\n            return YES\n        }\n        return NO\n        \n    }\n    \n    \n    \n    addStyleClass(styleClass: string) {\n        \n        if (!IS(styleClass)) {\n            return\n        }\n        \n        if (!this.hasStyleClass(styleClass)) {\n            this._styleClasses.push(styleClass)\n        }\n        \n    }\n    \n    removeStyleClass(styleClass: string) {\n        \n        // This is for performance reasons\n        if (!IS(styleClass)) {\n            return\n        }\n        \n        const index = this.styleClasses.indexOf(styleClass)\n        if (index > -1) {\n            \n            this.styleClasses.splice(index, 1)\n            \n        }\n        \n        \n    }\n    \n    \n    \n    static findViewWithElementID(elementID: string): UIView {\n        const viewHTMLElement = document.getElementById(elementID)\n        if (IS_NOT(viewHTMLElement)) {\n            return nil\n        }\n        // @ts-ignore\n        const result = viewHTMLElement.UIView\n        return result\n    }\n    \n    \n    \n    \n    static createStyleSelector(selector, style) {\n        \n        return\n        \n        // @ts-ignore\n        if (!document.styleSheets) {\n            return\n        }\n        if (document.getElementsByTagName(\"head\").length == 0) {\n            return\n        }\n        \n        var styleSheet\n        var mediaType\n        \n        if (document.styleSheets.length > 0) {\n            for (var i = 0, l: any = document.styleSheets.length; i < l; i++) {\n                if (document.styleSheets[i].disabled) {\n                    continue\n                }\n                const media = document.styleSheets[i].media\n                mediaType = typeof media\n                \n                if (mediaType === \"string\") {\n                    if (media as any === \"\" || ((media as any).indexOf(\"screen\") !== -1)) {\n                        styleSheet = document.styleSheets[i]\n                    }\n                }\n                else if (mediaType == \"object\") {\n                    if (media.mediaText === \"\" || (media.mediaText.indexOf(\"screen\") !== -1)) {\n                        styleSheet = document.styleSheets[i]\n                    }\n                }\n                \n                if (typeof styleSheet !== \"undefined\") {\n                    break\n                }\n            }\n        }\n        \n        if (typeof styleSheet === \"undefined\") {\n            const styleSheetElement = document.createElement(\"style\")\n            styleSheetElement.type = \"text/css\"\n            document.getElementsByTagName(\"head\")[0].appendChild(styleSheetElement)\n            \n            for (i = 0; i < document.styleSheets.length; i++) {\n                if (document.styleSheets[i].disabled) {\n                    continue\n                }\n                styleSheet = document.styleSheets[i]\n            }\n            \n            mediaType = typeof styleSheet.media\n        }\n        \n        if (mediaType === \"string\") {\n            for (var i = 0, l = styleSheet.rules.length; i < l; i++) {\n                if (styleSheet.rules[i].selectorText && styleSheet.rules[i].selectorText.toLowerCase() ==\n                    selector.toLowerCase()) {\n                    styleSheet.rules[i].style.cssText = style\n                    return\n                }\n            }\n            styleSheet.addRule(selector, style)\n        }\n        else if (mediaType === \"object\") {\n            \n            var styleSheetLength = 0\n            \n            try {\n                \n                styleSheetLength = (styleSheet.cssRules) ? styleSheet.cssRules.length : 0\n                \n            } catch (error) {\n                \n            }\n            \n            \n            for (var i = 0; i < styleSheetLength; i++) {\n                if (styleSheet.cssRules[i].selectorText && styleSheet.cssRules[i].selectorText.toLowerCase() ==\n                    selector.toLowerCase()) {\n                    styleSheet.cssRules[i].style.cssText = style\n                    return\n                }\n            }\n            styleSheet.insertRule(selector + \"{\" + style + \"}\", styleSheetLength)\n        }\n    }\n    \n    static getStyleRules(selector) {\n        var selector = selector.toLowerCase()\n        for (var i = 0; i < document.styleSheets.length; i++) {\n            const styleSheet = document.styleSheets[i] as any\n            var styleRules\n            \n            try {\n                \n                styleRules = styleSheet.cssRules ? styleSheet.cssRules : styleSheet.rules\n                \n            } catch (error) {\n                \n            }\n            \n            return styleRules\n        }\n    }\n    \n    \n    \n    get style() {\n        return this.viewHTMLElement.style\n    }\n    \n    get computedStyle() {\n        return getComputedStyle(this.viewHTMLElement)\n    }\n    \n    public get hidden(): boolean {\n        return this._isHidden\n    }\n    \n    \n    public set hidden(v: boolean) {\n        \n        this._isHidden = v\n        \n        if (this._isHidden) {\n            this.style.visibility = \"hidden\"\n        }\n        else {\n            this.style.visibility = \"visible\"\n        }\n        \n        \n    }\n    \n    static set pageScale(scale: number) {\n        \n        UIView._pageScale = scale\n        \n        const zoom = scale\n        const width = 100 / zoom\n        const viewHTMLElement = UICoreValues.main.rootViewController.view.viewHTMLElement\n        viewHTMLElement.style.transformOrigin = \"left top\"\n        viewHTMLElement.style.transform = \"scale(\" + zoom + \")\"\n        viewHTMLElement.style.width = width + \"%\"\n        \n    }\n    \n    static get pageScale() {\n        \n        return UIView._pageScale\n        \n    }\n    \n    \n    \n    \n    \n    calculateAndSetViewFrame() {\n        \n        // Use this method to calculate the frame for the view itself\n        \n        // This can be used when adding subviews to existing views like buttons\n        \n    }\n    \n    \n    \n    \n    \n    public get frame(): UIRectangle {\n        \n        // var result = new UIRectangle(1 * this.viewHTMLElement.offsetLeft, 1 * this.viewHTMLElement.offsetTop, 1 * this.viewHTMLElement.offsetHeight, 1 * this.viewHTMLElement.offsetWidth);\n        \n        // result.zIndex = 1 * this.style.zIndex;\n        \n        var result = this._frame\n        \n        if (!result) {\n            \n            result = new UIRectangle(1 * this.viewHTMLElement.offsetLeft, 1 * this.viewHTMLElement.offsetTop, 1 *\n                this.viewHTMLElement.offsetHeight, 1 * this.viewHTMLElement.offsetWidth)\n            result.zIndex = 0\n            \n        }\n        \n        return result.copy()\n        \n    }\n    \n    public set frame(rectangle: UIRectangle) {\n        \n        if (IS(rectangle)) {\n            this.setFrame(rectangle)\n        }\n        \n    }\n    \n    setFrame(rectangle, zIndex = 0, performUncheckedLayout = NO) {\n        \n        \n        const frame = this._frame || new UIRectangle(nil, nil, nil, nil)\n        \n        if (zIndex != undefined) {\n            rectangle.zIndex = zIndex\n        }\n        this._frame = rectangle\n        \n        // This is useless because frames are copied\n        // frame.didChange = function () {\n        //     // Do nothing\n        // }\n        // rectangle.didChange = function () {\n        //     this.frame = rectangle;\n        // }.bind(this);\n        \n        if (frame && frame.isEqualTo(rectangle) && !performUncheckedLayout) {\n            return\n        }\n        \n        \n        UIView._setAbsoluteSizeAndPosition(\n            this.viewHTMLElement,\n            rectangle.topLeft.x,\n            rectangle.topLeft.y,\n            rectangle.width,\n            rectangle.height,\n            rectangle.zIndex\n        )\n        \n        \n        if (frame.height != rectangle.height || frame.width != rectangle.width || performUncheckedLayout) {\n            \n            this.setNeedsLayout()\n            \n            this.boundsDidChange()\n            \n            //this.layoutSubviews();\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    get bounds() {\n        \n        var result: UIRectangle\n        \n        // if (IS_NOT(this._frame) && this.style.height == \"\" && this.style.width  == \"\" && this.style.left == \"\" && this.style.right == \"\" && this.style.bottom == \"\" && this.style.top == \"\") {\n        \n        //     result = new UIRectangle(0, 0, 0, 0)\n        \n        // }\n        // else\n        if (IS_NOT(this._frame)) {\n            \n            result = new UIRectangle(0, 0, 1 * this.viewHTMLElement.offsetHeight, 1 * this.viewHTMLElement.offsetWidth)\n            \n        }\n        else {\n            \n            result = this.frame.copy()\n            \n            result.x = 0\n            result.y = 0\n            \n        }\n        \n        return result\n        \n    }\n    \n    set bounds(rectangle) {\n        \n        const frame = this.frame\n        \n        this.frame = new UIRectangle(frame.topLeft.x, frame.topLeft.y, rectangle.height, rectangle.width)\n        \n    }\n    \n    \n    boundsDidChange() {\n        \n        \n        \n    }\n    \n    \n    setPosition(\n        left: number | string = nil,\n        right: number | string = nil,\n        bottom: number | string = nil,\n        top: number | string = nil,\n        height: number | string = nil,\n        width: number | string = nil\n    ) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"left\", left)\n        this.setStyleProperty(\"right\", right)\n        this.setStyleProperty(\"bottom\", bottom)\n        this.setStyleProperty(\"top\", top)\n        this.setStyleProperty(\"height\", height)\n        this.setStyleProperty(\"width\", width)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    setSizes(height?: number | string, width?: number | string) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"height\", height)\n        this.setStyleProperty(\"width\", width)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    setMinSizes(height?: number | string, width?: number | string) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"minHeight\", height)\n        this.setStyleProperty(\"minWidth\", width)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    setMaxSizes(height?: number | string, width?: number | string) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"maxHeight\", height)\n        this.setStyleProperty(\"maxWidth\", width)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    setMargin(margin?: number | string) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"margin\", margin)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    setMargins(left?: number | string, right?: number | string, bottom?: number | string, top?: number | string) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"marginLeft\", left)\n        this.setStyleProperty(\"marginRight\", right)\n        this.setStyleProperty(\"marginBottom\", bottom)\n        this.setStyleProperty(\"marginTop\", top)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    setPadding(padding?: number | string) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"padding\", padding)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    setPaddings(left?: number | string, right?: number | string, bottom?: number | string, top?: number | string) {\n        \n        const previousBounds = this.bounds\n        \n        this.setStyleProperty(\"paddingLeft\", left)\n        this.setStyleProperty(\"paddingRight\", right)\n        this.setStyleProperty(\"paddingBottom\", bottom)\n        this.setStyleProperty(\"paddingTop\", top)\n        \n        const bounds = this.bounds\n        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {\n            this.setNeedsLayout()\n            this.boundsDidChange()\n        }\n        \n    }\n    \n    \n    \n    \n    \n    setBorder(\n        radius: number | string = nil,\n        width: number | string = 1,\n        color: UIColor = UIColor.blackColor,\n        style: string = \"solid\"\n    ) {\n        \n        this.setStyleProperty(\"borderStyle\", style)\n        \n        this.setStyleProperty(\"borderRadius\", radius)\n        \n        this.setStyleProperty(\"borderColor\", color.stringValue)\n        \n        this.setStyleProperty(\"borderWidth\", width)\n        \n    }\n    \n    \n    \n    \n    \n    setStyleProperty(propertyName: string, value?: number | string) {\n        \n        \n        try {\n            \n            if (IS_NIL(value)) {\n                return\n            }\n            if (IS_DEFINED(value) && (value as Number).isANumber) {\n                value = \"\" + (value as number).integerValue + \"px\"\n            }\n            this.style[propertyName] = value\n            \n        } catch (exception) {\n            \n            console.log(exception)\n            \n        }\n        \n        \n    }\n    \n    \n    \n    get userInteractionEnabled() {\n        \n        const result = (this.style.pointerEvents != \"none\")\n        \n        return result\n        \n    }\n    \n    set userInteractionEnabled(userInteractionEnabled) {\n        \n        if (userInteractionEnabled) {\n            \n            this.style.pointerEvents = \"\"\n            \n        }\n        else {\n            \n            this.style.pointerEvents = \"none\"\n            \n        }\n        \n    }\n    \n    \n    \n    get backgroundColor() {\n        return this._backgroundColor\n    }\n    \n    set backgroundColor(backgroundColor: UIColor) {\n        \n        this._backgroundColor = backgroundColor\n        \n        this.style.backgroundColor = backgroundColor.stringValue\n        \n    }\n    \n    \n    \n    get alpha() {\n        return 1 * (this.style.opacity as any)\n    }\n    \n    set alpha(alpha) {\n        this.style.opacity = \"\" + alpha\n    }\n    \n    \n    \n    \n    \n    static animateViewOrViewsWithDurationDelayAndFunction(\n        viewOrViews: UIView | HTMLElement | UIView[] | HTMLElement[],\n        duration: number,\n        delay: number,\n        timingStyle = \"cubic-bezier(0.25,0.1,0.25,1)\",\n        transformFunction: Function,\n        transitioncompletionFunction: Function\n    ) {\n        \n        \n        function callTransitioncompletionFunction() {\n            \n            (transitioncompletionFunction || nil)();\n            \n            (viewOrViews as UIView[]).forEach(function (view, index, array) {\n                \n                view.animationDidFinish()\n                \n            })\n            \n        }\n        \n        \n        if (IS_FIREFOX) {\n            \n            // Firefox does not fire the transition completion event properly\n            new UIObject().performFunctionWithDelay(delay + duration, callTransitioncompletionFunction)\n            \n            \n            \n        }\n        \n        \n        if (!(viewOrViews instanceof Array)) {\n            viewOrViews = [viewOrViews] as any\n        }\n        \n        const transitionStyles = []\n        const transitionDurations = []\n        const transitionDelays = []\n        const transitionTimings = []\n        \n        for (var i = 0; i < (viewOrViews as any).length; i++) {\n            \n            var view = viewOrViews[i]\n            \n            if (view.viewHTMLElement) {\n                \n                view = view.viewHTMLElement\n                \n            }\n            \n            view.addEventListener(\"transitionend\", transitionDidFinish, true)\n            \n            transitionStyles.push(view.style.transition)\n            transitionDurations.push(view.style.transitionDuration)\n            transitionDelays.push(view.style.transitionDelay)\n            transitionTimings.push(view.style.transitionTimingFunction)\n            \n            view.style.transition = \"all\"\n            view.style.transitionDuration = \"\" + duration + \"s\"\n            view.style.transitionDelay = \"\" + delay + \"s\"\n            view.style.transitionTimingFunction = timingStyle\n            \n        }\n        \n        \n        \n        transformFunction()\n        \n        \n        const transitionObject = {\n            \n            \"finishImmediately\": finishTransitionImmediately,\n            \"didFinish\": transitionDidFinishManually,\n            \"views\": viewOrViews,\n            \"registrationTime\": Date.now()\n            \n        }\n        \n        function finishTransitionImmediately() {\n            for (var i = 0; i < (viewOrViews as any).length; i++) {\n                var view = viewOrViews[i]\n                if (view.viewHTMLElement) {\n                    view = view.viewHTMLElement\n                }\n                view.style.transition = \"all\"\n                view.style.transitionDuration = \"\" + duration + \"s\"\n                view.style.transitionDelay = \"\" + delay + \"s\"\n                view.style.transition = transitionStyles[i]\n                view.style.transitionDuration = transitionDurations[i]\n                view.style.transitionDelay = transitionDelays[i]\n                view.style.transitionTimingFunction = transitionTimings[i]\n            }\n        }\n        \n        function transitionDidFinish(event) {\n            var view = event.srcElement\n            if (!view) {\n                return\n            }\n            if (view.viewHTMLElement) {\n                view = view.viewHTMLElement\n            }\n            view.style.transition = transitionStyles[i]\n            view.style.transitionDuration = transitionDurations[i]\n            view.style.transitionDelay = transitionDelays[i]\n            view.style.transitionTimingFunction = transitionTimings[i]\n            \n            callTransitioncompletionFunction()\n            \n            view.removeEventListener(\"transitionend\", transitionDidFinish, true)\n            \n        }\n        \n        function transitionDidFinishManually() {\n            for (var i = 0; i < (viewOrViews as any).length; i++) {\n                \n                var view = viewOrViews[i]\n                \n                if (view.viewHTMLElement) {\n                    view = view.viewHTMLElement\n                }\n                \n                view.style.transition = transitionStyles[i]\n                view.style.transitionDuration = transitionDurations[i]\n                view.style.transitionDelay = transitionDelays[i]\n                view.style.transitionTimingFunction = transitionTimings[i]\n                \n                view.removeEventListener(\"transitionend\", transitionDidFinish, true)\n                \n            }\n            \n            \n            \n        }\n        \n        return transitionObject\n        \n    }\n    \n    \n    \n    \n    \n    animationDidFinish() {\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    static _transformAttribute = ((\"transform\" in document.documentElement.style) ? \"transform\" : undefined) ||\n        ((\"-webkit-transform\" in document.documentElement.style) ? \"-webkit-transform\" : \"undefined\") ||\n        ((\"-moz-transform\" in document.documentElement.style) ? \"-moz-transform\" : \"undefined\") ||\n        ((\"-ms-transform\" in document.documentElement.style) ? \"-ms-transform\" : \"undefined\") ||\n        ((\"-o-transform\" in document.documentElement.style) ? \"-o-transform\" : \"undefined\")\n    \n    static _setAbsoluteSizeAndPosition(element, left, top, width, height, zIndex = 0) {\n        \n        // if (!UIView._transformAttribute) {\n        \n        //     UIView._transformAttribute = (('transform' in document.documentElement.style) ? 'transform' : undefined);\n        //     UIView._transformAttribute = UIView._transformAttribute || (('-webkit-transform' in document.documentElement.style) ? '-webkit-transform' : 'undefined');\n        //     UIView._transformAttribute = UIView._transformAttribute || (('-moz-transform' in document.documentElement.style) ? '-moz-transform' : 'undefined');\n        //     UIView._transformAttribute = UIView._transformAttribute || (('-ms-transform' in document.documentElement.style) ? '-ms-transform' : 'undefined');\n        //     UIView._transformAttribute = UIView._transformAttribute || (('-o-transform' in document.documentElement.style) ? '-o-transform' : 'undefined');\n        \n        // }\n        \n        if (!IS(element) || !element.obeyAutolayout && !element.getAttribute(\"obeyAutolayout\")) {\n            return\n        }\n        \n        if (element.id == \"mainView\") {\n            \n            \n            var asd = 1\n            \n        }\n        \n        if (IS(height)) {\n            height = height.integerValue + \"px\"\n        }\n        \n        if (IS(width)) {\n            width = width.integerValue + \"px\"\n        }\n        \n        var str = element.style.cssText\n        \n        const frameTransform = UIView._transformAttribute + \": translate3d(\" + (1 * left).integerValue + \"px, \" +\n            (1 * top).integerValue + \"px, \" + zIndex.integerValue + \"px)\"\n        \n        if (element.UIView) {\n            str = str + frameTransform + \";\"\n        }\n        else {\n            element.UIView._frameTransform = frameTransform\n        }\n        \n        if (height == nil) {\n            str = str + \" height: unset;\"\n        }\n        else {\n            str = str + \" height:\" + height + \";\"\n        }\n        \n        if (width == nil) {\n            str = str + \" width: unset;\"\n        }\n        else {\n            str = str + \" width:\" + width + \";\"\n        }\n        \n        if (element.id == \"mainView\") {\n            \n            \n            var asd = 1\n            \n        }\n        \n        element.style.cssText = element.style.cssText + str\n        \n    }\n    \n    \n    \n    static performAutoLayout(parentElement, visualFormatArray, constraintsArray) {\n        \n        \n        const view = new AutoLayout.View()\n        \n        if (IS(visualFormatArray) && IS(visualFormatArray.length)) {\n            view.addConstraints(AutoLayout.VisualFormat.parse(visualFormatArray, { extended: true }))\n        }\n        \n        if (IS(constraintsArray) && IS(constraintsArray.length)) {\n            view.addConstraints(constraintsArray)\n        }\n        \n        const elements = {}\n        for (var key in view.subViews) {\n            \n            if (!view.subViews.hasOwnProperty(key)) {\n                continue\n            }\n            \n            var element = nil\n            \n            try {\n                \n                element = parentElement.querySelector(\"#\" + key)\n                \n            } catch (error) {\n                \n                //console.log(\"Error occurred \" + error);\n                \n            }\n            \n            if (element && !element.obeyAutolayout && !element.getAttribute(\"obeyAutolayout\")) {\n            \n            \n            \n            }\n            else if (element) {\n                \n                element.className += element.className ? \" abs\" : \"abs\"\n                elements[key] = element\n                \n            }\n            \n        }\n        \n        var parentUIView = nil\n        \n        if (parentElement.UIView) {\n            \n            parentUIView = parentElement.UIView\n            \n        }\n        \n        const updateLayout = function () {\n            view.setSize(\n                parentElement ? parentElement.clientWidth : window.innerWidth,\n                parentElement ? parentElement.clientHeight : window.innerHeight\n            )\n            for (key in view.subViews) {\n                \n                if (!view.subViews.hasOwnProperty(key)) {\n                    continue\n                }\n                \n                const subView = view.subViews[key]\n                \n                if (elements[key]) {\n                    UIView._setAbsoluteSizeAndPosition(\n                        elements[key],\n                        subView.left,\n                        subView.top,\n                        subView.width,\n                        subView.height\n                    )\n                }\n            }\n            \n            parentUIView.didLayoutSubviews()\n            \n        }\n        \n        updateLayout()\n        return updateLayout\n        \n    }\n    \n    \n    static runFunctionBeforeNextFrame(step: () => void) {\n        \n        if (IS_SAFARI) {\n            \n            // This creates a microtask\n            Promise.resolve().then(step)\n            \n        }\n        else {\n            \n            window.requestAnimationFrame(step)\n            \n        }\n        \n    }\n    \n    \n    static scheduleLayoutViewsIfNeeded() {\n        \n        UIView.runFunctionBeforeNextFrame(UIView.layoutViewsIfNeeded)\n        \n    }\n    \n    \n    static layoutViewsIfNeeded() {\n        for (var i = 0; i < UIView._viewsToLayout.length; i++) {\n            const view = UIView._viewsToLayout[i]\n            view.layoutIfNeeded()\n        }\n        UIView._viewsToLayout = []\n    }\n    \n    \n    setNeedsLayout() {\n        \n        if (this._shouldLayout) {\n            return\n        }\n        \n        this._shouldLayout = YES\n        \n        // Register view for layout before next frame\n        UIView._viewsToLayout.push(this)\n        \n        if (UIView._viewsToLayout.length == 1) {\n            UIView.scheduleLayoutViewsIfNeeded()\n        }\n        \n    }\n    \n    \n    get needsLayout() {\n        \n        return this._shouldLayout\n        \n    }\n    \n    \n    layoutIfNeeded() {\n        \n        if (!this._shouldLayout) {\n            return\n        }\n        \n        this._shouldLayout = NO\n        \n        try {\n            \n            this.layoutSubviews()\n            \n        } catch (exception) {\n            \n            console.log(exception)\n            \n        }\n        \n    }\n    \n    \n    layoutSubviews() {\n        \n        this.willLayoutSubviews()\n        \n        this._shouldLayout = NO\n        \n        // Autolayout\n        if (this.constraints.length) {\n            this._updateLayoutFunction = UIView.performAutoLayout(this.viewHTMLElement, null, this.constraints)\n        }\n        this._updateLayoutFunction()\n        \n        this._viewControllerLayoutFunction()\n        \n        this.applyClassesAndStyles()\n        \n        for (let i = 0; i < this.subviews.length; i++) {\n            \n            const subview = this.subviews[i]\n            subview.calculateAndSetViewFrame()\n            \n        }\n        \n        this.didLayoutSubviews()\n        \n    }\n    \n    \n    \n    applyClassesAndStyles() {\n        \n        \n        \n        //var classesString = \"\";\n        \n        for (var i = 0; i < this.styleClasses.length; i++) {\n            \n            const styleClass = this.styleClasses[i]\n            \n            if (styleClass) {\n                \n                this.viewHTMLElement.classList.add(styleClass)\n                \n            }\n            \n            \n            \n            //classesString = classesString + \" \" + styleClass;\n            \n        }\n        \n        \n        //this.viewHTMLElement.className = classesString;\n        \n        \n        \n    }\n    \n    willLayoutSubviews() {\n        \n        this._willLayoutSubviewsDelegateFunction()\n        \n    }\n    \n    didLayoutSubviews() {\n        \n        this._didLayoutSubviewsDelegateFunction()\n        \n    }\n    \n    get constraints() {\n        return this._constraints\n    }\n    \n    set constraints(constraints) {\n        this._constraints = constraints\n    }\n    \n    addConstraint(constraint) {\n        \n        this.constraints.push(constraint)\n        \n    }\n    \n    \n    \n    addConstraintsWithVisualFormat(visualFormatArray) {\n        \n        this.constraints = this.constraints.concat(AutoLayout.VisualFormat.parse(\n            visualFormatArray,\n            { extended: true }\n        ))\n        \n    }\n    \n    static constraintWithView(view, attribute, relation, toView, toAttribute, multiplier, constant, priority) {\n        \n        var UIViewObject = nil\n        var viewID = null\n        if (view) {\n            if (view.isKindOfClass && view.isKindOfClass(UIView)) {\n                UIViewObject = view\n                view = view.viewHTMLElement\n            }\n            viewID = view.id\n        }\n        \n        var toUIViewObject = nil\n        var toViewID = null\n        if (toView) {\n            if (toView.isKindOfClass && view.isKindOfClass(UIView)) {\n                toUIViewObject = toView\n                toView = toView.viewHTMLElement\n            }\n            toViewID = toView.id\n        }\n        \n        const constraint = {\n            \n            view1: viewID,\n            attr1: attribute,\n            relation: relation,\n            view2: toViewID,\n            attr2: toAttribute,\n            multiplier: multiplier,\n            constant: constant,\n            priority: priority\n            \n        }\n        \n        return constraint\n        \n    }\n    \n    static constraintAttribute = {\n        \n        \"left\": AutoLayout.Attribute.LEFT,\n        \"right\": AutoLayout.Attribute.RIGHT,\n        \"bottom\": AutoLayout.Attribute.BOTTOM,\n        \"top\": AutoLayout.Attribute.TOP,\n        \"centerX\": AutoLayout.Attribute.CENTERX,\n        \"centerY\": AutoLayout.Attribute.CENTERY,\n        \"height\": AutoLayout.Attribute.HEIGHT,\n        \"width\": AutoLayout.Attribute.WIDTH,\n        \"zIndex\": AutoLayout.Attribute.ZINDEX,\n        // Not sure what these are for\n        \"constant\": AutoLayout.Attribute.NOTANATTRIBUTE,\n        \"variable\": AutoLayout.Attribute.VARIABLE\n        \n    }\n    \n    static constraintRelation = {\n        \n        \"equal\": AutoLayout.Relation.EQU,\n        \"lessThanOrEqual\": AutoLayout.Relation.LEQ,\n        \"greaterThanOrEqual\": AutoLayout.Relation.GEQ\n        \n    }\n    \n    \n    \n    subviewWithID(viewID) {\n        \n        \n        var resultHTMLElement = nil\n        \n        try {\n            \n            resultHTMLElement = this.viewHTMLElement.querySelector(\"#\" + viewID)\n            \n        } catch (error) {\n        \n        }\n        \n        if (resultHTMLElement && resultHTMLElement.UIView) {\n            return resultHTMLElement.UIView\n        }\n        return nil\n    }\n    \n    \n    \n    rectangleContainingSubviews() {\n        \n        const center = this.bounds.center\n        \n        var result = new UIRectangle(center.x, center.y, 0, 0)\n        \n        for (var i = 0; i < this.subviews.length; i++) {\n            \n            const subview = this.subviews[i]\n            \n            var frame = subview.frame\n            \n            const rectangleContainingSubviews = subview.rectangleContainingSubviews()\n            \n            frame = frame.concatenateWithRectangle(rectangleContainingSubviews)\n            \n            result = result.concatenateWithRectangle(frame)\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    hasSubview(view: UIView) {\n        \n        // This is for performance reasons\n        if (!IS(view)) {\n            return NO\n        }\n        \n        for (var i = 0; i < this.subviews.length; i++) {\n            const subview = this.subviews[i]\n            if (subview == view) {\n                return YES\n            }\n        }\n        return NO\n    }\n    \n    get viewBelowThisView() {\n        const result: UIView = (this.viewHTMLElement.previousElementSibling as any || {}).UIView\n        return result\n    }\n    \n    get viewAboveThisView() {\n        const result: UIView = (this.viewHTMLElement.nextElementSibling as any || {}).UIView\n        return result\n    }\n    \n    addSubview(view: UIView, aboveView?: UIView) {\n        \n        if (!this.hasSubview(view) && IS(view)) {\n            \n            view.willMoveToSuperview(this)\n            \n            if (IS(aboveView)) {\n                this.viewHTMLElement.insertBefore(view.viewHTMLElement, aboveView.viewHTMLElement.nextSibling)\n                this.subviews.insertElementAtIndex(this.subviews.indexOf(aboveView), view)\n            }\n            else {\n                this.viewHTMLElement.appendChild(view.viewHTMLElement)\n                this.subviews.push(view)\n            }\n            view.didMoveToSuperview(this)\n            \n            if (this.superview && this.isMemberOfViewTree) {\n                \n                view.broadcastEventInSubtree({\n                    \n                    name: UIView.broadcastEventName.AddedToViewTree,\n                    parameters: nil\n                    \n                })\n                \n            }\n            \n            this.setNeedsLayout()\n            \n        }\n        \n    }\n    \n    addSubviews(views: UIView[]) {\n        views.forEach(function (this: UIView, view: UIView, index, array) {\n            this.addSubview(view)\n        }, this)\n    }\n    \n    \n    moveToBottomOfSuperview() {\n        \n        if (IS(this.superview)) {\n            \n            const bottomView = this.superview.subviews.firstElement\n            \n            if (bottomView == this) {\n                \n                return\n                \n            }\n            \n            this.superview.subviews.removeElement(this)\n            \n            this.superview.subviews.insertElementAtIndex(0, this)\n            \n            this.superview.viewHTMLElement.insertBefore(this.viewHTMLElement, bottomView.viewHTMLElement)\n            \n            \n        }\n        \n        \n        \n    }\n    \n    moveToTopOfSuperview() {\n        \n        if (IS(this.superview)) {\n            \n            const topView = this.superview.subviews.lastElement\n            \n            if (topView == this) {\n                \n                return\n                \n            }\n            \n            this.superview.subviews.removeElement(this)\n            \n            this.superview.subviews.push(this)\n            \n            this.superview.viewHTMLElement.appendChild(this.viewHTMLElement)\n            \n            \n        }\n        \n        \n        \n    }\n    \n    \n    removeFromSuperview() {\n        if (IS(this.superview)) {\n            \n            this.forEachViewInSubtree(function (view) {\n                \n                view.blur()\n                \n            })\n            \n            const index = this.superview.subviews.indexOf(this)\n            if (index > -1) {\n                this.superview.subviews.splice(index, 1)\n                this.superview.viewHTMLElement.removeChild(this.viewHTMLElement)\n                this.superview = nil\n                \n                this.broadcastEventInSubtree({\n                    \n                    name: UIView.broadcastEventName.RemovedFromViewTree,\n                    parameters: nil\n                    \n                })\n                \n            }\n        }\n    }\n    \n    \n    willAppear() {\n        \n        \n        \n    }\n    \n    \n    \n    willMoveToSuperview(superview: UIView) {\n        \n        this._setInnerHTMLFromKeyIfPossible()\n        \n        this._setInnerHTMLFromLocalizedTextObjectIfPossible()\n        \n    }\n    \n    didMoveToSuperview(superview: UIView) {\n        \n        this.superview = superview\n        \n    }\n    \n    wasAddedToViewTree() {\n        \n    }\n    \n    wasRemovedFromViewTree() {\n        \n    }\n    \n    get isMemberOfViewTree() {\n        var element = this.viewHTMLElement\n        for (var i = 0; element; i = i) {\n            if (element.parentElement && element.parentElement == document.body) {\n                return YES\n            }\n            element = element.parentElement\n        }\n        return NO\n    }\n    \n    \n    get allSuperviews() {\n        const result = []\n        var view: UIView = this\n        for (var i = 0; IS(view); i = i) {\n            result.push(view)\n            view = view.superview\n        }\n        return result\n    }\n    \n    \n    setNeedsLayoutOnAllSuperviews() {\n        \n        this.allSuperviews.reverse().forEach(function (view: UIView, index, array) {\n            \n            view.setNeedsLayout()\n            \n        })\n        \n    }\n    \n    \n    setNeedsLayoutUpToRootView() {\n        \n        this.setNeedsLayoutOnAllSuperviews()\n        \n        this.setNeedsLayout()\n        \n    }\n    \n    \n    focus() {\n        \n        this.viewHTMLElement.focus()\n        \n    }\n    \n    \n    blur() {\n        \n        this.viewHTMLElement.blur()\n        \n    }\n    \n    \n    \n    \n    \n    _loadUIEvents() {\n        \n        //this.viewHTMLElement = nil;\n        \n        \n        const isTouchEventClassDefined: boolean = NO || (window as any).TouchEvent\n        \n        const pauseEvent = (event: Event, forced = NO) => {\n            \n            if (this.pausesPointerEvents || forced) {\n                \n                if (event.stopPropagation) {\n                    event.stopPropagation()\n                }\n                if (event.preventDefault) {\n                    event.preventDefault()\n                }\n                event.cancelBubble = true\n                event.returnValue = false\n                return false\n                \n            }\n            \n            if (event.stopPropagation && this.stopsPointerEventPropagation) {\n                event.stopPropagation()\n            }\n            \n        }\n        \n        const onMouseDown = (event) => {\n            \n            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||\n                ((this.ignoresMouse || (IS(this._touchEventTime) && (Date.now() - this._touchEventTime) > 500)) &&\n                    event instanceof MouseEvent)) {\n                return\n            }\n            \n            this.sendControlEventForKey(UIView.controlEvent.PointerDown, event)\n            \n            this._isPointerInside = YES\n            this._isPointerValid = YES\n            this._initialPointerPosition = new UIPoint(event.clientX, event.clientY)\n            if (isTouchEventClassDefined && event instanceof TouchEvent) {\n                \n                this._touchEventTime = Date.now()\n                \n                this._initialPointerPosition = new UIPoint(event.touches[0].clientX, event.touches[0].clientY)\n                \n                if (event.touches.length > 1) {\n                    \n                    onTouchCancel(event)\n                    \n                    return\n                    \n                }\n                \n                \n            }\n            else {\n                \n                this._touchEventTime = nil\n                \n                pauseEvent(event)\n                \n            }\n            \n            \n            this._hasPointerDragged = NO\n            \n        }\n        \n        const onTouchStart = onMouseDown as any\n        \n        const onmouseup = (event) => {\n            \n            if (!this._isPointerValid) {\n                return\n            }\n            \n            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||\n                (this.ignoresMouse && event instanceof MouseEvent)) {\n                return\n            }\n            \n            if (this._isPointerInside) {\n                \n                onPointerUpInside(event)\n                \n                if (!this._hasPointerDragged) {\n                    \n                    this.sendControlEventForKey(UIView.controlEvent.PointerTap, event)\n                    \n                }\n                \n                \n            }\n            \n            // This has to be sent after the more specific event so that UIButton can ignore it when not highlighted\n            this.sendControlEventForKey(UIView.controlEvent.PointerUp, event)\n            \n            pauseEvent(event)\n            \n        }\n        \n        const onTouchEnd = onmouseup\n        \n        // function onMouseEnter(event) {\n        \n        //     this.sendControlEventForKey(UIView.controlEvent.PointerEnter, event);\n        \n        //     this._isPointerInside = YES;\n        \n        //     pauseEvent(event);\n        \n        // }\n        \n        const onmouseout = (event) => {\n            \n            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||\n                (this.ignoresMouse && event instanceof MouseEvent)) {\n                return\n            }\n            \n            this.sendControlEventForKey(UIView.controlEvent.PointerLeave, event)\n            \n            this._isPointerInside = NO\n            \n            pauseEvent(event)\n            \n        }\n        \n        const onTouchLeave = onmouseout\n        \n        var onTouchCancel = function (event) {\n            \n            if (!this._isPointerValid) {\n                return\n            }\n            \n            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||\n                (this.ignoresMouse && event instanceof MouseEvent)) {\n                return\n            }\n            \n            this._isPointerValid = NO\n            \n            this.sendControlEventForKey(UIView.controlEvent.PointerCancel, event)\n            \n        }.bind(this)\n        \n        const onmouseover = (event) => {\n            \n            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||\n                (this.ignoresMouse && event instanceof MouseEvent)) {\n                return\n            }\n            \n            this.sendControlEventForKey(UIView.controlEvent.PointerHover, event)\n            \n            this._isPointerInside = YES\n            \n            this._isPointerValid = YES\n            \n            pauseEvent(event)\n            \n        }\n        \n        const onMouseMove = (event) => {\n            \n            if (!this._isPointerValid) {\n                return\n            }\n            \n            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||\n                (this.ignoresMouse && event instanceof MouseEvent)) {\n                return\n            }\n            \n            if (IS_NOT(this._initialPointerPosition)) {\n                \n                this._initialPointerPosition = new UIPoint(event.clientX, event.clientY)\n                \n            }\n            \n            if (new UIPoint(event.clientX, event.clientY).to(this._initialPointerPosition).length >\n                this._pointerDragThreshold) {\n                \n                this._hasPointerDragged = YES\n                \n            }\n            \n            \n            this.sendControlEventForKey(UIView.controlEvent.PointerMove, event)\n            \n            pauseEvent(event)\n            \n        }\n        \n        const onTouchMove = function (event: TouchEvent) {\n            \n            if (!this._isPointerValid) {\n                return\n            }\n            \n            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||\n                (this.ignoresMouse && event instanceof MouseEvent)) {\n                return\n            }\n            \n            if (event.touches.length > 1) {\n                \n                onTouchZoom(event)\n                \n                return\n                \n            }\n            \n            const touch = event.touches[0]\n            \n            if (new UIPoint(touch.clientX, touch.clientY).to(this._initialPointerPosition).length >\n                this._pointerDragThreshold) {\n                \n                this._hasPointerDragged = YES\n                \n            }\n            \n            \n            if (this._isPointerInside && this.viewHTMLElement !=\n                document.elementFromPoint(touch.clientX, touch.clientY)) {\n                \n                this._isPointerInside = NO\n                \n                this.sendControlEventForKey(UIView.controlEvent.PointerLeave, event)\n                \n            }\n            \n            \n            this.sendControlEventForKey(UIView.controlEvent.PointerMove, event)\n            \n            //pauseEvent(event);\n            \n            \n        }\n        \n        var onTouchZoom = function onTouchZoom(event: TouchEvent) {\n            \n            this.sendControlEventForKey(UIView.controlEvent.MultipleTouches, event)\n            \n        }.bind(this)\n        \n        \n        var onPointerUpInside = (event) => {\n            pauseEvent(event)\n            \n            this.sendControlEventForKey(UIView.controlEvent.PointerUpInside, event)\n        }\n        \n        function eventKeyIsEnter(event) {\n            if (event.keyCode !== 13) {\n                return NO\n            }\n            return YES\n        }\n        \n        function eventKeyIsTab(event) {\n            if (event.keyCode !== 9) {\n                return NO\n            }\n            return YES\n        }\n        \n        function eventKeyIsEsc(event) {\n            var result = false\n            if (\"key\" in event) {\n                result = (event.key == \"Escape\" || event.key == \"Esc\")\n            }\n            else {\n                result = (event.keyCode == 27)\n            }\n            return result\n        }\n        \n        function eventKeyIsLeft(event) {\n            if (event.keyCode != \"37\") {\n                return NO\n            }\n            return YES\n        }\n        \n        function eventKeyIsRight(event) {\n            if (event.keyCode != \"39\") {\n                return NO\n            }\n            return YES\n        }\n        \n        function eventKeyIsDown(event) {\n            if (event.keyCode != \"40\") {\n                return NO\n            }\n            return YES\n        }\n        \n        function eventKeyIsUp(event) {\n            if (event.keyCode != \"38\") {\n                return NO\n            }\n            return YES\n        }\n        \n        const onKeyDown = function (event) {\n            \n            if (eventKeyIsEnter(event)) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.EnterDown, event)\n                \n            }\n            \n            if (eventKeyIsEsc(event)) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.EscDown, event)\n                \n            }\n            \n            if (eventKeyIsTab(event) && this._controlEventTargets.TabDown && this._controlEventTargets.TabDown.length) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.TabDown, event)\n                \n                pauseEvent(event, YES)\n                \n            }\n            \n            if (eventKeyIsLeft(event)) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.LeftArrowDown, event)\n                \n            }\n            \n            if (eventKeyIsRight(event)) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.RightArrowDown, event)\n                \n            }\n            \n            if (eventKeyIsDown(event)) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.DownArrowDown, event)\n                \n            }\n            \n            if (eventKeyIsUp(event)) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.UpArrowDown, event)\n                \n            }\n            \n        }.bind(this)\n        \n        const onKeyUp = function (event) {\n            \n            if (eventKeyIsEnter(event)) {\n                \n                this.sendControlEventForKey(UIView.controlEvent.EnterUp, event)\n                \n            }\n            \n        }.bind(this)\n        \n        \n        const onfocus = function (event: Event) {\n            \n            this.sendControlEventForKey(UIView.controlEvent.Focus, event)\n            \n        }.bind(this)\n        \n        const onblur = function (event: Event) {\n            \n            this.sendControlEventForKey(UIView.controlEvent.Blur, event)\n            \n        }.bind(this)\n        \n        \n        // Mouse and touch start events\n        this._viewHTMLElement.onmousedown = onMouseDown.bind(this)\n        this._viewHTMLElement.ontouchstart = onTouchStart.bind(this)\n        // this.viewHTMLElement.addEventListener(\"mousedown\", onMouseDown.bind(this), false)\n        // this.viewHTMLElement.addEventListener('touchstart', onTouchStart.bind(this), false)\n        // //this.viewHTMLElement.addEventListener(\"mouseenter\", onMouseEnter.bind(this), false);\n        \n        // Mouse and touch move events\n        this._viewHTMLElement.onmousemove = onMouseMove.bind(this)\n        this._viewHTMLElement.ontouchmove = onTouchMove.bind(this)\n        // this.viewHTMLElement.addEventListener(\"mousemove\", onMouseMove.bind(this), false)\n        // this.viewHTMLElement.addEventListener('touchmove', onTouchMove.bind(this), false)\n        \n        //this.viewHTMLElement.addEventListener(\"mousewheel\", onmousewheel.bind(this), false)\n        \n        this._viewHTMLElement.onmouseover = onmouseover.bind(this)\n        // this.viewHTMLElement.addEventListener(\"mouseover\", onmouseover.bind(this), false)\n        \n        // Mouse and touch end events\n        this._viewHTMLElement.onmouseup = onmouseup.bind(this)\n        this._viewHTMLElement.ontouchend = onTouchEnd.bind(this)\n        this._viewHTMLElement.ontouchcancel = onTouchCancel.bind(this)\n        // this.viewHTMLElement.addEventListener(\"mouseup\", onmouseup.bind(this), false)\n        // this.viewHTMLElement.addEventListener('touchend', onTouchEnd.bind(this), false)\n        // this.viewHTMLElement.addEventListener('touchcancel', onTouchCancel.bind(this), false)\n        \n        this._viewHTMLElement.onmouseout = onmouseout.bind(this)\n        // this.viewHTMLElement.addEventListener(\"mouseout\", onmouseout.bind(this), false)\n        this._viewHTMLElement.addEventListener(\"touchleave\", onTouchLeave.bind(this), false)\n        \n        // this.viewHTMLElement.onkeydown = onkeydown\n        // this.viewHTMLElement.onkeyup = onkeyup\n        this._viewHTMLElement.addEventListener(\"keydown\", onKeyDown, false)\n        this._viewHTMLElement.addEventListener(\"keyup\", onKeyUp, false)\n        \n        // Focus events\n        this._viewHTMLElement.onfocus = onfocus\n        this._viewHTMLElement.onblur = onblur\n        // this.viewHTMLElement.addEventListener(\"focus\", onfocus, true)\n        // this.viewHTMLElement.addEventListener(\"blur\", onblur, true)\n        \n        \n    }\n    \n    \n    \n    \n    \n    public static controlEvent = {\n        \n        \"PointerDown\": \"PointerDown\",\n        \"PointerMove\": \"PointerMove\",\n        \"PointerLeave\": \"PointerLeave\",\n        \"PointerEnter\": \"PointerEnter\",\n        \"PointerUpInside\": \"PointerUpInside\",\n        \"PointerTap\": \"PointerTap\",\n        \"PointerUp\": \"PointerUp\",\n        \"MultipleTouches\": \"PointerZoom\",\n        \"PointerCancel\": \"PointerCancel\",\n        \"PointerHover\": \"PointerHover\",\n        \"EnterDown\": \"EnterDown\",\n        \"EnterUp\": \"EnterUp\",\n        \"EscDown\": \"EscDown\",\n        \"TabDown\": \"TabDown\",\n        \"LeftArrowDown\": \"LeftArrowDown\",\n        \"RightArrowDown\": \"RightArrowDown\",\n        \"DownArrowDown\": \"DownArrowDown\",\n        \"UpArrowDown\": \"UpArrowDown\",\n        \"Focus\": \"Focus\",\n        \"Blur\": \"Blur\"\n        \n    }\n    \n    controlEvent = UIView.controlEvent\n    \n    \n    \n    public get addControlEventTarget() {\n        \n        const eventKeys = []\n        \n        \n        const result: UIViewAddControlEventTargetObject<typeof UIView.controlEvent> = new Proxy(\n            (this.constructor as any).controlEvent,\n            {\n                \n                get: (target, key, receiver) => {\n                    \n                    eventKeys.push(key)\n                    \n                    return result\n                    \n                },\n                set: (target, key, value, receiver) => {\n                    \n                    eventKeys.push(key)\n                    \n                    this.addTargetForControlEvents(eventKeys, value)\n                    \n                    return true\n                    \n                }\n                \n            }\n        )\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    addTargetForControlEvents(eventKeys: string[], targetFunction: (sender: UIView, event: Event) => void) {\n        \n        eventKeys.forEach(function (this: UIView, key: string, index: number, array: string[]) {\n            \n            this.addTargetForControlEvent(key, targetFunction)\n            \n        }, this)\n        \n    }\n    \n    \n    \n    addTargetForControlEvent(eventKey: string, targetFunction: (sender: UIView, event: Event) => void) {\n        \n        var targets = this._controlEventTargets[eventKey]\n        \n        if (!targets) {\n            // @ts-ignore\n            targets = []\n            this._controlEventTargets[eventKey] = targets\n        }\n        \n        if (targets.indexOf(targetFunction) == -1) {\n            targets.push(targetFunction)\n        }\n        \n    }\n    \n    removeTargetForControlEvent(eventKey: string, targetFunction: (sender: UIView, event: Event) => void) {\n        const targets = this._controlEventTargets[eventKey]\n        if (!targets) {\n            return\n        }\n        const index = targets.indexOf(targetFunction)\n        if (index != -1) {\n            targets.splice(index, 1)\n        }\n    }\n    \n    removeTargetForControlEvents(eventKeys: string[], targetFunction: (sender: UIView, event: Event) => void) {\n        \n        eventKeys.forEach(function (key, index, array) {\n            \n            this.removeTargetForControlEvent(key, targetFunction)\n            \n        }, this)\n        \n    }\n    \n    sendControlEventForKey(eventKey: string, nativeEvent: Event) {\n        var targets = this._controlEventTargets[eventKey]\n        if (!targets) {\n            return\n        }\n        targets = targets.copy()\n        for (var i = 0; i < targets.length; i++) {\n            const target = targets[i]\n            target(this, nativeEvent)\n        }\n    }\n    \n    \n    \n    \n    \n    static broadcastEventName = {\n        \n        \"LanguageChanged\": \"LanguageChanged\",\n        \"RemovedFromViewTree\": \"RemovedFromViewTree\",\n        \"AddedToViewTree\": \"AddedToViewTree\",\n        \"PageDidScroll\": \"PageDidScroll\"\n        \n    }\n    \n    \n    broadcastEventInSubtree(event: UIViewBroadcastEvent) {\n        \n        this.forEachViewInSubtree(function (view) {\n            \n            view.didReceiveBroadcastEvent(event)\n            \n            if (view._didReceiveBroadcastEventDelegateFunction) {\n                \n                view._didReceiveBroadcastEventDelegateFunction(event)\n                \n            }\n            \n        })\n        \n        \n    }\n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        if (event.name == UIView.broadcastEventName.PageDidScroll) {\n            \n            this._isPointerValid = NO\n            \n        }\n        \n        if (event.name == UIView.broadcastEventName.AddedToViewTree) {\n            \n            this.wasAddedToViewTree()\n            \n        }\n        \n        if (event.name == UIView.broadcastEventName.RemovedFromViewTree) {\n            \n            this.wasRemovedFromViewTree()\n            \n        }\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==\n            UIView.broadcastEventName.AddedToViewTree) {\n            \n            this._setInnerHTMLFromKeyIfPossible()\n            \n            this._setInnerHTMLFromLocalizedTextObjectIfPossible()\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    forEachViewInSubtree(functionToCall: (view: UIView) => void) {\n        \n        functionToCall(this)\n        \n        this.subviews.forEach(function (subview, index, array) {\n            \n            subview.forEachViewInSubtree(functionToCall)\n            \n        })\n        \n    }\n    \n    \n    \n    \n    \n    rectangleInView(rectangle: UIRectangle, view: UIView) {\n        if (!view.isMemberOfViewTree || !this.isMemberOfViewTree) {\n            return nil\n        }\n        \n        const viewClientRectangle = view.viewHTMLElement.getBoundingClientRect()\n        const viewLocation = new UIPoint(viewClientRectangle.left, viewClientRectangle.top)\n        \n        const selfClientRectangle = this.viewHTMLElement.getBoundingClientRect()\n        const selfLocation = new UIPoint(selfClientRectangle.left, selfClientRectangle.top)\n        \n        const offsetPoint = selfLocation.subtract(viewLocation)\n        \n        return rectangle.copy().offsetByPoint(offsetPoint)\n    }\n    \n    rectangleFromView(rectangle: UIRectangle, view: UIView) {\n        return view.rectangleInView(rectangle, this)\n    }\n    \n    \n    \n    \n    \n    intrinsicContentSizeWithConstraints(constrainingHeight: number = 0, constrainingWidth: number = 0) {\n        \n        // This works but is slow\n        \n        const result = new UIRectangle(0, 0, 0, 0)\n        if (this.rootView.forceIntrinsicSizeZero) {\n            return result\n        }\n        \n        var temporarilyInViewTree = NO\n        var nodeAboveThisView: Node\n        if (!this.isMemberOfViewTree) {\n            document.body.appendChild(this.viewHTMLElement)\n            temporarilyInViewTree = YES\n            nodeAboveThisView = this.viewHTMLElement.nextSibling\n        }\n        \n        const height = this.style.height\n        const width = this.style.width\n        \n        this.style.height = \"\" + constrainingHeight\n        this.style.width = \"\" + constrainingWidth\n        \n        \n        const left = this.style.left\n        const right = this.style.right\n        const bottom = this.style.bottom\n        const top = this.style.top\n        \n        this.style.left = \"\"\n        this.style.right = \"\"\n        this.style.bottom = \"\"\n        this.style.top = \"\"\n        \n        \n        const resultHeight = this.viewHTMLElement.scrollHeight\n        \n        \n        const whiteSpace = this.style.whiteSpace\n        this.style.whiteSpace = \"nowrap\"\n        \n        const resultWidth = this.viewHTMLElement.scrollWidth\n        \n        this.style.whiteSpace = whiteSpace\n        \n        \n        \n        this.style.height = height\n        this.style.width = width\n        \n        this.style.left = left\n        this.style.right = right\n        this.style.bottom = bottom\n        this.style.top = top\n        \n        if (temporarilyInViewTree) {\n            document.body.removeChild(this.viewHTMLElement)\n            if (this.superview) {\n                if (nodeAboveThisView) {\n                    this.superview.viewHTMLElement.insertBefore(this.viewHTMLElement, nodeAboveThisView)\n                }\n                else {\n                    this.superview.viewHTMLElement.appendChild(this.viewHTMLElement)\n                }\n            }\n        }\n        \n        result.height = resultHeight\n        result.width = resultWidth\n        \n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    intrinsicContentWidth(constrainingHeight: number = 0): number {\n        \n        const result = this.intrinsicContentSizeWithConstraints(constrainingHeight).width\n        \n        return result\n        \n    }\n    \n    intrinsicContentHeight(constrainingWidth: number = 0): number {\n        \n        const result = this.intrinsicContentSizeWithConstraints(undefined, constrainingWidth).height\n        \n        return result\n        \n        \n    }\n    \n    intrinsicContentSize(): UIRectangle {\n        \n        return nil\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n// This is here because modules fail with circular imports but they are needed here\ndeclare class UIDialogView<ViewType extends UIView = UIView> extends UIView {\n    _view: ViewType\n    _appearedAnimated: boolean\n    animationDuration: number\n    _zIndex: number\n    isVisible: boolean\n    dismissesOnTapOutside: boolean\n    \n    constructor(elementID?: string, viewHTMLElement?: HTMLElement);\n    \n    didDetectTapOutside(sender: UIView, event: Event): void;\n    \n    set zIndex(zIndex: number);\n    get zIndex(): number;\n    \n    set view(view: ViewType);\n    get view(): ViewType;\n    \n    willAppear(animated?: boolean): void;\n    \n    animateAppearing(): void;\n    \n    animateDisappearing(): void;\n    \n    showInView(containerView: UIView, animated: boolean): void;\n    \n    showInRootView(animated: boolean): void;\n    \n    dismiss(animated?: boolean): void;\n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent): void;\n    \n    layoutSubviews(): void;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { IS_NIL, IS_NOT, nil, NO } from \"./UIObject\"\nimport { UIViewController } from \"./UIViewController\"\n\n\nexport type ValueOf<T> = T[keyof T];\nexport type PropType<TObj, TProp extends keyof TObj> = TObj[TProp];\n\nexport type UIRouteParameters<T = any> = {\n    \n    [key: string]: string;\n    \n} | T;\n\n\nexport interface UIRouteComponent<T = any> {\n    \n    name: string;\n    parameters: UIRouteParameters<T>;\n    \n}\n\n\n// @ts-ignore\nexport class UIRoute extends Array<UIRouteComponent> {\n    \n    constructor(hash?: string) {\n        \n        super()\n        \n        if (!hash || !hash.startsWith) {\n            \n            return\n            \n        }\n        \n        if (hash.startsWith(\"#\")) {\n            hash = hash.slice(1)\n        }\n        \n        hash = decodeURIComponent(hash)\n        \n        const components = hash.split(\"]\")\n        components.forEach(function (this: UIRoute, component: string, index: number, array: string[]) {\n            \n            const componentName = component.split(\"[\")[0]\n            const parameters = {}\n            \n            if (!componentName) {\n                \n                return\n                \n            }\n            \n            const parametersString = component.split(\"[\")[1] || \"\"\n            const parameterPairStrings = parametersString.split(\",\") || []\n            \n            parameterPairStrings.forEach(function (pairString, index, array) {\n                \n                const keyAndValueArray = pairString.split(\":\")\n                const key = decodeURIComponent(keyAndValueArray[0])\n                const value = decodeURIComponent(keyAndValueArray[1])\n                \n                if (key) {\n                    \n                    parameters[key] = value\n                    \n                }\n                \n                \n                \n            })\n            \n            \n            \n            this.push({\n                name: componentName,\n                parameters: parameters\n            })\n            \n            \n            \n            \n            \n        }, this)\n        \n        \n    }\n    \n    \n    \n    static get currentRoute() {\n        \n        return new UIRoute(window.location.hash)\n        \n    }\n    \n    \n    \n    \n    \n    apply() {\n        \n        window.location.hash = this.stringRepresentation\n        \n    }\n    \n    \n    applyByReplacingCurrentRouteInHistory() {\n        \n        window.location.replace(this.linkRepresentation)\n        \n    }\n    \n    \n    \n    copy() {\n        var result = new UIRoute()\n        result = Object.assign(result, this)\n        return result\n    }\n    \n    \n    routeByRemovingComponentsOtherThanOnesNamed(componentNames: string[]) {\n        const result = this.copy()\n        const indexesToRemove: number[] = []\n        result.forEach(function (component, index, array) {\n            if (!componentNames.contains(component.name)) {\n                indexesToRemove.push(index)\n            }\n        })\n        indexesToRemove.forEach(function (indexToRemove, index, array) {\n            result.removeElementAtIndex(indexToRemove)\n        })\n        return result\n    }\n    \n    \n    routeByRemovingComponentNamed(componentName: string) {\n        const result = this.copy()\n        const componentIndex = result.findIndex(function (component, index) {\n            return (component.name == componentName)\n        })\n        if (componentIndex != -1) {\n            result.splice(componentIndex, 1)\n        }\n        return result\n    }\n    \n    \n    routeByRemovingParameterInComponent(componentName: string, parameterName: string, removeComponentIfEmpty = NO) {\n        var result = this.copy()\n        var parameters = result.componentWithName(componentName).parameters\n        if (IS_NOT(parameters)) {\n            parameters = {}\n        }\n        delete parameters[parameterName]\n        result = result.routeWithComponent(componentName, parameters)\n        if (removeComponentIfEmpty && Object.keys(parameters).length == 0) {\n            result = result.routeByRemovingComponentNamed(componentName)\n        }\n        return result\n    }\n    \n    routeBySettingParameterInComponent(componentName: string, parameterName: string, valueToSet: string) {\n        var result = this.copy()\n        if (IS_NIL(valueToSet) || IS_NIL(parameterName)) {\n            return result\n        }\n        var parameters = result.componentWithName(componentName).parameters\n        if (IS_NOT(parameters)) {\n            parameters = {}\n        }\n        parameters[parameterName] = valueToSet\n        result = result.routeWithComponent(componentName, parameters)\n        return result\n    }\n    \n    \n    routeWithViewControllerComponent<T extends typeof UIViewController>(\n        viewController: T,\n        parameters: UIRouteParameters<{ [P in keyof T[\"ParameterIdentifierName\"]]: string }>,\n        extendParameters: boolean = NO\n    ) {\n        \n        return this.routeWithComponent(viewController.routeComponentName, parameters, extendParameters)\n        \n    }\n    \n    routeWithComponent(name: string, parameters: UIRouteParameters, extendParameters: boolean = NO) {\n        \n        const result = this.copy()\n        var component = result.componentWithName(name)\n        if (IS_NOT(component)) {\n            component = {\n                name: name,\n                parameters: {}\n            }\n            result.push(component)\n        }\n        \n        if (IS_NOT(parameters)) {\n            \n            parameters = {}\n            \n        }\n        \n        if (extendParameters) {\n            component.parameters = Object.assign(component.parameters, parameters)\n        }\n        else {\n            component.parameters = parameters\n        }\n        \n        return result\n        \n    }\n    \n    navigateBySettingComponent(name: string, parameters: UIRouteParameters, extendParameters: boolean = NO) {\n        \n        this.routeWithComponent(name, parameters, extendParameters).apply()\n        \n    }\n    \n    \n    componentWithViewController<T extends typeof UIViewController>(viewController: T): UIRouteComponent<{ [P in keyof T[\"ParameterIdentifierName\"]]: string }> {\n        \n        return this.componentWithName(viewController.routeComponentName)\n        \n    }\n    \n    componentWithName(name: string): UIRouteComponent {\n        var result = nil\n        this.forEach(function (component, index, self) {\n            if (component.name == name) {\n                result = component\n            }\n        })\n        return result\n    }\n    \n    \n    get linkRepresentation() {\n        return \"#\" + this.stringRepresentation\n    }\n    \n    \n    get stringRepresentation() {\n        \n        var result = \"\"\n        this.forEach(function (component, index, self) {\n            result = result + component.name\n            const parameters = component.parameters\n            result = result + \"[\"\n            Object.keys(parameters).forEach(function (key, index, keys) {\n                if (index) {\n                    result = result + \",\"\n                }\n                result = result + encodeURIComponent(key) + \":\" + encodeURIComponent(parameters[key])\n            })\n            result = result + \"]\"\n        })\n        \n        return result\n        \n    }\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIDialogView } from \"./UIDialogView\"\nimport { FIRST_OR_NIL, IS, nil, NO, UIObject, YES } from \"./UIObject\"\nimport { UIRoute } from \"./UIRoute\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UIViewController extends UIObject {\n    \n    parentViewController: UIViewController = nil\n    childViewControllers: UIViewController[] = []\n    static readonly routeComponentName: string\n    static readonly ParameterIdentifierName: any\n    \n    constructor(public view: UIView) {\n        \n        super()\n        \n        this.view._viewControllerLayoutFunction = this.layoutViewSubviews.bind(this)\n        this.view._willLayoutSubviewsDelegateFunction = this.viewWillLayoutSubviews.bind(this)\n        this.view._didLayoutSubviewsDelegateFunction = this.viewDidLayoutSubviews.bind(this)\n        this.view._didReceiveBroadcastEventDelegateFunction = this.viewDidReceiveBroadcastEvent.bind(this)\n        \n    }\n    \n    \n    handleRouteRecursively(route: UIRoute) {\n        \n        this.handleRoute(route)\n        \n        this.childViewControllers.forEach(controller => {\n            \n            if (!route.isHandled) {\n                controller.handleRouteRecursively(route)\n            }\n            \n        })\n        \n    }\n    \n    async handleRoute(route: UIRoute) {\n        \n    \n        \n    }\n    \n    \n    async viewWillAppear() {\n    \n    \n    \n    }\n    \n    \n    async viewDidAppear() {\n    \n    \n    \n    }\n    \n    \n    async viewWillDisappear() {\n    \n    \n    \n    }\n    \n    async viewDidDisappear() {\n    \n    \n    \n    }\n    \n    \n    updateViewConstraints() {\n    \n    \n    \n    \n    \n    }\n    \n    updateViewStyles() {\n    \n    \n    \n    }\n    \n    layoutViewSubviews() {\n        \n        \n        \n    }\n    \n    _triggerLayoutViewSubviews() {\n        \n        this.view.layoutSubviews()\n        \n        this.viewDidLayoutSubviews()\n        \n    }\n    \n    viewWillLayoutSubviews() {\n        \n        this.updateViewConstraints()\n        this.updateViewStyles()\n        \n    }\n    \n    viewDidLayoutSubviews() {\n        \n        // this.childViewControllers.forEach(function (controller, index, controllers) {\n        \n        //     controller._layoutViewSubviews();\n        \n        // })\n        \n        \n        \n    }\n    \n    \n    \n    viewDidReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        \n        \n    }\n    \n    \n    \n    \n    hasChildViewController(viewController: UIViewController) {\n        \n        // This is for performance reasons\n        if (!IS(viewController)) {\n            return NO\n        }\n        \n        for (let i = 0; i < this.childViewControllers.length; i++) {\n            \n            const childViewController = this.childViewControllers[i]\n            \n            if (childViewController == viewController) {\n                return YES\n            }\n            \n        }\n        \n        return NO\n        \n    }\n    \n    addChildViewController(viewController: UIViewController) {\n        if (!this.hasChildViewController(viewController)) {\n            viewController.willMoveToParentViewController(this)\n            this.childViewControllers.push(viewController)\n            //this.view.addSubview(viewController.view);\n            //viewController.didMoveToParentViewController(this);\n        }\n    }\n    \n    \n    removeFromParentViewController() {\n        const index = this.parentViewController.childViewControllers.indexOf(this)\n        if (index > -1) {\n            this.parentViewController.childViewControllers.splice(index, 1)\n            //this.view.removeFromSuperview();\n            this.parentViewController = nil\n        }\n    }\n    \n    willMoveToParentViewController(parentViewController) {\n    \n    }\n    \n    \n    didMoveToParentViewController(parentViewController: UIViewController) {\n        \n        this.parentViewController = parentViewController\n        \n    }\n    \n    removeChildViewController(controller: UIViewController) {\n        \n        controller = FIRST_OR_NIL(controller)\n        controller.viewWillDisappear()\n        if (IS(controller.parentViewController)) {\n            controller.removeFromParentViewController()\n        }\n        if (IS(controller.view)) {\n            controller.view.removeFromSuperview()\n        }\n        controller.viewDidDisappear()\n        \n    }\n    \n    \n    addChildViewControllerInContainer(controller: UIViewController, containerView: UIView) {\n        \n        controller = FIRST_OR_NIL(controller)\n        containerView = FIRST_OR_NIL(containerView)\n        controller.viewWillAppear()\n        this.addChildViewController(controller)\n        containerView.addSubview(controller.view)\n        controller.didMoveToParentViewController(this)\n        controller.viewDidAppear()\n        \n        controller.handleRouteRecursively(UIRoute.currentRoute)\n        \n    }\n    \n    addChildViewControllerInDialogView(controller: UIViewController, dialogView: UIDialogView) {\n        \n        controller = FIRST_OR_NIL(controller)\n        dialogView = FIRST_OR_NIL(dialogView)\n        controller.viewWillAppear()\n        this.addChildViewController(controller)\n        dialogView.view = controller.view\n        \n        const originalDismissFunction = dialogView.dismiss.bind(dialogView)\n        \n        dialogView.dismiss = animated => {\n            \n            originalDismissFunction(animated)\n            \n            this.removeChildViewController(controller)\n            \n        }\n        \n        controller.didMoveToParentViewController(this)\n        controller.viewDidAppear()\n        \n        controller.handleRouteRecursively(UIRoute.currentRoute)\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIColor } from \"./UIColor\"\nimport { UILocalizedTextObject } from \"./UIInterfaces\"\nimport { FIRST, IS_LIKE_NULL, nil, NO, UIObject, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UITextView extends UIView {\n    \n    \n    _textColor: UIColor = UITextView.defaultTextColor\n    _textAlignment: string\n    \n    _isSingleLine = YES\n    \n    textPrefix = \"\"\n    textSuffix = \"\"\n    \n    _notificationAmount = 0\n    \n    _minFontSize: number = nil\n    _maxFontSize: number = nil\n    \n    _automaticFontSizeSelection = NO\n    \n    changesOften = NO\n    \n    static defaultTextColor = UIColor.blackColor\n    static notificationTextColor = UIColor.redColor\n    \n    static _intrinsicHeightCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    static _intrinsicWidthCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    \n    _intrinsicHeightCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    _intrinsicWidthCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    \n    \n    static _ptToPx: number\n    static _pxToPt: number\n    _text: string\n    \n    \n    constructor(elementID?: string, textViewType = UITextView.type.paragraph, viewHTMLElement = null) {\n        \n        super(elementID, viewHTMLElement, textViewType)\n        \n        this.text = \"\"\n        \n        this.style.overflow = \"hidden\"\n        this.style.textOverflow = \"ellipsis\"\n        this.isSingleLine = YES\n        \n        this.textColor = this.textColor\n        \n        this.userInteractionEnabled = YES\n        \n        \n        if (textViewType == UITextView.type.textArea) {\n            \n            this.pausesPointerEvents = YES\n            \n            this.addTargetForControlEvent(\n                UIView.controlEvent.PointerUpInside,\n                (sender, event) => sender.focus()\n            )\n            \n            \n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    static _determinePXAndPTRatios() {\n        \n        const o = document.createElement(\"div\")\n        o.style.width = \"1000pt\"\n        document.body.appendChild(o)\n        UITextView._ptToPx = o.clientWidth / 1000\n        document.body.removeChild(o)\n        UITextView._pxToPt = 1 / UITextView._ptToPx\n        \n    }\n    \n    \n    \n    \n    \n    static type = {\n        \n        \"paragraph\": \"p\",\n        \"header1\": \"h1\",\n        \"header2\": \"h2\",\n        \"header3\": \"h3\",\n        \"header4\": \"h4\",\n        \"header5\": \"h5\",\n        \"header6\": \"h6\",\n        \"textArea\": \"textarea\",\n        \"textField\": \"input\",\n        \"span\": \"span\",\n        \"label\": \"label\"\n        \n    }\n    \n    \n    \n    static textAlignment = {\n        \n        \"left\": \"left\",\n        \"center\": \"center\",\n        \"right\": \"right\",\n        \"justify\": \"justify\"\n        \n    }\n    \n    get textAlignment() {\n        const result = this.style.textAlign\n        return result\n    }\n    \n    set textAlignment(textAlignment: string) {\n        this._textAlignment = textAlignment\n        this.style.textAlign = textAlignment\n    }\n    \n    \n    \n    get textColor() {\n        const result = this._textColor\n        return result\n    }\n    \n    set textColor(color: UIColor) {\n        \n        this._textColor = color || UITextView.defaultTextColor\n        this.style.color = this._textColor.stringValue\n        \n    }\n    \n    \n    get isSingleLine() {\n        \n        return this._isSingleLine\n        \n    }\n    \n    set isSingleLine(isSingleLine: boolean) {\n        \n        this._isSingleLine = isSingleLine\n        \n        this._intrinsicHeightCache = new UIObject() as any\n        this._intrinsicWidthCache = new UIObject() as any\n        \n        if (isSingleLine) {\n            \n            this.style.whiteSpace = \"pre\"\n            \n            return\n            \n        }\n        \n        this.style.whiteSpace = \"pre-wrap\"\n        \n    }\n    \n    \n    get notificationAmount() {\n        \n        return this._notificationAmount\n        \n    }\n    \n    set notificationAmount(notificationAmount: number) {\n        \n        if (this._notificationAmount == notificationAmount) {\n            \n            return\n            \n        }\n        \n        this._notificationAmount = notificationAmount\n        \n        this.text = this.text\n        \n        this.setNeedsLayoutUpToRootView()\n        \n        this.notificationAmountDidChange(notificationAmount)\n        \n    }\n    \n    notificationAmountDidChange(notificationAmount: number) {\n    \n    \n    \n    \n    \n    }\n    \n    \n    \n    \n    \n    get text() {\n        \n        return (this._text || this.viewHTMLElement.innerHTML)\n        \n    }\n    \n    set text(text) {\n        \n        this._text = text\n        \n        var notificationText = \"\"\n        \n        if (this.notificationAmount) {\n            \n            notificationText = \"<span style=\\\"color: \" + UITextView.notificationTextColor.stringValue + \";\\\">\" +\n                (\" (\" + this.notificationAmount + \")\").bold() + \"</span>\"\n            \n        }\n        \n        if (this.viewHTMLElement.innerHTML != this.textPrefix + text + this.textSuffix + notificationText) {\n            \n            this.viewHTMLElement.innerHTML = this.textPrefix + FIRST(text, \"\") + this.textSuffix + notificationText\n            \n        }\n        \n        this._intrinsicHeightCache = new UIObject() as any\n        this._intrinsicWidthCache = new UIObject() as any\n        \n        this.setNeedsLayout()\n        \n    }\n    \n    set innerHTML(innerHTML: string) {\n        \n        this.text = innerHTML\n        \n    }\n    \n    get innerHTML() {\n        \n        return this.viewHTMLElement.innerHTML\n        \n    }\n    \n    \n    \n    setText(key: string, defaultString: string, parameters?: { [x: string]: string | UILocalizedTextObject }) {\n        \n        this.setInnerHTML(key, defaultString, parameters)\n        \n    }\n    \n    \n    get fontSize() {\n        \n        const style = window.getComputedStyle(this.viewHTMLElement, null).fontSize\n        \n        const result = (parseFloat(style) * UITextView._pxToPt)\n        \n        return result\n        \n    }\n    \n    set fontSize(fontSize: number) {\n        \n        \n        this.style.fontSize = \"\" + fontSize + \"pt\"\n        \n        this._intrinsicHeightCache = new UIObject() as any\n        this._intrinsicWidthCache = new UIObject() as any // MEETOD LUUA!!!!\n        \n        \n    }\n    \n    \n    \n    \n    \n    useAutomaticFontSize(minFontSize: number = nil, maxFontSize: number = nil) {\n        \n        \n        this._automaticFontSizeSelection = YES\n        \n        \n        this._minFontSize = minFontSize\n        \n        this._maxFontSize = maxFontSize\n        \n        this.setNeedsLayout()\n        \n        \n    }\n    \n    \n    \n    \n    \n    static automaticallyCalculatedFontSize(\n        bounds: UIRectangle,\n        currentSize: UIRectangle,\n        currentFontSize: number,\n        minFontSize?: number,\n        maxFontSize?: number\n    ) {\n        \n        minFontSize = FIRST(minFontSize, 1)\n        \n        maxFontSize = FIRST(maxFontSize, 100000000000)\n        \n        \n        const heightMultiplier = bounds.height / (currentSize.height + 1)\n        \n        const widthMultiplier = bounds.width / (currentSize.width + 1)\n        \n        \n        \n        \n        var multiplier = heightMultiplier\n        \n        if (heightMultiplier > widthMultiplier) {\n            \n            multiplier = widthMultiplier\n            \n            \n            \n        }\n        \n        \n        \n        \n        const maxFittingFontSize = currentFontSize * multiplier\n        \n        \n        if (maxFittingFontSize > maxFontSize) {\n            \n            return maxFontSize\n            \n        }\n        \n        if (minFontSize > maxFittingFontSize) {\n            \n            return minFontSize\n            \n        }\n        \n        \n        return maxFittingFontSize\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n    }\n    \n    \n    willMoveToSuperview(superview: UIView) {\n        \n        super.willMoveToSuperview(superview)\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        \n        if (this._automaticFontSizeSelection) {\n            \n            this.fontSize = UITextView.automaticallyCalculatedFontSize(\n                new UIRectangle(0, 0, 1 *\n                    this.viewHTMLElement.offsetHeight, 1 *\n                    this.viewHTMLElement.offsetWidth),\n                this.intrinsicContentSize(),\n                this.fontSize,\n                this._minFontSize,\n                this._maxFontSize\n            )\n            \n            \n            \n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    intrinsicContentHeight(constrainingWidth = 0) {\n        \n        const keyPath = (this.viewHTMLElement.innerHTML + \"_csf_\" + this.computedStyle.font).replace(new RegExp(\n                \"\\\\.\",\n                \"g\"\n            ), \"_\") + \".\" +\n            (\"\" + constrainingWidth).replace(new RegExp(\"\\\\.\", \"g\"), \"_\")\n        \n        let cacheObject = UITextView._intrinsicHeightCache\n        \n        if (this.changesOften) {\n            \n            cacheObject = this._intrinsicHeightCache\n            \n            \n        }\n        \n        \n        var result = cacheObject.valueForKeyPath(keyPath)\n        \n        \n        if (IS_LIKE_NULL(result)) {\n            \n            result = super.intrinsicContentHeight(constrainingWidth)\n            \n            cacheObject.setValueForKeyPath(keyPath, result)\n            \n            \n        }\n        \n        \n        return result\n        \n    }\n    \n    intrinsicContentWidth(constrainingHeight = 0) {\n        \n        const keyPath = (this.viewHTMLElement.innerHTML + \"_csf_\" + this.computedStyle.font).replace(new RegExp(\n                \"\\\\.\",\n                \"g\"\n            ), \"_\") + \".\" +\n            (\"\" + constrainingHeight).replace(new RegExp(\"\\\\.\", \"g\"), \"_\")\n        \n        let cacheObject = UITextView._intrinsicWidthCache\n        \n        if (this.changesOften) {\n            \n            cacheObject = this._intrinsicWidthCache\n            \n            \n        }\n        \n        \n        var result = cacheObject.valueForKeyPath(keyPath)\n        \n        \n        if (IS_LIKE_NULL(result)) {\n            \n            result = super.intrinsicContentWidth(constrainingHeight)\n            \n            cacheObject.setValueForKeyPath(keyPath, result)\n            \n            \n        }\n        \n        \n        return result\n        \n    }\n    \n    \n    \n    \n    intrinsicContentSize() {\n        \n        // This works but is slow\n        const result = this.intrinsicContentSizeWithConstraints(nil, nil)\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\nUITextView._determinePXAndPTRatios()\n\n\n\n\n\n// /**\n//  * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n//  * \n//  * @param {String} text The text to be rendered.\n//  * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n//  * \n//  * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n//  */\n// function getTextMetrics(text, font) {\n//     // re-use canvas object for better performance\n//     var canvas = getTextMetrics.canvas || (getTextMetrics.canvas = document.createElement(\"canvas\"));\n//     var context = canvas.getContext(\"2d\");\n//     context.font = font;\n//     var metrics = context.measureText(text);\n//     return metrics;\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIColor } from \"./UIColor\"\nimport { UICore } from \"./UICore\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { nil, NO, YES } from \"./UIObject\"\nimport { UITextView } from \"./UITextView\"\nimport { UIView, UIViewAddControlEventTargetObject, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UITextField extends UITextView {\n    \n    \n    _placeholderTextKey: string\n    _defaultPlaceholderText: string\n    \n    _viewHTMLElement: HTMLInputElement\n    \n    constructor(elementID?: string, viewHTMLElement = null, type = UITextView.type.textField) {\n        \n        super(elementID, type, viewHTMLElement)\n        \n        this.viewHTMLElement.setAttribute(\"type\", \"text\")\n        \n        this.backgroundColor = UIColor.whiteColor\n        \n        this.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            (sender, event) => sender.focus()\n        )\n        \n        this.viewHTMLElement.oninput = (event) => {\n            this.sendControlEventForKey(UITextField.controlEvent.TextChange, event)\n        }\n        \n        \n        this.style.webkitUserSelect = \"text\"\n        \n        this.nativeSelectionEnabled = YES\n        \n        this.pausesPointerEvents = NO\n        \n        \n    }\n    \n    \n    \n    \n    static controlEvent = Object.assign({}, UIView.controlEvent, {\n        \n        \n        \"TextChange\": \"TextChange\"\n        \n        \n    })\n    \n    \n    \n    \n    \n    get addControlEventTarget(): UIViewAddControlEventTargetObject<typeof UITextField.controlEvent> {\n        \n        // @ts-ignore\n        return super.addControlEventTarget as any;\n        \n    }\n    \n    public get viewHTMLElement() {\n        return this._viewHTMLElement\n    }\n    \n    \n    \n    public set text(text: string) {\n        \n        this.viewHTMLElement.value = text\n        \n    }\n    \n    \n    public get text(): string {\n        \n        return this.viewHTMLElement.value\n        \n    }\n    \n    \n    public set placeholderText(text: string) {\n        \n        this.viewHTMLElement.placeholder = text\n        \n    }\n    \n    \n    public get placeholderText(): string {\n        \n        return this.viewHTMLElement.placeholder\n        \n    }\n    \n    \n    setPlaceholderText(key: string, defaultString: string) {\n        \n        this._placeholderTextKey = key\n        this._defaultPlaceholderText = defaultString\n        \n        const languageName = UICoreValues.languageService.currentLanguageKey\n        this.placeholderText = UICoreValues.languageService.stringForKey(key, languageName, defaultString, nil)\n        \n    }\n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==\n            UIView.broadcastEventName.AddedToViewTree) {\n            \n            this._setPlaceholderFromKeyIfPossible()\n            \n        }\n        \n    }\n    \n    \n    willMoveToSuperview(superview: UIView) {\n        \n        super.willMoveToSuperview(superview)\n        \n        this._setPlaceholderFromKeyIfPossible()\n        \n    }\n    \n    _setPlaceholderFromKeyIfPossible() {\n        \n        if (this._placeholderTextKey && this._defaultPlaceholderText) {\n            \n            this.setPlaceholderText(this._placeholderTextKey, this._defaultPlaceholderText)\n            \n        }\n        \n    }\n    \n    \n    public get isSecure(): boolean {\n        \n        const result = (this.viewHTMLElement.type == \"password\")\n        \n        return result\n        \n    }\n    \n    \n    \n    public set isSecure(secure: boolean) {\n        \n        var type = \"text\"\n        \n        if (secure) {\n            \n            type = \"password\"\n            \n        }\n        \n        this.viewHTMLElement.type = type\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { NO } from \"./UIObject\"\nimport { UITextField } from \"./UITextField\"\nimport { UITextView } from \"./UITextView\"\nimport { UIViewAddControlEventTargetObject } from \"./UIView\"\n\n\n\n\n\nexport class UITextArea extends UITextField {\n    \n    \n    \n    \n    \n    constructor(elementID, viewHTMLElement = null) {\n        \n        super(elementID, viewHTMLElement, UITextView.type.textArea)\n        \n        this.viewHTMLElement.removeAttribute(\"type\")\n        \n        this.style.overflow = \"auto\"\n        this.style.webkitUserSelect = \"text\"\n        \n        this.pausesPointerEvents = NO\n        \n    }\n    \n    \n    get addControlEventTarget(): UIViewAddControlEventTargetObject<typeof UITextArea.controlEvent> {\n        \n        return super.addControlEventTarget as any;\n        \n    }\n    \n    \n    get viewHTMLElement(): HTMLTextAreaElement & HTMLInputElement {\n        \n        // @ts-ignore\n        return super.viewHTMLElement\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIColor } from \"./UIColor\"\nimport { IS, nil, NO, YES } from \"./UIObject\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UIBaseButton extends UIView {\n    \n    _selected: boolean = NO\n    _highlighted: boolean = NO\n    \n    _isPointerInside: boolean\n    \n    \n    _isToggleable: boolean = NO\n    _hovered: boolean\n    _focused: boolean\n    \n    \n    \n    \n    \n    constructor(elementID: string, elementType?: string, initViewData?: any) {\n        \n        super(elementID, nil, elementType, initViewData)\n        \n        this.initViewStateControl()\n        \n    }\n    \n    \n    \n    \n    \n    initViewStateControl() {\n        \n        this.class.superclass = UIView\n        \n        // Instance variables\n        \n        \n        this._isPointerInside = NO\n    \n    \n        const setHovered = function () {\n            this.hovered = YES\n        }.bind(this)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerHover, setHovered)\n    \n        const setNotHovered = function () {\n        \n            this.hovered = NO\n        \n        }.bind(this)\n    \n        this.addTargetForControlEvents([\n            UIView.controlEvent.PointerLeave, UIView.controlEvent.PointerCancel, UIView.controlEvent.MultipleTouches\n        ], setNotHovered)\n    \n    \n        var highlightingTime\n        const setHighlighted = function () {\n            this.highlighted = YES\n            highlightingTime = Date.now()\n        }.bind(this)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerDown, setHighlighted)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerEnter, setHighlighted)\n    \n        const setNotHighlighted = function () {\n            this.highlighted = NO\n        }.bind(this)\n        const setNotHighlightedWithMinimumDuration = function () {\n            const minimumDurationInMilliseconds = 50\n            const elapsedTime = Date.now() - highlightingTime\n            if (minimumDurationInMilliseconds < elapsedTime) {\n                this.highlighted = NO\n            }\n            else {\n                setTimeout(function () {\n                    this.highlighted = NO\n                }.bind(this), minimumDurationInMilliseconds - elapsedTime)\n            }\n        }.bind(this)\n        this.addTargetForControlEvents([\n            UIView.controlEvent.PointerLeave, UIView.controlEvent.PointerCancel, UIView.controlEvent.MultipleTouches\n        ], setNotHighlighted)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerUp, setNotHighlightedWithMinimumDuration)\n        \n        // Handle enter key press\n        this.addTargetForControlEvent(UIView.controlEvent.EnterDown, function () {\n            \n            setHighlighted()\n            setNotHighlightedWithMinimumDuration()\n            \n        })\n        \n        \n        this.addTargetForControlEvent(\n            UIView.controlEvent.Focus,\n            function (this: UIBaseButton, sender: UIView, event: Event) {\n                \n                this.focused = YES\n                \n            }.bind(this)\n        )\n        \n        this.addTargetForControlEvent(\n            UIView.controlEvent.Blur,\n            function (this: UIBaseButton, sender: UIView, event: Event) {\n                \n                this.focused = NO\n                \n            }.bind(this)\n        )\n        \n        \n        this.updateContentForCurrentState()\n        \n        this.pausesPointerEvents = YES\n        this.tabIndex = 1\n        \n        this.style.cursor = \"pointer\"\n        \n        //this.style.outline = \"none\";\n        \n        \n        this.nativeSelectionEnabled = NO\n        \n        \n        this.addTargetForControlEvents([\n            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\n        ], function (this: UIBaseButton, sender, event) {\n            \n            if (this.isToggleable) {\n                \n                this.toggleSelectedState()\n                \n            }\n            \n        }.bind(this))\n        \n        \n    }\n    \n    \n    \n    \n    \n    public set hovered(hovered: boolean) {\n        this._hovered = hovered\n        this.updateContentForCurrentState()\n    }\n    \n    public get hovered(): boolean {\n        return this._hovered\n    }\n    \n    public set highlighted(highlighted: boolean) {\n        this._highlighted = highlighted\n        this.updateContentForCurrentState()\n    }\n    \n    public get highlighted(): boolean {\n        return this._highlighted\n    }\n    \n    public set focused(focused: boolean) {\n        this._focused = focused\n        if (focused) {\n            this.focus()\n        }\n        else {\n            this.blur()\n        }\n        this.updateContentForCurrentState()\n    }\n    \n    public get focused(): boolean {\n        return this._focused\n    }\n    \n    public set selected(selected: boolean) {\n        this._selected = selected\n        this.updateContentForCurrentState()\n    }\n    \n    public get selected(): boolean {\n        return this._selected\n    }\n    \n    \n    \n    \n    \n    updateContentForCurrentState() {\n    \n        var updateFunction: Function = this.updateContentForNormalState\n        if (this.selected && this.highlighted) {\n            updateFunction = this.updateContentForSelectedAndHighlightedState\n        }\n        else if (this.selected) {\n            updateFunction = this.updateContentForSelectedState\n        }\n        else if (this.focused) {\n            updateFunction = this.updateContentForFocusedState\n        }\n        else if (this.highlighted) {\n            updateFunction = this.updateContentForHighlightedState\n        }\n        else if (this.hovered) {\n            updateFunction = this.updateContentForHoveredState\n        }\n        \n        if (!IS(updateFunction)) {\n            this.backgroundColor = UIColor.nilColor\n        }\n        else {\n            updateFunction.call(this)\n        }\n        \n    }\n    \n    updateContentForNormalState() {\n        \n        \n        \n    }\n    \n    updateContentForHoveredState() {\n        \n        this.updateContentForNormalState()\n        \n    }\n    \n    updateContentForFocusedState() {\n        \n        this.updateContentForHoveredState()\n        \n    }\n    \n    updateContentForHighlightedState() {\n        \n        \n        \n    }\n    \n    updateContentForSelectedState() {\n        \n        \n        \n    }\n    \n    updateContentForSelectedAndHighlightedState() {\n        \n        this.updateContentForSelectedState()\n        \n    }\n    \n    \n    set enabled(enabled: boolean) {\n        \n        super.enabled = enabled\n        \n        this.updateContentForCurrentEnabledState()\n        \n    }\n    \n    get enabled() {\n        \n        return super.enabled\n        \n    }\n    \n    updateContentForCurrentEnabledState() {\n        \n        if (this.enabled) {\n            this.alpha = 1\n        }\n        else {\n            this.alpha = 0.5\n        }\n        \n        this.userInteractionEnabled = this.enabled\n        \n    }\n    \n    \n    \n    addStyleClass(styleClassName: string) {\n        \n        super.addStyleClass(styleClassName)\n        \n        if (this.styleClassName != styleClassName) {\n            \n            this.updateContentForCurrentState.call(this)\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.PageDidScroll || event.name ==\n            UIView.broadcastEventName.AddedToViewTree) {\n            \n            this.hovered = NO\n            \n            this.highlighted = NO\n            \n            \n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    toggleSelectedState() {\n        \n        \n        this.selected = !this.selected\n        \n        \n    }\n    \n    set isToggleable(isToggleable: boolean) {\n        \n        this._isToggleable = isToggleable\n        \n    }\n    \n    get isToggleable() {\n        \n        return this._isToggleable\n        \n    }\n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n    \n    \n    \n    }\n    \n    \n    \n    \n    \n    sendControlEventForKey(eventKey: string, nativeEvent: Event) {\n        \n        if (eventKey == UIView.controlEvent.PointerUpInside && !this.highlighted) {\n            \n            // Do not send the event in this case\n            //super.sendControlEventForKey(eventKey, nativeEvent);\n    \n            const asd = 1\n    \n        }\n        else {\n            \n            super.sendControlEventForKey(eventKey, nativeEvent)\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    static getEventCoordinatesInDocument(touchOrMouseEvent) {\n        // http://www.quirksmode.org/js/events_properties.html\n        var posx = 0\n        var posy = 0\n        var e = touchOrMouseEvent\n        if (!e) {\n            e = window.event\n        }\n        if (e.pageX || e.pageY) {\n            posx = e.pageX\n            posy = e.pageY\n        }\n        else if (e.clientX || e.clientY) {\n            posx = e.clientX + document.body.scrollLeft\n                + document.documentElement.scrollLeft\n            posy = e.clientY + document.body.scrollTop\n                + document.documentElement.scrollTop\n        }\n        // posx and posy contain the mouse position relative to the document\n    \n        const coordinates = { \"x\": posx, \"y\": posy }\n    \n        return coordinates\n        \n    }\n    \n    \n    \n    static getElementPositionInDocument(el) {\n        //https://www.kirupa.com/html5/getting_mouse_click_position.htm\n        var xPosition = 0\n        var yPosition = 0\n    \n        while (el) {\n            if (el.tagName == \"BODY\") {\n                \n                // Coordinates in document are coordinates in body, therefore subtracting the scroll position of the body is not needed\n                \n                //      // deal with browser quirks with body/window/document and page scroll\n                //      var xScrollPos = el.scrollLeft || document.documentElement.scrollLeft;\n                //      var yScrollPos = el.scrollTop || document.documentElement.scrollTop;\n                //\n                //      xPosition += (el.offsetLeft - xScrollPos + el.clientLeft);\n                //      yPosition += (el.offsetTop - yScrollPos + el.clientTop);\n            }\n            else {\n                xPosition += (el.offsetLeft - el.scrollLeft + el.clientLeft)\n                yPosition += (el.offsetTop - el.scrollTop + el.clientTop)\n            }\n            \n            el = el.offsetParent\n        }\n        return {\n            x: xPosition,\n            y: yPosition\n        }\n    }\n    \n    static convertCoordinatesFromDocumentToElement(x, y, element) {\n        const elementPositionInDocument = this.getElementPositionInDocument(element)\n        const coordinatesInElement = { \"x\": x - elementPositionInDocument.x, \"y\": y - elementPositionInDocument.y }\n        return coordinatesInElement\n    }\n    \n    static getEventCoordinatesInElement(touchOrMouseEvent, element) {\n        const coordinatesInDocument = this.getEventCoordinatesInDocument(touchOrMouseEvent)\n        const coordinatesInElement = this.convertCoordinatesFromDocumentToElement(\n            coordinatesInDocument.x,\n            coordinatesInDocument.y,\n            element\n        )\n        return coordinatesInElement\n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UICoreValues } from \"./UICoreValues\"\nimport { IS_NOT, nil, NO, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UIImageView extends UIView {\n    \n    \n    //actionIndicator: UIActionIndicator;\n    _sourceKey: string\n    _defaultSource: string\n    \n    _fillMode: any\n    \n    _hiddenWhenEmpty = NO\n    \n    \n    constructor(elementID?, viewHTMLElement = null) {\n        \n        super(elementID, viewHTMLElement, \"img\")\n        \n        \n        //this.actionIndicator = new UIActionIndicator(elementID + \"ActionIndicator\");\n        \n        \n    }\n    \n    \n    \n    \n    static fillMode = {\n        \n        \"stretchToFill\": \"fill\",\n        \"aspectFit\": \"contain\",\n        \"aspectFill\": \"cover\",\n        \"center\": \"none\",\n        \"aspectFitIfLarger\": \"scale-down\"\n        \n    }\n    \n    \n    \n    \n    \n    get viewHTMLElement() {\n        \n        return super.viewHTMLElement as HTMLImageElement\n        \n    }\n    \n    \n    \n    \n    \n    static objectURLFromDataURL(dataURL: string) {\n        \n        // if (IS_NOT(dataURL)) {\n        \n        //     return nil;\n        \n        // }\n    \n        // @ts-ignore\n        const blob = dataURLtoBlob(dataURL)\n    \n        const objectURL = URL.createObjectURL(blob)\n    \n        return objectURL\n        \n    }\n    \n    \n    \n    \n    static dataURL(url, callback) {\n        const xhr = new XMLHttpRequest()\n        xhr.open(\"get\", url)\n        xhr.responseType = \"blob\"\n        xhr.onload = function () {\n            const fr = new FileReader()\n    \n            fr.onload = function () {\n                callback(this.result)\n            }\n            \n            fr.readAsDataURL(xhr.response) // async call\n        }\n        \n        xhr.send()\n    }\n    \n    \n    \n    static dataURLWithMaxSize(URLString: string, maxSize: number, completion: (resultURLString: string) => void) {\n    \n        const imageView = new UIImageView()\n        imageView.imageSource = URLString\n        \n        imageView.viewHTMLElement.onload = function () {\n    \n            const originalSize = imageView.intrinsicContentSize()\n    \n    \n            var multiplier = maxSize / Math.max(originalSize.height, originalSize.width)\n    \n            multiplier = Math.min(1, multiplier)\n    \n    \n            const result = imageView.getDataURL((originalSize.height * multiplier).integerValue, (originalSize.width *\n                multiplier).integerValue)\n    \n            completion(result)\n            \n        }\n        \n    }\n    \n    \n    static dataURLWithSizes(\n        URLString: string,\n        height: number,\n        width: number,\n        completion: (resultURLString: string) => void\n    ) {\n    \n        const imageView = new UIImageView()\n        imageView.imageSource = URLString\n        \n        imageView.viewHTMLElement.onload = function () {\n    \n            const result = imageView.getDataURL(height, width)\n            completion(result)\n            \n        }\n        \n    }\n    \n    \n    getDataURL(height?: number, width?: number) {\n    \n        const img = this.viewHTMLElement\n    \n        // Create an empty canvas element\n        const canvas = document.createElement(\"canvas\")\n        canvas.width = width\n        canvas.height = height\n        \n        // Copy the image contents to the canvas\n        const ctx = canvas.getContext(\"2d\")\n        ctx.drawImage(img, 0, 0, width, height)\n        \n        // Get the data-URL formatted image\n        // Firefox supports PNG and JPEG. You could check img.src to\n        // guess the original format, but be aware the using \"image/jpg\"\n        // will re-encode the image.\n        const dataURL = canvas.toDataURL(\"image/png\")\n    \n        return dataURL\n        \n        //return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n        \n    }\n    \n    \n    \n    \n    get imageSource() {\n        \n        return this.viewHTMLElement.src\n        \n    }\n    \n    set imageSource(sourceString: string) {\n        \n        if (IS_NOT(sourceString)) {\n            sourceString = \"\"\n        }\n        \n        this.viewHTMLElement.src = sourceString\n        \n        if (this.hiddenWhenEmpty) {\n            this.hidden = IS_NOT(this.imageSource)\n        }\n        \n        if (!sourceString || !sourceString.length) {\n            \n            //this.actionIndicator.stop();\n            this.hidden = YES\n            \n            return\n            \n        }\n        else {\n            \n            this.hidden = NO\n            \n        }\n        \n        // this.superview.addSubview(this.actionIndicator);\n        // this.actionIndicator.frame = this.frame;\n        // this.actionIndicator.start();\n        // this.actionIndicator.backgroundColor = UIColor.redColor\n        \n        // @ts-ignore\n        this.viewHTMLElement.onload = function (this: UIImageView, event: Event) {\n            \n            this.superview.setNeedsLayout()\n            \n            //this.actionIndicator.removeFromSuperview();\n            \n        }.bind(this)\n        \n    }\n    \n    \n    \n    setImageSource(key: string, defaultString: string) {\n    \n        const languageName = UICoreValues.languageService.currentLanguageKey\n        this.imageSource = UICoreValues.languageService.stringForKey(key, languageName, defaultString, nil)\n        \n    }\n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==\n            UIView.broadcastEventName.AddedToViewTree) {\n            \n            this._setImageSourceFromKeyIfPossible()\n            \n        }\n        \n    }\n    \n    \n    willMoveToSuperview(superview: UIView) {\n        \n        super.willMoveToSuperview(superview)\n        \n        this._setImageSourceFromKeyIfPossible()\n        \n    }\n    \n    _setImageSourceFromKeyIfPossible() {\n        \n        if (this._sourceKey && this._defaultSource) {\n            \n            this.setImageSource(this._sourceKey, this._defaultSource)\n            \n        }\n        \n    }\n    \n    \n    \n    get fillMode() {\n        \n        \n        return this._fillMode\n        \n    }\n    \n    set fillMode(fillMode) {\n        \n        this._fillMode = fillMode;\n        \n        (this.style as any).objectFit = fillMode\n        \n    }\n    \n    \n    get hiddenWhenEmpty() {\n        return this._hiddenWhenEmpty\n    }\n    \n    set hiddenWhenEmpty(hiddenWhenEmpty: boolean) {\n        this._hiddenWhenEmpty = hiddenWhenEmpty\n        if (hiddenWhenEmpty) {\n            this.hidden = IS_NOT(this.imageSource)\n        }\n    }\n    \n    \n    \n    \n    \n    didMoveToSuperview(superview: UIView) {\n        \n        super.didMoveToSuperview(superview)\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        \n        \n    }\n    \n    \n    \n    \n    intrinsicContentSize() {\n    \n    \n        const result = new UIRectangle(0, 0, this.viewHTMLElement.naturalHeight, this.viewHTMLElement.naturalWidth)\n    \n        return result\n        \n        \n    }\n    \n    intrinsicContentSizeWithConstraints(constrainingHeight = 0, constrainingWidth = 0) {\n    \n        const heightRatio = constrainingHeight / this.viewHTMLElement.naturalHeight\n    \n        const widthRatio = constrainingWidth / this.viewHTMLElement.naturalWidth\n    \n        const multiplier = Math.max(heightRatio, widthRatio)\n    \n        const result = new UIRectangle(0, 0, this.viewHTMLElement.naturalHeight *\n            multiplier, this.viewHTMLElement.naturalWidth * multiplier)\n    \n        return result\n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport { UIBaseButton } from \"./UIBaseButton\"\nimport { UIColor } from \"./UIColor\"\nimport { UIImageView } from \"./UIImageView\"\nimport { IS, IS_NOT, IS_NOT_NIL, nil, NO, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UITextView } from \"./UITextView\"\n\n\nexport interface UIButtonColorSpecifier {\n    \n    titleLabel: UIButtonElementColorSpecifier;\n    background: UIButtonElementColorSpecifier;\n    \n}\n\n\nexport interface UIButtonElementColorSpecifier {\n    \n    normal: UIColor;\n    hovered?: UIColor;\n    highlighted: UIColor;\n    focused?: UIColor;\n    selected: UIColor;\n    selectedAndHighlighted?: UIColor;\n    \n}\n\n\n\nexport class UIButton extends UIBaseButton {\n    \n    _contentPadding: any\n    _titleLabel: UITextView\n    _imageView: UIImageView\n    \n    usesAutomaticTitleFontSize = NO\n    minAutomaticFontSize: number = nil\n    maxAutomaticFontSize: number = 25\n    \n    colors: UIButtonColorSpecifier\n    \n    \n    constructor(elementID: string, elementType?: string, titleType = UITextView.type.span) {\n        \n        super(elementID, elementType, { \"titleType\": titleType })\n        \n    }\n    \n    \n    \n    \n    \n    initView(elementID, viewHTMLElement, initViewData: { titleType: string }) {\n        \n        this.class.superclass = UIBaseButton\n        \n        // Instance variables\n        \n        this.colors = {\n            \n            titleLabel: {\n                \n                normal: UIColor.whiteColor,\n                highlighted: UIColor.whiteColor,\n                selected: UIColor.whiteColor\n                \n            },\n            \n            background: {\n                \n                normal: UIColor.blueColor,\n                highlighted: UIColor.greenColor,\n                selected: UIColor.redColor\n                \n            }\n            \n        }\n        \n        \n        this._imageView = new UIImageView(elementID + \"ImageView\")\n        this._imageView.hidden = YES\n        this.addSubview(this.imageView)\n        \n        this.imageView.fillMode = UIImageView.fillMode.aspectFitIfLarger\n        \n        \n        if (IS_NOT_NIL(initViewData.titleType)) {\n            \n            this._titleLabel = new UITextView(elementID + \"TitleLabel\", initViewData.titleType)\n            this.titleLabel.style.whiteSpace = \"nowrap\"\n            this.addSubview(this.titleLabel)\n            \n            this.titleLabel.userInteractionEnabled = NO\n            \n        }\n        \n        this.contentPadding = 10\n        \n        this.imageView.userInteractionEnabled = NO\n        this.titleLabel.textAlignment = UITextView.textAlignment.center\n        this.titleLabel.nativeSelectionEnabled = NO\n        \n    }\n    \n    \n    \n    get contentPadding() {\n        \n        return this._contentPadding.integerValue\n        \n    }\n    \n    set contentPadding(contentPadding) {\n        \n        this._contentPadding = contentPadding\n        \n        this.setNeedsLayout()\n        \n    }\n    \n    \n    \n    \n    public set hovered(hovered: boolean) {\n        this._hovered = hovered\n        this.updateContentForCurrentState()\n    }\n    \n    public get hovered(): boolean {\n        return this._hovered\n    }\n    \n    public set highlighted(highlighted: boolean) {\n        this._highlighted = highlighted\n        this.updateContentForCurrentState()\n    }\n    \n    public get highlighted(): boolean {\n        return this._highlighted\n    }\n    \n    public set focused(focused: boolean) {\n        this._focused = focused\n        if (focused) {\n            this.focus()\n        }\n        else {\n            this.blur()\n        }\n        this.updateContentForCurrentState()\n    }\n    \n    public get focused(): boolean {\n        return this._focused\n    }\n    \n    public set selected(selected: boolean) {\n        this._selected = selected\n        this.updateContentForCurrentState()\n    }\n    \n    public get selected(): boolean {\n        return this._selected\n    }\n    \n    \n    \n    \n    \n    updateContentForCurrentState() {\n    \n        var updateFunction: Function = this.updateContentForNormalState\n        if (this.selected && this.highlighted) {\n            updateFunction = this.updateContentForSelectedAndHighlightedState\n        }\n        else if (this.selected) {\n            updateFunction = this.updateContentForSelectedState\n        }\n        else if (this.focused) {\n            updateFunction = this.updateContentForFocusedState\n        }\n        else if (this.highlighted) {\n            updateFunction = this.updateContentForHighlightedState\n        }\n        else if (this.hovered) {\n            updateFunction = this.updateContentForHoveredState\n        }\n        \n        if (!IS(updateFunction)) {\n            this.titleLabel.textColor = UIColor.nilColor\n            this.backgroundColor = UIColor.nilColor\n        }\n        else {\n            updateFunction.call(this)\n        }\n        \n        this.updateContentForCurrentEnabledState();\n        \n    }\n    \n    updateContentForNormalState() {\n        \n        this.backgroundColor = this.colors.background.normal\n        this.titleLabel.textColor = this.colors.titleLabel.normal\n        \n    }\n    \n    updateContentForHoveredState() {\n        \n        this.updateContentForNormalState()\n        \n        if (this.colors.background.hovered) {\n            this.backgroundColor = this.colors.background.hovered\n        }\n        \n        if (this.colors.titleLabel.hovered) {\n            this.titleLabel.textColor = this.colors.titleLabel.hovered\n        }\n        \n    }\n    \n    updateContentForFocusedState() {\n        \n        this.updateContentForHoveredState()\n        \n        if (this.colors.background.focused) {\n            this.backgroundColor = this.colors.background.focused\n        }\n        \n        if (this.colors.titleLabel.focused) {\n            this.titleLabel.textColor = this.colors.titleLabel.focused\n        }\n        \n    }\n    \n    updateContentForHighlightedState() {\n        \n        this.backgroundColor = this.colors.background.highlighted\n        this.titleLabel.textColor = this.colors.titleLabel.highlighted\n        \n    }\n    \n    updateContentForSelectedState() {\n        \n        this.backgroundColor = this.colors.background.selected\n        this.titleLabel.textColor = this.colors.titleLabel.selected\n        \n    }\n    \n    updateContentForSelectedAndHighlightedState() {\n        \n        this.updateContentForSelectedState()\n        \n        if (this.colors.background.selectedAndHighlighted) {\n            this.backgroundColor = this.colors.background.selectedAndHighlighted\n        }\n        \n        if (this.colors.titleLabel.selectedAndHighlighted) {\n            this.titleLabel.textColor = this.colors.titleLabel.selectedAndHighlighted\n        }\n        \n    }\n    \n    \n    set enabled(enabled: boolean) {\n        \n        // @ts-ignore\n        super.enabled = enabled\n        \n        this.updateContentForCurrentState()\n        \n    }\n    \n    get enabled() {\n        \n        // @ts-ignore\n        return super.enabled\n        \n    }\n    \n    updateContentForCurrentEnabledState() {\n        \n        if (this.enabled) {\n            this.alpha = 1\n        }\n        else {\n            this.alpha = 0.5\n        }\n        \n        this.userInteractionEnabled = this.enabled\n        \n    }\n    \n    \n    \n    addStyleClass(styleClassName: string) {\n        \n        super.addStyleClass(styleClassName)\n        \n        if (this.styleClassName != styleClassName) {\n            \n            this.updateContentForCurrentState.call(this)\n            \n        }\n        \n    }\n    \n    \n    get titleLabel() {\n        \n        return this._titleLabel\n        \n    }\n    \n    get imageView() {\n        \n        return this._imageView\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        var bounds = this.bounds\n    \n        this.hoverText = this.titleLabel.text\n        \n        // Image only if text is not present\n        if (IS_NOT(this.imageView.hidden) && !IS(this.titleLabel.text)) {\n            \n            \n            this.imageView.frame = bounds\n            \n            \n        }\n        \n        // Text only if image is not present\n        if (IS(this.imageView.hidden) && IS(this.titleLabel.text)) {\n            \n            var titleElement = this.titleLabel.viewHTMLElement\n            \n            \n            this.titleLabel.style.left = this.contentPadding\n            this.titleLabel.style.right = this.contentPadding\n            // this.titleLabel.style.marginLeft = \"\"\n            // this.titleLabel.style.right = this.contentPadding\n            this.titleLabel.style.top = \"50%\"\n            this.titleLabel.style.transform = \"translateY(-50%)\"\n            this.titleLabel.frame = new UIRectangle(nil, nil, nil, nil)\n            \n            if (this.usesAutomaticTitleFontSize) {\n                \n                var hidden = this.titleLabel.hidden\n                \n                this.titleLabel.hidden = YES\n                \n                this.titleLabel.fontSize = 15\n                \n                this.titleLabel.fontSize = UITextView.automaticallyCalculatedFontSize(\n                    new UIRectangle(\n                        0,\n                        0,\n                        this.bounds.height,\n                        1 *\n                        this.titleLabel.viewHTMLElement.offsetWidth\n                    ),\n                    this.titleLabel.intrinsicContentSize(),\n                    this.titleLabel.fontSize,\n                    this.minAutomaticFontSize,\n                    this.maxAutomaticFontSize\n                )\n                \n                this.titleLabel.hidden = hidden\n                \n            }\n            \n            \n        }\n        \n        // Image and text both present\n        if (IS_NOT(this.imageView.hidden) && IS(this.titleLabel.text)) {\n    \n            const imageShareOfWidth = 0.25\n    \n            bounds = bounds.rectangleWithInset(this.contentPadding)\n    \n            const imageFrame = bounds.copy()\n            imageFrame.width = bounds.height - this.contentPadding * 0.5\n            this.imageView.frame = imageFrame\n            \n            var titleElement = this.titleLabel.viewHTMLElement\n            \n            this.titleLabel.style.left = imageFrame.max.x + this.contentPadding\n            this.titleLabel.style.right = this.contentPadding\n            this.titleLabel.style.top = \"50%\"\n            this.titleLabel.style.transform = \"translateY(-50%)\"\n            \n            if (this.usesAutomaticTitleFontSize) {\n                \n                var hidden = this.titleLabel.hidden\n                \n                this.titleLabel.hidden = YES\n                \n                this.titleLabel.fontSize = 15\n                \n                this.titleLabel.fontSize = UITextView.automaticallyCalculatedFontSize(\n                    new UIRectangle(\n                        0,\n                        0,\n                        this.bounds.height,\n                        1 *\n                        this.titleLabel.viewHTMLElement.offsetWidth\n                    ),\n                    this.titleLabel.intrinsicContentSize(),\n                    this.titleLabel.fontSize,\n                    this.minAutomaticFontSize,\n                    this.maxAutomaticFontSize\n                )\n                \n                this.titleLabel.hidden = hidden\n                \n            }\n            \n        }\n        \n        this.applyClassesAndStyles()\n        \n    }\n    \n    initViewStyleSelectors() {\n        \n        this.initStyleSelector(\".\" + this.styleClassName, \"background-color: lightblue;\")\n        \n        // var selectorWithoutImage = \".\" + this.styleClassName + \" .\" + this.imageView.styleClassName + \" + .\" + this.titleLabel.styleClassName;\n        \n        // this.initStyleSelector(\n        //     selectorWithoutImage,\n        //     \"left: \" + this.contentPadding + \";\" +\n        //     \"right: \" + this.contentPadding + \";\" +\n        //     \"top: 50%;\" +\n        //     \"transform: translateY(-50%);\");\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { nil } from \"./UIObject\"\nimport { UIPoint } from \"./UIPoint\"\nimport { UIView } from \"./UIView\"\n\n\n\n\n\nexport class UINativeScrollView extends UIView {\n    \n    \n    animationDuration = 0\n    \n    constructor(elementID, viewHTMLElement?) {\n        \n        super(elementID, viewHTMLElement)\n        \n        this.style.cssText = this.style.cssText + \"-webkit-overflow-scrolling: touch;\"\n        \n        this.style.overflow = \"auto\"\n        \n        // this.scrollsX = YES;\n        // this.scrollsY = YES;\n        \n        this.viewHTMLElement.addEventListener(\"scroll\", function (this: UINativeScrollView, event: UIEvent) {\n            \n            \n            this.didScrollToPosition(new UIPoint(this.viewHTMLElement.scrollLeft, this.viewHTMLElement.scrollTop))\n            \n            this.broadcastEventInSubtree({\n                \n                name: UIView.broadcastEventName.PageDidScroll,\n                parameters: nil\n                \n            })\n            \n            \n        }.bind(this))\n        \n        \n    }\n    \n    \n    \n    \n    \n    didScrollToPosition(offsetPosition: UIPoint) {\n        \n        \n        \n    }\n    \n    \n    \n    get scrollsX() {\n        const result = (this.style.overflowX == \"scroll\")\n        return result\n    }\n    \n    set scrollsX(scrolls: boolean) {\n        if (scrolls) {\n            this.style.overflowX = \"scroll\"\n        }\n        else {\n            this.style.overflowX = \"hidden\"\n        }\n    }\n    \n    \n    \n    get scrollsY() {\n        const result = (this.style.overflowY == \"scroll\")\n        return result\n    }\n    \n    set scrollsY(scrolls: boolean) {\n        if (scrolls) {\n            this.style.overflowY = \"scroll\"\n        }\n        else {\n            this.style.overflowY = \"hidden\"\n        }\n    }\n    \n    \n    \n    get contentOffset() {\n        const result = new UIPoint(this.viewHTMLElement.scrollLeft, this.viewHTMLElement.scrollTop)\n        return result\n    }\n    \n    \n    set contentOffset(offsetPoint: UIPoint) {\n        \n        if (this.animationDuration) {\n            \n            this.scrollXTo(this.viewHTMLElement, offsetPoint.x, this.animationDuration)\n            this.scrollYTo(this.viewHTMLElement, offsetPoint.y, this.animationDuration)\n            \n            return\n            \n        }\n        \n        \n        this.viewHTMLElement.scrollLeft = offsetPoint.x\n        this.viewHTMLElement.scrollTop = offsetPoint.y\n        \n    }\n    \n    \n    scrollToBottom() {\n        \n        this.contentOffset = new UIPoint(this.contentOffset.x, this.scrollSize.height - this.frame.height)\n        \n    }\n    \n    scrollToTop() {\n        \n        this.contentOffset = new UIPoint(this.contentOffset.x, 0)\n        \n    }\n    \n    get isScrolledToBottom() {\n        \n        return this.contentOffset.isEqualTo(new UIPoint(this.contentOffset.x, this.scrollSize.height -\n            this.frame.height))\n        \n    }\n    \n    get isScrolledToTop() {\n        \n        return this.contentOffset.isEqualTo(new UIPoint(this.contentOffset.x, 0))\n        \n    }\n    \n    \n    \n    \n    \n    scrollYTo(element, to, duration) {\n        \n        duration = duration * 1000\n    \n        const start = element.scrollTop\n        const change = to - start\n        const increment = 10\n    \n        const animateScroll = function (elapsedTime) {\n            elapsedTime += increment\n            const position = this.easeInOut(elapsedTime, start, change, duration)\n            element.scrollTop = position\n            if (elapsedTime < duration) {\n                setTimeout(function () {\n                    animateScroll(elapsedTime)\n                }, increment)\n            }\n        }.bind(this)\n    \n        animateScroll(0)\n    }\n    \n    scrollXTo(element, to, duration) {\n        \n        duration = duration * 1000\n    \n        const start = element.scrollTop\n        const change = to - start\n        const increment = 10\n    \n        const animateScroll = function (elapsedTime) {\n            elapsedTime += increment\n            const position = this.easeInOut(elapsedTime, start, change, duration)\n            element.scrollLeft = position\n            if (elapsedTime < duration) {\n                setTimeout(function () {\n                    animateScroll(elapsedTime)\n                }, increment)\n            }\n        }.bind(this)\n    \n        animateScroll(0)\n    }\n    \n    easeInOut(currentTime, start, change, duration) {\n        currentTime /= duration / 2\n        if (currentTime < 1) {\n            return change / 2 * currentTime * currentTime + start\n        }\n        currentTime -= 1\n        return -change / 2 * (currentTime * (currentTime - 2) - 1) + start\n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIButton } from \"./UIButton\"\nimport { UINativeScrollView } from \"./UINativeScrollView\"\nimport { IS, nil, NO, YES } from \"./UIObject\"\nimport { UIPoint } from \"./UIPoint\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\nexport interface UITableViewReusableViewsContainerObject {\n    \n    [key: string]: UIView[];\n    \n}\n\n\nexport interface UITableViewReusableViewPositionObject {\n    \n    bottomY: number;\n    topY: number;\n    \n    isValid: boolean;\n    \n}\n\n\n\n\n\nexport class UITableView extends UINativeScrollView {\n    \n    \n    \n    \n    allRowsHaveEqualHeight: boolean = NO\n    _visibleRows: UIView[] = []\n    _firstLayoutVisibleRows: UIView[] = []\n    \n    _rowPositions: UITableViewReusableViewPositionObject[] = []\n    \n    _highestValidRowPositionIndex: number = 0\n    \n    _reusableViews: UITableViewReusableViewsContainerObject = {}\n    \n    _removedReusableViews: UITableViewReusableViewsContainerObject = {}\n    \n    _fullHeightView: UIView\n    \n    _rowIDIndex: number = 0\n    \n    reloadsOnLanguageChange = YES\n    \n    sidePadding = 0\n    \n    _persistedData: any[] = []\n    _needsDrawingOfVisibleRowsBeforeLayout = NO\n    _isDrawVisibleRowsScheduled = NO\n    _shouldAnimateNextLayout: boolean\n    \n    animationDuration = 0.25\n    \n    \n    constructor(elementID) {\n        \n        super(elementID)\n        \n        this.scrollsX = NO\n        \n    }\n    \n    \n    \n    initView(elementID, viewHTMLElement) {\n        \n        super.initView(elementID, viewHTMLElement)\n        \n        this._fullHeightView = new UIView()\n        this._fullHeightView.hidden = YES\n        this._fullHeightView.userInteractionEnabled = NO\n        this.addSubview(this._fullHeightView)\n        \n    }\n    \n    \n    \n    loadData() {\n        \n        this._persistedData = []\n        \n        this._calculatePositionsUntilIndex(this.numberOfRows() - 1)\n        this._needsDrawingOfVisibleRowsBeforeLayout = YES\n        \n        this.setNeedsLayout()\n        \n        // this.forEachViewInSubtree(function(view) {\n        \n        //     view.setNeedsLayout();\n        \n        // })\n        \n    }\n    \n    reloadData() {\n        \n        this._removeVisibleRows()\n        this._removeAllReusableRows()\n        \n        this._rowPositions = []\n        this._highestValidRowPositionIndex = 0\n        \n        this.loadData()\n        \n    }\n    \n    \n    \n    highlightChanges(previousData: any[], newData: any[]) {\n        \n        previousData = previousData.map(function (dataPoint, index, array) {\n            \n            return JSON.stringify(dataPoint)\n            \n        })\n        \n        newData = newData.map(function (dataPoint, index, array) {\n            \n            return JSON.stringify(dataPoint)\n            \n        })\n        \n        \n        const newIndexes: number[] = []\n        \n        newData.forEach(function (value, index, array) {\n            \n            if (!previousData.contains(value)) {\n                \n                newIndexes.push(index)\n                \n            }\n            \n        })\n        \n        newIndexes.forEach(function (this: UITableView, index) {\n            \n            if (this.isRowWithIndexVisible(index)) {\n                \n                this.highlightRowAsNew(this.viewForRowWithIndex(index))\n                \n            }\n            \n        }.bind(this))\n        \n    }\n    \n    \n    \n    highlightRowAsNew(row: UIView) {\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    invalidateSizeOfRowWithIndex(index: number, animateChange = NO) {\n        \n        if (this._rowPositions[index]) {\n            this._rowPositions[index].isValid = NO\n        }\n        \n        this._highestValidRowPositionIndex = Math.min(this._highestValidRowPositionIndex, index - 1)\n        \n        // if (index == 0) {\n        \n        //     this._highestValidRowPositionIndex = 0;\n        \n        //     this._rowPositions = [];\n        \n        // }\n        \n        this._needsDrawingOfVisibleRowsBeforeLayout = YES\n        \n        this._shouldAnimateNextLayout = animateChange\n        \n    }\n    \n    \n    \n    _calculateAllPositions() {\n        this._calculatePositionsUntilIndex(this.numberOfRows() - 1)\n    }\n    \n    _calculatePositionsUntilIndex(maxIndex: number) {\n        \n        var validPositionObject = this._rowPositions[this._highestValidRowPositionIndex]\n        if (!IS(validPositionObject)) {\n            validPositionObject = {\n                bottomY: 0,\n                topY: 0,\n                isValid: YES\n            }\n        }\n        \n        var previousBottomY = validPositionObject.bottomY\n        \n        if (!this._rowPositions.length) {\n            \n            this._highestValidRowPositionIndex = -1\n            \n        }\n        \n        for (var i = this._highestValidRowPositionIndex + 1; i <= maxIndex; i++) {\n            \n            var height: number\n            \n            const rowPositionObject = this._rowPositions[i]\n            \n            if (IS((rowPositionObject || nil).isValid)) {\n                \n                height = rowPositionObject.bottomY - rowPositionObject.topY\n                \n            }\n            else {\n                \n                height = this.heightForRowWithIndex(i)\n                \n            }\n            \n            \n            \n            \n            const positionObject: UITableViewReusableViewPositionObject = {\n                bottomY: previousBottomY + height,\n                topY: previousBottomY,\n                isValid: YES\n            }\n            \n            if (i < this._rowPositions.length) {\n                this._rowPositions[i] = positionObject\n            }\n            else {\n                this._rowPositions.push(positionObject)\n            }\n            this._highestValidRowPositionIndex = i\n            previousBottomY = previousBottomY + height\n            \n        }\n        \n    }\n    \n    \n    \n    indexesForVisibleRows(paddingRatio = 0.5): number[] {\n        \n        const firstVisibleY = this.contentOffset.y - this.bounds.height * paddingRatio\n        const lastVisibleY = firstVisibleY + this.bounds.height * (1 + paddingRatio)\n        \n        const numberOfRows = this.numberOfRows()\n        \n        if (this.allRowsHaveEqualHeight) {\n            \n            const rowHeight = this.heightForRowWithIndex(0)\n            \n            var firstIndex = firstVisibleY / rowHeight\n            var lastIndex = lastVisibleY / rowHeight\n            \n            firstIndex = Math.trunc(firstIndex)\n            lastIndex = Math.trunc(lastIndex) + 1\n            \n            firstIndex = Math.max(firstIndex, 0)\n            lastIndex = Math.min(lastIndex, numberOfRows - 1)\n            \n            var result = []\n            for (var i = firstIndex; i < lastIndex + 1; i++) {\n                result.push(i)\n            }\n            return result\n        }\n        \n        var accumulatedHeight = 0\n        var result = []\n        \n        this._calculateAllPositions()\n        \n        const rowPositions = this._rowPositions\n        \n        for (var i = 0; i < numberOfRows; i++) {\n            \n            const height = rowPositions[i].bottomY - rowPositions[i].topY  // this.heightForRowWithIndex(i)\n            \n            accumulatedHeight = accumulatedHeight + height\n            if (accumulatedHeight >= firstVisibleY) {\n                result.push(i)\n            }\n            if (accumulatedHeight >= lastVisibleY) {\n                break\n            }\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    _removeVisibleRows() {\n        \n        const visibleRows = []\n        this._visibleRows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n            \n            this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(\n                row._UITableViewRowIndex,\n                row\n            )\n            row.removeFromSuperview()\n            this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row)\n            \n            \n        }, this)\n        this._visibleRows = visibleRows\n        \n    }\n    \n    \n    \n    _removeAllReusableRows() {\n        // @ts-ignore\n        this._reusableViews.forEach(function (this: UITableView, rows: UIView[]) {\n            rows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n                \n                this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(\n                    row._UITableViewRowIndex,\n                    row\n                )\n                row.removeFromSuperview()\n                \n                this._markReusableViewAsUnused(row)\n                \n            }.bind(this))\n        }.bind(this))\n    }\n    \n    \n    \n    _markReusableViewAsUnused(row: UIView) {\n        if (!this._removedReusableViews[row._UITableViewReusabilityIdentifier].contains(row)) {\n            this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row)\n        }\n    }\n    \n    _drawVisibleRows() {\n        \n        if (!this.isMemberOfViewTree) {\n            return\n        }\n        \n        const visibleIndexes = this.indexesForVisibleRows()\n        \n        const minIndex = visibleIndexes[0]\n        const maxIndex = visibleIndexes[visibleIndexes.length - 1]\n        \n        const removedViews = []\n        \n        const visibleRows = []\n        this._visibleRows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n            if (row._UITableViewRowIndex < minIndex || row._UITableViewRowIndex > maxIndex) {\n                \n                //row.removeFromSuperview();\n                \n                this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(\n                    row._UITableViewRowIndex,\n                    row\n                )\n                \n                this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row)\n                \n                removedViews.push(row)\n                \n            }\n            else {\n                visibleRows.push(row)\n            }\n        }, this)\n        this._visibleRows = visibleRows\n        \n        visibleIndexes.forEach(function (this: UITableView, rowIndex: number, index: number, array: number) {\n            \n            \n            if (this.isRowWithIndexVisible(rowIndex)) {\n                return\n            }\n            const view: UIView = this.viewForRowWithIndex(rowIndex)\n            //view._UITableViewRowIndex = rowIndex;\n            this._firstLayoutVisibleRows.push(view)\n            this._visibleRows.push(view)\n            this.addSubview(view)\n            \n        } as any, this)\n        \n        for (var i = 0; i < removedViews.length; i++) {\n            \n            var view: UIView = removedViews[i]\n            if (this._visibleRows.indexOf(view) == -1) {\n                \n                //this._persistedData[view._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(view._UITableViewRowIndex, view);\n                view.removeFromSuperview()\n                \n                //this._removedReusableViews[view._UITableViewReusabilityIdentifier].push(view);\n                \n            }\n            \n        }\n        \n        //this.setNeedsLayout();\n        \n    }\n    \n    \n    visibleRowWithIndex(rowIndex: number): UIView {\n        for (var i = 0; i < this._visibleRows.length; i++) {\n            const row = this._visibleRows[i]\n            if (row._UITableViewRowIndex == rowIndex) {\n                return row\n            }\n        }\n        return nil\n    }\n    \n    \n    isRowWithIndexVisible(rowIndex: number) {\n        return IS(this.visibleRowWithIndex(rowIndex))\n    }\n    \n    \n    \n    reusableViewForIdentifier(identifier: string, rowIndex: number) {\n        \n        if (!this._removedReusableViews[identifier]) {\n            this._removedReusableViews[identifier] = []\n        }\n        \n        if (this._removedReusableViews[identifier] && this._removedReusableViews[identifier].length) {\n            \n            const view = this._removedReusableViews[identifier].pop()\n            \n            view._UITableViewRowIndex = rowIndex\n            \n            Object.assign(view, this._persistedData[rowIndex] || this.defaultRowPersistenceDataItem())\n            \n            return view\n            \n        }\n        \n        if (!this._reusableViews[identifier]) {\n            this._reusableViews[identifier] = []\n        }\n        \n        const newView = this.newReusableViewForIdentifier(identifier, this._rowIDIndex)\n        this._rowIDIndex = this._rowIDIndex + 1\n        \n        if (this._rowIDIndex > 40) {\n            \n            const asd = 1\n            \n        }\n        \n        newView._UITableViewReusabilityIdentifier = identifier\n        \n        newView._UITableViewRowIndex = rowIndex\n        \n        Object.assign(newView, this._persistedData[rowIndex] || this.defaultRowPersistenceDataItem())\n        this._reusableViews[identifier].push(newView)\n        \n        return newView\n        \n    }\n    \n    \n    // Functions that should be overridden to draw the correct content START\n    newReusableViewForIdentifier(identifier: string, rowIDIndex: number): UIView {\n        \n        const view = new UIButton(this.elementID + \"Row\" + rowIDIndex)\n        \n        view.stopsPointerEventPropagation = NO\n        view.pausesPointerEvents = NO\n        \n        return view\n        \n    }\n    \n    heightForRowWithIndex(index: number): number {\n        return 50\n    }\n    \n    numberOfRows() {\n        return 10000\n    }\n    \n    defaultRowPersistenceDataItem() {\n        \n        \n        \n    }\n    \n    persistenceDataItemForRowWithIndex(rowIndex: number, row: UIView) {\n        \n        \n        \n    }\n    \n    viewForRowWithIndex(rowIndex: number): UIView {\n        \n        const row = this.reusableViewForIdentifier(\"Row\", rowIndex);\n        (row as UIButton).titleLabel.text = \"Row \" + rowIndex\n        \n        return row\n        \n    }\n    \n    // Functions that should be overridden to draw the correct content END\n    \n    \n    // Functions that trigger redrawing of the content\n    didScrollToPosition(offsetPosition: UIPoint) {\n        \n        super.didScrollToPosition(offsetPosition)\n        \n        this.forEachViewInSubtree(function (view: UIView) {\n            \n            view._isPointerValid = NO\n            \n        })\n        \n        if (!this._isDrawVisibleRowsScheduled) {\n            \n            this._isDrawVisibleRowsScheduled = YES\n            \n            UIView.runFunctionBeforeNextFrame(function (this: UITableView) {\n                \n                this._calculateAllPositions()\n                \n                this._drawVisibleRows()\n                \n                this.setNeedsLayout()\n                \n                this._isDrawVisibleRowsScheduled = NO\n                \n            }.bind(this))\n            \n        }\n        \n    }\n    \n    wasAddedToViewTree() {\n        this.loadData()\n    }\n    \n    setFrame(rectangle: UIRectangle, zIndex?: number, performUncheckedLayout?: boolean) {\n        \n        const frame = this.frame\n        super.setFrame(rectangle, zIndex, performUncheckedLayout)\n        if (frame.isEqualTo(rectangle) && !performUncheckedLayout) {\n            return\n        }\n        \n        this._needsDrawingOfVisibleRowsBeforeLayout = YES\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged && this.reloadsOnLanguageChange) {\n            \n            this.reloadData()\n            \n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    private _layoutAllRows(positions = this._rowPositions) {\n        \n        const bounds = this.bounds\n        \n        this._visibleRows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n            \n            const frame = bounds.copy()\n            \n            const positionObject = positions[row._UITableViewRowIndex]\n            frame.min.y = positionObject.topY\n            frame.max.y = positionObject.bottomY\n            row.frame = frame\n            \n            row.style.width = \"\" + (bounds.width - this.sidePadding * 2).integerValue + \"px\"\n            row.style.left = \"\" + this.sidePadding.integerValue + \"px\"\n            \n            \n        }, this)\n        \n        this._fullHeightView.frame = bounds.rectangleWithHeight((positions.lastElement ||\n            nil).bottomY).rectangleWithWidth(bounds.width * 0.5)\n        \n        this._firstLayoutVisibleRows = []\n        \n        \n    }\n    \n    private _animateLayoutAllRows() {\n        \n        UIView.animateViewOrViewsWithDurationDelayAndFunction(\n            this._visibleRows,\n            this.animationDuration,\n            0,\n            undefined,\n            function (this: UITableView) {\n                \n                this._layoutAllRows()\n                \n            }.bind(this),\n            function (this: UITableView) {\n                \n                // this._calculateAllPositions()\n                // this._layoutAllRows()\n                \n            }.bind(this)\n        )\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        const previousPositions: UITableViewReusableViewPositionObject[] = JSON.parse(JSON.stringify(this._rowPositions))\n        \n        const previousVisibleRowsLength = this._visibleRows.length\n        \n        if (this._needsDrawingOfVisibleRowsBeforeLayout) {\n            \n            //this._calculateAllPositions()\n            \n            this._drawVisibleRows()\n            \n            this._needsDrawingOfVisibleRowsBeforeLayout = NO\n            \n        }\n        \n        \n        \n        super.layoutSubviews()\n        \n        \n        if (!this.numberOfRows() || !this.isMemberOfViewTree) {\n            \n            return\n            \n        }\n        \n        \n        \n        \n        \n        if (this._shouldAnimateNextLayout) {\n            \n            \n            \n            // Need to do layout with the previous positions\n            \n            this._layoutAllRows(previousPositions)\n            \n            \n            if (previousVisibleRowsLength < this._visibleRows.length) {\n                \n                \n                UIView.runFunctionBeforeNextFrame(function (this: UITableView) {\n                    \n                    this._animateLayoutAllRows()\n                    \n                }.bind(this))\n                \n            }\n            else {\n                \n                this._animateLayoutAllRows()\n                \n            }\n            \n            \n            this._shouldAnimateNextLayout = NO\n            \n        }\n        else {\n            \n            // if (this._needsDrawingOfVisibleRowsBeforeLayout) {\n            \n            //     this._drawVisibleRows();\n            \n            //     this._needsDrawingOfVisibleRowsBeforeLayout = NO;\n            \n            // }\n            \n            this._calculateAllPositions()\n            \n            this._layoutAllRows()\n            \n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    intrinsicContentHeight(constrainingWidth = 0) {\n        \n        \n        \n        var result = 0\n        \n        this._calculateAllPositions()\n        \n        if (this._rowPositions.length) {\n            \n            result = this._rowPositions[this._rowPositions.length - 1].bottomY\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nexport default function inlineWorker(scriptText) {\n  let blob = new Blob([scriptText], {type: 'text/javascript'});\n  let url = URL.createObjectURL(blob);\n  let worker = new Worker(url);\n  URL.revokeObjectURL(url);\n  return worker;\n}\n", "import inlineWorker from '__inline-worker'\nexport default function Worker() {\n  return inlineWorker(\"\\\"contains\\\"in Array.prototype||(Array.prototype.contains=function(n){var r=this.indexOf(n)!=-1;return r});\\\"contains\\\"in String.prototype||(String.prototype.contains=function(n){var r=this.indexOf(n)!=-1;return r});onmessage=function(n){var r=h(n.data.filteringString,n.data.data,n.data.excludedData);r.identifier=n.data.identifier,r.instanceIdentifier=n.data.instanceIdentifier,postMessage(r)};function h(n,r,s){var a=[],e=[];if(n){var c=[];n.split(\\\" \\\").forEach(function(i,t,o){i&&c.push(i.toLowerCase())}),r.forEach(function(i,t,o){var u=i.toLowerCase(),f=[];c.forEach(function(p){f.push(u.contains(p)&&!s.contains(i))}),f.contains(!0)&&!f.contains(!1)&&(a.push(i),e.push(t))})}else s.length?a=r.forEach(function(i,t,o){s.indexOf(i)==-1&&(a.push(i),e.push(t))}):(a=r,r.forEach(function(i,t,o){e.push(t)}));return{filteredData:a,filteredIndexes:e}}\\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vdWljb3JlLXRzL3NjcmlwdHMvVUlTdHJpbmdGaWx0ZXJXZWJXb3JrZXIud29ya2VyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJcbi8vIEB0cy1jaGVja1xuXG5pZiAoXCJjb250YWluc1wiIGluIEFycmF5LnByb3RvdHlwZSA9PSBmYWxzZSkge1xuICAgIFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBBcnJheS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLmluZGV4T2YoZWxlbWVudCkgIT0gLTEpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cbmlmIChcImNvbnRhaW5zXCIgaW4gU3RyaW5nLnByb3RvdHlwZSA9PSBmYWxzZSkge1xuICAgIFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBTdHJpbmcucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLmluZGV4T2Yoc3RyaW5nKSAhPSAtMSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuXG5cblxuXG5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBcbiAgICAvL2NvbnNvbGUubG9nKCdNZXNzYWdlIHJlY2VpdmVkIGZyb20gbWFpbiBzY3JpcHQnKTtcbiAgICB2YXIgd29ya2VyUmVzdWx0ID0gZmlsdGVyRGF0YShldmVudC5kYXRhLmZpbHRlcmluZ1N0cmluZywgZXZlbnQuZGF0YS5kYXRhLCBldmVudC5kYXRhLmV4Y2x1ZGVkRGF0YSk7XG4gICAgXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHdvcmtlclJlc3VsdC5pZGVudGlmaWVyID0gZXZlbnQuZGF0YS5pZGVudGlmaWVyO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB3b3JrZXJSZXN1bHQuaW5zdGFuY2VJZGVudGlmaWVyID0gZXZlbnQuZGF0YS5pbnN0YW5jZUlkZW50aWZpZXI7XG4gICAgXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHBvc3RNZXNzYWdlKHdvcmtlclJlc3VsdCk7XG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBmaWx0ZXJEYXRhKGZpbHRlcmluZ1N0cmluZywgZGF0YSwgZXhjbHVkZWREYXRhKSB7XG5cbiAgICB2YXIgZmlsdGVyZWREYXRhID0gW107XG4gICAgdmFyIGZpbHRlcmVkSW5kZXhlcyA9IFtdO1xuXG4gICAgaWYgKGZpbHRlcmluZ1N0cmluZykge1xuXG4gICAgICAgIHZhciBmaWx0ZXJpbmdTdHJpbmdXb3JkcyA9IFtdO1xuICAgICAgICBmaWx0ZXJpbmdTdHJpbmcuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKHdvcmQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgaWYgKHdvcmQpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJpbmdTdHJpbmdXb3Jkcy5wdXNoKHdvcmQudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGFTdHJpbmcsIGluZGV4LCBhcnJheSkge1xuXG4gICAgICAgICAgICB2YXIgbG93ZXJjYXNlRGF0YVN0cmluZyA9IGRhdGFTdHJpbmcudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTG9vayB0aHJvdWdoIGFsbCB0aGUgd29yZHMgaW4gdGhlIGlucHV0XG4gICAgICAgICAgICB2YXIgd29yZHNGb3VuZCA9IFtdO1xuICAgICAgICAgICAgZmlsdGVyaW5nU3RyaW5nV29yZHMuZm9yRWFjaChmdW5jdGlvbiAod29yZCkge1xuICAgICAgICAgICAgICAgIHdvcmRzRm91bmQucHVzaChsb3dlcmNhc2VEYXRhU3RyaW5nLmNvbnRhaW5zKHdvcmQpICYmICFleGNsdWRlZERhdGEuY29udGFpbnMoZGF0YVN0cmluZykpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gT25seSBzaG93IHRoZSBkYXRhU3RyaW5nIGlmIGl0IG1hdGNoZXMgYWxsIG9mIHRoZW1cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmICh3b3Jkc0ZvdW5kLmNvbnRhaW5zKHRydWUpICYmICF3b3Jkc0ZvdW5kLmNvbnRhaW5zKGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZpbHRlcmVkRGF0YS5wdXNoKGRhdGFTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuXG4gICAgICAgIFxuXG4gICAgfVxuICAgIGVsc2UgaWYgKGV4Y2x1ZGVkRGF0YS5sZW5ndGgpIHtcblxuICAgICAgICBcbiAgICAgICAgZmlsdGVyZWREYXRhID0gZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhU3RyaW5nLCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVkRGF0YS5pbmRleE9mKGRhdGFTdHJpbmcpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhLnB1c2goZGF0YVN0cmluZyk7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG5cbiAgICB9XG4gICAgZWxzZSB7XG5cbiAgICAgICAgZmlsdGVyZWREYXRhID0gZGF0YTtcbiAgICAgICAgXG4gICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoc3RyaW5nLCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmlsdGVyZWRJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICBcbiAgICBcbiAgICByZXR1cm4geyBcImZpbHRlcmVkRGF0YVwiOiBmaWx0ZXJlZERhdGEsIFwiZmlsdGVyZWRJbmRleGVzXCI6IGZpbHRlcmVkSW5kZXhlcyB9O1xuICAgIFxuICAgIFxuXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iXSwKICAibWFwcGluZ3MiOiAiQUFHSSxhQUFjLE1BQU0sWUFHcEIsTUFBTSxVQUFVLFNBQVcsU0FBVUEsRUFBUyxDQUUxQyxJQUFJQyxFQUFVLEtBQUssUUFBUUQsQ0FBTyxHQUFLLEdBQ3ZDLE9BQU9DLENBRVgsR0FJQSxhQUFjLE9BQU8sWUFHckIsT0FBTyxVQUFVLFNBQVcsU0FBVUMsRUFBUSxDQUUxQyxJQUFJRCxFQUFVLEtBQUssUUFBUUMsQ0FBTSxHQUFLLEdBQ3RDLE9BQU9ELENBRVgsR0FRSixVQUFZLFNBQVVFLEVBQU8sQ0FHekIsSUFBSUMsRUFBZUMsRUFBV0YsRUFBTSxLQUFLLGdCQUFpQkEsRUFBTSxLQUFLLEtBQU1BLEVBQU0sS0FBSyxZQUFZLEVBR2xHQyxFQUFhLFdBQWFELEVBQU0sS0FBSyxXQUVyQ0MsRUFBYSxtQkFBcUJELEVBQU0sS0FBSyxtQkFHN0MsWUFBWUMsQ0FBWSxDQUU1QixFQVVBLFNBQVNDLEVBQVdDLEVBQWlCQyxFQUFNQyxFQUFjLENBRXJELElBQUlDLEVBQWUsQ0FBQyxFQUNoQkMsRUFBa0IsQ0FBQyxFQUV2QixHQUFJSixFQUFpQixDQUVqQixJQUFJSyxFQUF1QixDQUFDLEVBQzVCTCxFQUFnQixNQUFNLEdBQUcsRUFBRSxRQUFRLFNBQVVNLEVBQU1DLEVBQU9DLEVBQU8sQ0FDekRGLEdBQ0FELEVBQXFCLEtBQUtDLEVBQUssWUFBWSxDQUFDLENBRXBELENBQUMsRUFFREwsRUFBSyxRQUFRLFNBQVVRLEVBQVlGLEVBQU9DLEVBQU8sQ0FFN0MsSUFBSUUsRUFBc0JELEVBQVcsWUFBWSxFQUc3Q0UsRUFBYSxDQUFDLEVBQ2xCTixFQUFxQixRQUFRLFNBQVVDLEVBQU0sQ0FDekNLLEVBQVcsS0FBS0QsRUFBb0IsU0FBU0osQ0FBSSxHQUFLLENBQUNKLEVBQWEsU0FBU08sQ0FBVSxDQUFDLENBQzVGLENBQUMsRUFJR0UsRUFBVyxTQUFTLEVBQUksR0FBSyxDQUFDQSxFQUFXLFNBQVMsRUFBSyxJQUV2RFIsRUFBYSxLQUFLTSxDQUFVLEVBQzVCTCxFQUFnQixLQUFLRyxDQUFLLEVBSWxDLENBQUMsQ0FJTCxNQUNTTCxFQUFhLE9BR2xCQyxFQUFlRixFQUFLLFFBQVEsU0FBVVEsRUFBWUYsRUFBT0MsRUFBTyxDQUV4RE4sRUFBYSxRQUFRTyxDQUFVLEdBQUssS0FFcENOLEVBQWEsS0FBS00sQ0FBVSxFQUM1QkwsRUFBZ0IsS0FBS0csQ0FBSyxFQUlsQyxDQUFDLEdBS0RKLEVBQWVGLEVBRWZBLEVBQUssUUFBUSxTQUFVTCxFQUFRVyxFQUFPQyxFQUFPLENBRXpDSixFQUFnQixLQUFLRyxDQUFLLENBRTlCLENBQUMsR0FNTCxNQUFPLENBQUUsYUFBZ0JKLEVBQWMsZ0JBQW1CQyxDQUFnQixDQUk5RSIsCiAgIm5hbWVzIjogWyJlbGVtZW50IiwgInJlc3VsdCIsICJzdHJpbmciLCAiZXZlbnQiLCAid29ya2VyUmVzdWx0IiwgImZpbHRlckRhdGEiLCAiZmlsdGVyaW5nU3RyaW5nIiwgImRhdGEiLCAiZXhjbHVkZWREYXRhIiwgImZpbHRlcmVkRGF0YSIsICJmaWx0ZXJlZEluZGV4ZXMiLCAiZmlsdGVyaW5nU3RyaW5nV29yZHMiLCAid29yZCIsICJpbmRleCIsICJhcnJheSIsICJkYXRhU3RyaW5nIiwgImxvd2VyY2FzZURhdGFTdHJpbmciLCAid29yZHNGb3VuZCJdCn0K\\n\");\n}\n", "import { IS, IS_NOT, MAKE_ID, NO, UIObject, YES } from \"./UIObject\"\n// @ts-ignore\nimport UIStringFilterWebWorker from \"./UIStringFilterWebWorker.worker.js\"\n\n\nexport class UIStringFilter extends UIObject {\n    \n    \n    \n    \n    \n    static _sharedWebWorkerHolder = { webWorker: new UIStringFilterWebWorker() }\n    \n    static _instanceNumber = -1\n    \n    \n    _instanceNumber: number\n    \n    _isThreadClosed = NO\n    \n    private readonly _webWorkerHolder = UIStringFilter._sharedWebWorkerHolder\n    \n    \n    \n    constructor(useSeparateWebWorkerHolder = NO) {\n        \n        super()\n        \n        if (useSeparateWebWorkerHolder) {\n            \n            this._webWorkerHolder = {\n                webWorker: new UIStringFilterWebWorker()\n            }\n            \n        }\n        \n        UIStringFilter._instanceNumber = UIStringFilter._instanceNumber + 1\n        this._instanceNumber = UIStringFilter._instanceNumber\n        \n        if (IS_NOT(this._webWorkerHolder.webWorker.onmessage)) {\n            \n            this._webWorkerHolder.webWorker.onmessage = message => {\n                \n                this.isWorkerBusy = NO\n                this.postNextMessageIfNeeded()\n                \n                const key = \"\" + message.data.identifier + message.data.instanceIdentifier\n                \n                const completionFunction = this.completionFunctions[key]\n                \n                if (IS(completionFunction)) {\n                    \n                    //console.log(\"Filtering took \" + (Date.now() - startTime) + \" ms\");\n                    \n                    completionFunction(message.data.filteredData, message.data.filteredIndexes, message.data.identifier)\n                    \n                }\n                \n                delete this.completionFunctions[key]\n                \n                var asd = 1\n                \n            }\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get instanceIdentifier() {\n        \n        return this._instanceNumber\n        \n    }\n    \n    \n    get completionFunctions() {\n        \n        const key = \"UICore_completionFunctions\"\n        var result: {\n            \n            [x: string]: (filteredData: string[], filteredIndexes: number[], identifier: any) => void;\n            \n        } = this._webWorkerHolder[key]\n        \n        if (IS_NOT(result)) {\n            \n            result = {}\n            this._webWorkerHolder[key] = result\n            \n        }\n        \n        return result\n        \n    }\n    \n    get messagesToPost() {\n        \n        const key = \"UICore_messagesToPost\"\n        var result: any[] = this._webWorkerHolder[key]\n        \n        if (IS_NOT(result)) {\n            \n            result = []\n            this._webWorkerHolder[key] = result\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    set isWorkerBusy(isWorkerBusy: boolean) {\n        \n        this._webWorkerHolder[\"UICore_isWorking\"] = isWorkerBusy\n        \n    }\n    \n    get isWorkerBusy() {\n        \n        return IS(this._webWorkerHolder[\"UICore_isWorking\"])\n        \n    }\n    \n    \n    \n    postNextMessageIfNeeded() {\n        \n        if (this.messagesToPost.length && IS_NOT(this.isWorkerBusy)) {\n            \n            this._webWorkerHolder.webWorker.postMessage(this.messagesToPost.firstElement)\n            this.messagesToPost.removeElementAtIndex(0)\n            \n            this.isWorkerBusy = YES\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    filterData(\n        filteringString: string,\n        data: string[],\n        excludedData: string[],\n        identifier: any,\n        completion: (filteredData: string[], filteredIndexes: number[], identifier: any) => void\n    ) {\n        \n        \n        if (this._isThreadClosed) {\n            \n            return\n            \n        }\n        \n        //var startTime = Date.now();\n        \n        const instanceIdentifier = this.instanceIdentifier\n        \n        const key = \"\" + identifier + instanceIdentifier\n        \n        this.completionFunctions[key] = completion\n        \n        this.messagesToPost.push({\n            \n            \"filteringString\": filteringString,\n            \"data\": data,\n            \"excludedData\": excludedData,\n            \"identifier\": identifier,\n            \"instanceIdentifier\": instanceIdentifier\n            \n        })\n        \n        this.postNextMessageIfNeeded()\n        \n        \n    }\n    \n    \n    filteredData(\n        filteringString: string,\n        data: string[],\n        excludedData: string[] = [],\n        identifier: any = MAKE_ID()\n    ) {\n        \n        \n        const result: Promise<{\n            \n            filteredData: string[],\n            filteredIndexes: number[],\n            identifier: any\n            \n        }> = new Promise((resolve, reject) => {\n            \n            this.filterData(filteringString, data, excludedData, identifier,\n                (filteredData, filteredIndexes, filteredIdentifier) => {\n                    \n                    if (filteredIdentifier == identifier) {\n                        \n                        resolve({\n                            \n                            filteredData: filteredData,\n                            filteredIndexes: filteredIndexes,\n                            identifier: filteredIdentifier\n                            \n                        })\n                        \n                    }\n                    \n                    \n                }\n            )\n            \n            \n        })\n        \n        return result\n        \n        \n    }\n    \n    \n    \n    \n    \n    closeThread() {\n        \n        this._isThreadClosed = YES\n        \n        if (this._webWorkerHolder != UIStringFilter._sharedWebWorkerHolder) {\n            \n            this._webWorkerHolder.webWorker.terminate()\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { nil, NO, YES } from \"./UIObject\"\nimport { UIPoint } from \"./UIPoint\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIView } from \"./UIView\"\n\n\n\n\n\nexport class UIScrollView extends UIView {\n    \n    \n    _contentOffset: UIPoint = new UIPoint(0, 0)\n    _contentScale: number = 1\n    \n    containerView: UIView\n    \n    _pointerDown: boolean\n    \n    _scrollEnabled: boolean = YES\n    \n    _previousClientPoint: UIPoint\n    \n    _intrinsicContentFrame: UIRectangle\n    \n    constructor(elementID: string, viewHTMLElement?: HTMLElement) {\n        \n        super(elementID, viewHTMLElement)\n        \n        this.containerView = new UIView(elementID + \"ContainerView\")\n        super.addSubview(this.containerView)\n        \n        \n        this.style.overflow = \"hidden\"\n        \n        this.pausesPointerEvents = NO //YES;\n        \n        \n        this.addTargetForControlEvent(UIView.controlEvent.PointerDown, function () {\n            \n            this._pointerDown = YES\n            \n        }.bind(this))\n        \n        this.addTargetForControlEvent(UIView.controlEvent.PointerUp, function () {\n            \n            this._pointerDown = NO\n            \n            this._previousClientPoint = null\n            \n            scrollStopped()\n            \n        }.bind(this))\n        \n        \n        function scrollStopped() {\n            \n            // Handle paging if needed\n            \n        }\n        \n        \n        this.addTargetForControlEvent(UIView.controlEvent.PointerMove, function (sender: UIScrollView, event: Event) {\n            \n            if (!(this._pointerDown && this._scrollEnabled && this._enabled)) {\n                \n                return\n                \n            }\n    \n            const currentClientPoint = new UIPoint(nil, nil)\n    \n            if ((window as any).MouseEvent && event instanceof MouseEvent) {\n                \n                currentClientPoint.x = (event as MouseEvent).clientX\n                currentClientPoint.y = (event as MouseEvent).clientY\n                \n            }\n            \n            if ((window as any).TouchEvent && event instanceof TouchEvent) {\n    \n                const touchEvent: TouchEvent = event\n    \n                if (touchEvent.touches.length != 1) {\n                    \n                    this._pointerDown = NO\n                    this._previousClientPoint = null\n                    \n                    scrollStopped()\n                    \n                    return\n                    \n                }\n                \n                currentClientPoint.x = touchEvent.touches[0].clientX\n                currentClientPoint.y = touchEvent.touches[0].clientY\n                \n            }\n            \n            if (!this._previousClientPoint) {\n                \n                this._previousClientPoint = currentClientPoint\n                \n                return\n                \n            }\n    \n            const changePoint = currentClientPoint.copy().subtract(this._previousClientPoint)\n    \n    \n            if (this.containerView.bounds.width <= this.bounds.width) {\n                changePoint.x = 0\n            }\n            if (0 < this.contentOffset.x + changePoint.x) {\n                changePoint.x = -this.contentOffset.x\n            }\n            if (this.contentOffset.x + changePoint.x < -this.bounds.width) {\n                changePoint.x = -this.bounds.width - this.contentOffset.x\n            }\n            \n            if (this.containerView.bounds.height <= this.bounds.height) {\n                changePoint.y = 0\n            }\n            if (0 < this.contentOffset.y + changePoint.y) {\n                changePoint.y = -this.contentOffset.y\n            }\n            if (this.contentOffset.y + changePoint.y < -this.bounds.height) {\n                changePoint.y = -this.bounds.height - this.contentOffset.y\n            }\n            \n            this.contentOffset = this.contentOffset.add(changePoint)\n            \n            this._previousClientPoint = currentClientPoint\n            \n        }.bind(this))\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    invalidateIntrinsicContentFrame() {\n        \n        this._intrinsicContentFrame = nil\n        \n    }\n    \n    \n    \n    \n    \n    get contentOffset() {\n        \n        return this._contentOffset\n        \n    }\n    \n    set contentOffset(offset: UIPoint) {\n        \n        this._contentOffset = offset\n        this.setNeedsLayout()\n        \n    }\n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        // var intrinsicContentFrame = this._intrinsicContentFrame;\n        // if (!IS(intrinsicContentFrame)) {\n        //     intrinsicContentFrame = this.containerView.intrinsicContentSizeWithConstraints();   \n        // }\n        // intrinsicContentFrame.offsetByPoint(this.contentOffset);\n        // intrinsicContentFrame.height = this.containerView.viewHTMLElement.scrollHeight;\n        // intrinsicContentFrame.width = this.containerView.viewHTMLElement.scrollWidth;\n        // this.containerView.frame = intrinsicContentFrame;\n        \n        this.containerView.frame = this.containerView.bounds.offsetByPoint(this.contentOffset)\n        \n        \n        \n        \n    }\n    \n    \n    \n    // get _subviews() {\n    //     return super.subviews;\n    // }\n    \n    // set _subviews(subviews: UIView[]) {\n    //     super.subviews = subviews;\n    // }\n    \n    // get subviews() {\n    //     return this.containerView.subviews;\n    // }\n    \n    // set subviews(subviews: UIView[]) {\n    \n    //     this.containerView.subviews = subviews;\n    \n    //     this.invalidateIntrinsicContentFrame();\n    \n    \n    // }\n    \n    \n    hasSubview(view: UIView) {\n        return this.containerView.hasSubview(view)\n    }\n    \n    addSubview(view: UIView) {\n        \n        this.containerView.addSubview(view)\n        \n        this.invalidateIntrinsicContentFrame()\n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIButton } from \"./UIButton\"\nimport { UIColor } from \"./UIColor\"\nimport { UICore } from \"./UICore\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { IS, nil, NO, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIScrollView } from \"./UIScrollView\"\nimport { UITimer } from \"./UITimer\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\nexport class UISlideScrollerView extends UIView {\n    \n    \n    \n    _previousLayoutBounds: UIRectangle\n    _targetIndex: number = 0\n    pageIndicatorsView: UIView\n    _isAnimating: boolean = NO\n    _isAnimationOngoing: boolean = NO\n    _animationTimer: UITimer = nil\n    _scrollView: UIScrollView\n    _slideViews: UIView[] = []\n    \n    wrapAround: boolean = YES\n    \n    animationDuration: number = 0.35\n    animationDelay: number = 2\n    \n    _currentPageIndex: number = 0\n    \n    constructor(elementID: string, viewHTMLElement?: HTMLElement) {\n        \n        super(elementID, viewHTMLElement)\n        \n        this._scrollView = new UIScrollView(elementID + \"ScrollView\")\n        \n        this.addSubview(this._scrollView)\n        \n        \n        this._scrollView._scrollEnabled = NO\n        \n        this._scrollView.addTargetForControlEvent(\n            UIView.controlEvent.PointerMove,\n            function (sender: UIView, event: Event) {\n                \n                if (event instanceof MouseEvent) {\n                    this._animationTimer.invalidate()\n                }\n                \n            }.bind(this)\n        )\n        \n        this._scrollView.addTargetForControlEvent(UIView.controlEvent.PointerLeave, function () {\n            \n            if (this._isAnimating && event instanceof MouseEvent) {\n                this.startAnimating()\n            }\n            \n        }.bind(this))\n        \n        // Touch events\n        this._scrollView.addTargetForControlEvent(UIView.controlEvent.PointerDown, function (sender, event) {\n            \n            if (event instanceof TouchEvent) {\n                this._animationTimer.invalidate()\n            }\n            \n        }.bind(this))\n        \n        this._scrollView.addTargetForControlEvents([\n            UIView.controlEvent.PointerUp, UIView.controlEvent.PointerCancel\n        ], function (sender, event) {\n            \n            if (event instanceof TouchEvent && this._isAnimating) {\n                \n                this.startAnimating()\n                \n            }\n            \n        }.bind(this))\n        \n        \n        // Page indicator\n        \n        this.pageIndicatorsView = new UIView(elementID + \"PageIndicatorsView\")\n        this.addSubview(this.pageIndicatorsView)\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    buttonForPageIndicatorWithIndex(index: number): UIButton {\n    \n        const result = new UIButton(this.viewHTMLElement.id + \"PageIndicatorButton\" + index)\n    \n        result.addTargetForControlEvents([\n            UIView.controlEvent.PointerUpInside, UIView.controlEvent.EnterUp\n        ], function (sender, event) {\n            \n            this.scrollToPageWithIndex(index, YES)\n            \n            if (this._isAnimating) {\n                \n                this.startAnimating()\n                \n            }\n            \n            \n            \n        }.bind(this))\n        \n        result.addTargetForControlEvent(UIView.controlEvent.PointerMove, function () {\n            \n            this._animationTimer.invalidate()\n            \n        }.bind(this))\n        \n        \n        result.updateContentForNormalState = function () {\n            \n            result.backgroundColor = UIColor.blueColor\n            result.titleLabel.textColor = UIColor.whiteColor\n            \n        }\n        \n        \n        result.frame = new UIRectangle(nil, nil, 20, 50)\n        \n        // result.style.height = \"20px\";\n        // result.style.width = \"50px\";\n        result.style.display = \"table-cell\"\n        result.style.position = \"relative\"\n        \n        \n        // var resultContent = new UIView(result.viewHTMLElement.id + \"Content\");\n        // resultContent.backgroundColor = UIColor.whiteColor;\n        // resultContent.centerYInContainer();\n        // resultContent.style.height = \"10px\";\n        // resultContent.style.height = \"100%\";\n        // resultContent.style.borderRadius = \"5px\";\n        \n        // result.addSubview(resultContent);\n        \n        \n        return result\n        \n    }\n    \n    \n    \n    addSlideView(view: UIView) {\n        \n        this.slideViews.push(view)\n        \n        this.updateSlideViews()\n        \n    }\n    \n    set slideViews(views: UIView[]) {\n        \n        this._slideViews = views\n        \n        this.updateSlideViews()\n        \n    }\n    \n    get slideViews() {\n        return this._slideViews\n    }\n    \n    \n    \n    get currentPageIndex() {\n    \n        const result = this._currentPageIndex\n    \n        return result\n        \n    }\n    \n    set currentPageIndex(index: number) {\n        \n        this._currentPageIndex = index\n        \n        this._slideViews[index].willAppear()\n        \n        //this._scrollView.contentOffset.x = -this._slideViews[index].frame.min.x; //-this.bounds.width * index;\n        //this._scrollView.contentOffset.x = Math.round(this._scrollView.contentOffset.x);\n        \n        this._scrollView.contentOffset = this._scrollView.contentOffset.pointWithX(-this._slideViews[index].frame.min.x)\n        \n        \n        this.pageIndicatorsView.subviews.forEach(function (button: UIButton, index, array) {\n            \n            button.selected = NO\n            \n        });\n        \n        \n        \n        (this.pageIndicatorsView.subviews[index] as UIButton).selected = YES\n        \n        \n        \n    }\n    \n    \n    \n    scrollToPreviousPage(animated: boolean) {\n        \n        if (this.slideViews.length == 0) {\n            return\n        }\n    \n        var targetIndex = this.currentPageIndex\n    \n        if (this.wrapAround) {\n            targetIndex = (this.currentPageIndex - 1) % (this.slideViews.length)\n        }\n        else if (this.currentPageIndex - 1 < this.slideViews.length) {\n            targetIndex = this.currentPageIndex - 1\n        }\n        else {\n            return\n        }\n        \n        this.scrollToPageWithIndex(targetIndex, animated)\n        \n    }\n    \n    scrollToNextPage(animated: boolean) {\n        \n        if (this.slideViews.length == 0) {\n            return\n        }\n    \n        var targetIndex = this.currentPageIndex\n    \n        if (this.wrapAround) {\n            targetIndex = (this.currentPageIndex + 1) % (this.slideViews.length)\n        }\n        else if (this.currentPageIndex + 1 < this.slideViews.length) {\n            targetIndex = this.currentPageIndex + 1\n        }\n        else {\n            return\n        }\n        \n        this.scrollToPageWithIndex(targetIndex, animated)\n        \n    }\n    \n    \n    \n    scrollToPageWithIndex(targetIndex: number, animated: boolean = YES) {\n        \n        this._targetIndex = targetIndex\n        \n        // this._slideViews[this.currentPageIndex]._shouldLayout = NO;\n        // this._slideViews[this._targetIndex]._shouldLayout = YES;\n        \n        //this._slideViews[this._targetIndex].hidden = NO;\n        \n        this.willScrollToPageWithIndex(targetIndex)\n        \n        this._isAnimationOngoing = YES\n        \n        //var previousView = this._slideViews[this.currentPageIndex];\n        \n        if (animated) {\n            \n            \n            \n            UIView.animateViewOrViewsWithDurationDelayAndFunction(\n                this._scrollView.containerView,\n                this.animationDuration,\n                0,\n                undefined,\n                function (this: UISlideScrollerView) {\n                    \n                    \n                    this.currentPageIndex = targetIndex\n                    \n                    \n                    \n                }.bind(this),\n                function (this: UISlideScrollerView) {\n                    \n                    this.didScrollToPageWithIndex(targetIndex)\n                    \n                    this._isAnimationOngoing = NO\n                    \n                    //previousView.hidden = YES;\n                    \n                }.bind(this)\n            )\n            \n        }\n        else {\n            \n            \n            this.currentPageIndex = targetIndex\n            this.didScrollToPageWithIndex(targetIndex)\n            \n            //previousView.hidden = YES;\n            \n        }\n        \n    }\n    \n    \n    \n    willScrollToPageWithIndex(index: number) {\n    \n        const targetView = this.slideViews[index]\n    \n        if (IS(targetView) && (targetView as any).willAppear && (targetView as any).willAppear instanceof Function) {\n            \n            (targetView as any).willAppear()\n            \n        }\n        \n    }\n    \n    didScrollToPageWithIndex(index: number) {\n        \n        \n        \n    }\n    \n    \n    \n    startAnimating() {\n        \n        this._isAnimating = YES\n        \n        this._animationTimer.invalidate()\n        \n        this._animationTimer = new UITimer(this.animationDelay + this.animationDuration, YES, function () {\n            \n            this.scrollToNextPage(YES)\n            \n        }.bind(this))\n        \n    }\n    \n    stopAnimating() {\n        \n        this._isAnimating = NO\n        this._animationTimer.invalidate()\n        \n    }\n    \n    \n    \n    \n    \n    updateSlideViews() {\n        \n        this._scrollView.containerView.subviews.slice().forEach(function (subview, index, array) {\n            \n            subview.removeFromSuperview()\n            \n        })\n        \n        this.pageIndicatorsView.subviews.slice().forEach(function (subview, index, array) {\n            \n            subview.removeFromSuperview()\n            \n        })\n        \n        this._slideViews.forEach(function (view, index, array) {\n            \n            this._scrollView.addSubview(view)\n            \n            this.pageIndicatorsView.addSubview(this.buttonForPageIndicatorWithIndex(index))\n            \n        }.bind(this))\n        \n    }\n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UICoreValues.broadcastEventName.WindowDidResize) {\n            \n            this.currentPageIndex = this.currentPageIndex\n            \n            \n        }\n        \n        \n    }\n    \n    \n    set frame(frame: UIRectangle) {\n        \n        super.frame = frame\n        \n        this.currentPageIndex = this.currentPageIndex\n        \n    }\n    \n    get frame() {\n        \n        return super.frame\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        if (this.bounds.isEqualTo(this._previousLayoutBounds)) {\n            return\n        }\n    \n        const bounds = this.bounds\n    \n        this._previousLayoutBounds = bounds\n        \n        this._scrollView.frame = bounds\n        \n        \n        \n        this._scrollView.containerView.frame = bounds.rectangleWithWidth(bounds.width *\n            this.slideViews.length).performFunctionWithSelf(function (this: UISlideScrollerView, self: UIRectangle) {\n            \n            self.offsetByPoint(this._scrollView.contentOffset)\n            \n            return self\n            \n        }.bind(this))\n        \n        this._slideViews.forEach(function (view, index, array) {\n            \n            view.frame = bounds.rectangleWithX((this.bounds.width + 1) * index)\n            \n        }.bind(this))\n        \n        \n        this.layoutPageIndicators()\n        \n        \n    }\n    \n    \n    layoutPageIndicators() {\n        \n        this.pageIndicatorsView.centerXInContainer()\n        this.pageIndicatorsView.style.bottom = \"20px\"\n        this.pageIndicatorsView.style.height = \"20px\"\n        this.pageIndicatorsView.style.display = \"table-row\"\n        \n    }\n    \n    \n    \n    \n    removeFromSuperview() {\n        \n        \n        super.removeFromSuperview()\n        \n        this.stopAnimating()\n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIBaseButton } from \"./UIBaseButton\"\nimport { UIButtonColorSpecifier } from \"./UIButton\"\nimport { UICore } from \"./UICore\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { nil, NO } from \"./UIObject\"\nimport { UIRoute } from \"./UIRoute\"\nimport { UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UILink extends UIBaseButton {\n    \n    private _colors: UIButtonColorSpecifier\n    \n    \n    constructor(elementID: string, initViewData = nil) {\n        \n        super(elementID, \"a\", initViewData)\n        \n        this.stopsPointerEventPropagation = NO\n        this.pausesPointerEvents = NO\n        \n    }\n    \n    \n    initView(elementID, viewHTMLElement, initViewData: { titleType: string }) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        this.class.superclass = UIBaseButton\n        \n        // Instance variables\n        \n        \n        //this.style.position = \"relative\"\n        \n        \n        viewHTMLElement.onclick = this.blur.bind(this)\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get colors(): UIButtonColorSpecifier {\n        return this._colors\n    }\n    \n    set colors(value: UIButtonColorSpecifier) {\n        this._colors = value\n    }\n    \n    \n    \n    \n    \n    get viewHTMLElement() {\n        \n        // @ts-ignore\n        return super.viewHTMLElement as HTMLLinkElement\n        \n    }\n    \n    set text(text: string) {\n        \n        this.viewHTMLElement.textContent = text\n        \n    }\n    \n    get text() {\n        \n        return this.viewHTMLElement.textContent\n        \n    }\n    \n    \n    set target(target: string) {\n        \n        this.viewHTMLElement.setAttribute(\"href\", target)\n        \n    }\n    \n    get target() {\n    \n        const result = this.viewHTMLElement.getAttribute(\"href\")\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    set targetRouteForCurrentState(targetRouteForCurrentState: () => (UIRoute | string)) {\n        \n        this._targetRouteForCurrentState = targetRouteForCurrentState\n        \n        this.updateTarget()\n        \n    }\n    \n    get targetRouteForCurrentState() {\n        \n        return this._targetRouteForCurrentState\n        \n    }\n    \n    \n    _targetRouteForCurrentState() {\n    \n        const result = UIRoute.currentRoute.routeByRemovingComponentsOtherThanOnesNamed([\"settings\"]) as (UIRoute | string)\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UICoreValues.broadcastEventName.RouteDidChange) {\n            \n            this.updateTarget()\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    wasAddedToViewTree() {\n        \n        super.wasAddedToViewTree()\n        \n        this.updateTarget()\n        \n        \n    }\n    \n    \n    \n    \n    \n    updateTarget() {\n        \n        const route = this.targetRouteForCurrentState()\n        \n        if (route instanceof UIRoute) {\n            \n            this.target = route.linkRepresentation\n            \n            return\n            \n        }\n        \n        this.target = route\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIButton, UIButtonColorSpecifier } from \"./UIButton\"\nimport { UILink } from \"./UILink\"\n\n\n\n\nexport class UILinkButton extends UILink {\n    \n    \n    button: UIButton\n    \n    //link = new UILink(this.elementID + \"Link\");\n    \n    \n    \n    \n    \n    constructor(elementID: string, elementType?: string, titleType?: string) {\n        \n        super(elementID, { \"elementType\": elementType, \"titleType\": titleType })\n        \n        this.button.addTargetForControlEvents([\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n        ], function (this: UILinkButton, sender: UIButton, event: Event) {\n    \n            window.location = this.target as any\n            \n        }.bind(this))\n        \n        // this.link.hidden = YES;\n        \n        // this.addSubview(this.link);\n        \n        \n    }\n    \n    \n    \n    \n    \n    initView(elementID, viewHTMLElement, initViewData: { titleType: string, elementType: string }) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        this.class.superclass = UILink\n        \n        // Instance variables\n        \n        this.button = new UIButton(this.elementID + \"Button\", initViewData.elementType, initViewData.titleType)\n        \n        this.addSubview(this.button)\n        \n        this.style.position = \"absolute\"\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get titleLabel() {\n        \n        return this.button.titleLabel\n        \n    }\n    \n    get imageView() {\n        \n        return this.button.imageView\n        \n    }\n    \n    \n    set colors(colors: UIButtonColorSpecifier) {\n        \n        this.button.colors = colors\n        \n    }\n    \n    \n    get colors() {\n        \n        return this.button.colors\n        \n    }\n    \n    \n    \n    \n    \n    get viewHTMLElement() {\n        \n        // @ts-ignore\n        return super.viewHTMLElement as HTMLLinkElement\n        \n    }\n    \n    \n    set target(target: string) {\n        \n        this.viewHTMLElement.setAttribute(\"href\", target)\n        \n    }\n    \n    get target() {\n    \n        const result = this.viewHTMLElement.getAttribute(\"href\")\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n        this.button.frame = bounds\n        \n        this.button.layoutSubviews()\n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIObject } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\n\n\nexport class UILayoutGrid extends UIObject {\n    \n    \n    \n    _frame: UIRectangle\n    \n    _subframes: UILayoutGrid[] = []\n    \n    \n    constructor(frame: UIRectangle) {\n        \n        super()\n        \n        this._frame = frame\n        \n    }\n    \n    \n    \n    \n    \n    splitXInto(numberOfFrames: number) {\n        \n        \n        \n        if (this._subframes.length == 0) {\n            \n            \n            \n            for (var i = 0; i < numberOfFrames; i++) {\n    \n                const asd = 1\n    \n    \n    \n            }\n            \n        }\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import inlineWorker from '__inline-worker'\nexport default function Worker() {\n  return inlineWorker(\"\\\"contains\\\"in Array.prototype||(Array.prototype.contains=function(a){var r=this.indexOf(a)!=-1;return r});\\\"contains\\\"in String.prototype||(String.prototype.contains=function(a){var r=this.indexOf(a)!=-1;return r});onmessage=function(a){var r=y(a.data.filteringString,a.data.data,a.data.excludedData,a.data.dataKeyPath);r.identifier=a.data.identifier,r.instanceIdentifier=a.data.instanceIdentifier,postMessage(r)};function y(a,r,u,d){function l(t,n){var o=t.split(\\\".\\\"),i=n;return o.forEach(function(c,f,p){i=i[c]}),i}var e=[],s=[];if(a){var h=[];a.split(\\\" \\\").forEach(function(t,n,o){t&&h.push(t.toLowerCase())}),r.forEach(function(t,n,o){var i=l(d,t),c=i.toLowerCase(),f=[];h.forEach(function(p){f.push(c.contains(p)&&!u.contains(i))}),f.contains(!0)&&!f.contains(!1)&&(e.push(t),s.push(n))})}else u.length?e=r.forEach(function(t,n,o){u.indexOf(t)==-1&&(e.push(t),s.push(n))}):(e=r,r.forEach(function(t,n,o){s.push(n)}));return{filteredData:e,filteredIndexes:s}}\\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vdWljb3JlLXRzL3NjcmlwdHMvVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlcldlYldvcmtlci53b3JrZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIlxuLy8gQHRzLWNoZWNrXG5cbmlmIChcImNvbnRhaW5zXCIgaW4gQXJyYXkucHJvdG90eXBlID09IGZhbHNlKSB7XG4gICAgXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIEFycmF5LnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuaW5kZXhPZihlbGVtZW50KSAhPSAtMSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuaWYgKFwiY29udGFpbnNcIiBpbiBTdHJpbmcucHJvdG90eXBlID09IGZhbHNlKSB7XG4gICAgXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFN0cmluZy5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuaW5kZXhPZihzdHJpbmcpICE9IC0xKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5cblxuXG5cbm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIFxuICAgIC8vY29uc29sZS5sb2coJ01lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBtYWluIHNjcmlwdCcpO1xuICAgIHZhciB3b3JrZXJSZXN1bHQgPSBmaWx0ZXJLZXlWYWx1ZVBhdGhEYXRhKGV2ZW50LmRhdGEuZmlsdGVyaW5nU3RyaW5nLCBldmVudC5kYXRhLmRhdGEsIGV2ZW50LmRhdGEuZXhjbHVkZWREYXRhLCBldmVudC5kYXRhLmRhdGFLZXlQYXRoKTtcbiAgICBcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd29ya2VyUmVzdWx0LmlkZW50aWZpZXIgPSBldmVudC5kYXRhLmlkZW50aWZpZXI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHdvcmtlclJlc3VsdC5pbnN0YW5jZUlkZW50aWZpZXIgPSBldmVudC5kYXRhLmluc3RhbmNlSWRlbnRpZmllcjtcbiAgICBcbiAgICBcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcG9zdE1lc3NhZ2Uod29ya2VyUmVzdWx0KTtcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGZpbHRlcktleVZhbHVlUGF0aERhdGEoZmlsdGVyaW5nU3RyaW5nLCBkYXRhLCBleGNsdWRlZERhdGEsIGRhdGFLZXlQYXRoKSB7XG4gICAgXG4gICAgZnVuY3Rpb24gdmFsdWVGb3JLZXlQYXRoKGtleVBhdGgsIG9iamVjdCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIGtleXMgPSBrZXlQYXRoLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgdmFyIGN1cnJlbnRPYmplY3QgPSBvYmplY3Q7XG4gICAgICAgIFxuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBjdXJyZW50T2JqZWN0ID0gY3VycmVudE9iamVjdFtrZXldO1xuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRPYmplY3Q7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB2YXIgZmlsdGVyZWREYXRhID0gW107XG4gICAgdmFyIGZpbHRlcmVkSW5kZXhlcyA9IFtdO1xuXG4gICAgaWYgKGZpbHRlcmluZ1N0cmluZykge1xuXG4gICAgICAgIHZhciBmaWx0ZXJpbmdTdHJpbmdXb3JkcyA9IFtdO1xuICAgICAgICBmaWx0ZXJpbmdTdHJpbmcuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKHdvcmQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgaWYgKHdvcmQpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJpbmdTdHJpbmdXb3Jkcy5wdXNoKHdvcmQudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGFPYmplY3QsIGluZGV4LCBhcnJheSkge1xuXG4gICAgICAgICAgICB2YXIgZGF0YVN0cmluZyA9IHZhbHVlRm9yS2V5UGF0aChkYXRhS2V5UGF0aCwgZGF0YU9iamVjdCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBsb3dlcmNhc2VEYXRhU3RyaW5nID0gZGF0YVN0cmluZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBMb29rIHRocm91Z2ggYWxsIHRoZSB3b3JkcyBpbiB0aGUgaW5wdXRcbiAgICAgICAgICAgIHZhciB3b3Jkc0ZvdW5kID0gW107XG4gICAgICAgICAgICBmaWx0ZXJpbmdTdHJpbmdXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICAgICAgICAgICAgd29yZHNGb3VuZC5wdXNoKGxvd2VyY2FzZURhdGFTdHJpbmcuY29udGFpbnMod29yZCkgJiYgIWV4Y2x1ZGVkRGF0YS5jb250YWlucyhkYXRhU3RyaW5nKSk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvLyBPbmx5IHNob3cgdGhlIGRhdGFTdHJpbmcgaWYgaXQgbWF0Y2hlcyBhbGwgb2YgdGhlbVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKHdvcmRzRm91bmQuY29udGFpbnModHJ1ZSkgJiYgIXdvcmRzRm91bmQuY29udGFpbnMoZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhLnB1c2goZGF0YU9iamVjdCk7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG5cbiAgICAgICAgXG5cbiAgICB9XG4gICAgZWxzZSBpZiAoZXhjbHVkZWREYXRhLmxlbmd0aCkge1xuXG4gICAgICAgIFxuICAgICAgICBmaWx0ZXJlZERhdGEgPSBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGFPYmplY3QsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXhjbHVkZWREYXRhLmluZGV4T2YoZGF0YU9iamVjdCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZERhdGEucHVzaChkYXRhT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZEluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcblxuICAgIH1cbiAgICBlbHNlIHtcblxuICAgICAgICBmaWx0ZXJlZERhdGEgPSBkYXRhO1xuICAgICAgICBcbiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmaWx0ZXJlZEluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcblxuICAgIH1cblxuICAgIFxuICAgIFxuICAgIHJldHVybiB7IFwiZmlsdGVyZWREYXRhXCI6IGZpbHRlcmVkRGF0YSwgXCJmaWx0ZXJlZEluZGV4ZXNcIjogZmlsdGVyZWRJbmRleGVzIH07XG4gICAgXG4gICAgXG5cbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiJdLAogICJtYXBwaW5ncyI6ICJBQUdJLGFBQWMsTUFBTSxZQUdwQixNQUFNLFVBQVUsU0FBVyxTQUFVQSxFQUFTLENBRTFDLElBQUlDLEVBQVUsS0FBSyxRQUFRRCxDQUFPLEdBQUssR0FDdkMsT0FBT0MsQ0FFWCxHQUlBLGFBQWMsT0FBTyxZQUdyQixPQUFPLFVBQVUsU0FBVyxTQUFVQyxFQUFRLENBRTFDLElBQUlELEVBQVUsS0FBSyxRQUFRQyxDQUFNLEdBQUssR0FDdEMsT0FBT0QsQ0FFWCxHQVFKLFVBQVksU0FBVUUsRUFBTyxDQUd6QixJQUFJQyxFQUFlQyxFQUF1QkYsRUFBTSxLQUFLLGdCQUFpQkEsRUFBTSxLQUFLLEtBQU1BLEVBQU0sS0FBSyxhQUFjQSxFQUFNLEtBQUssV0FBVyxFQUd0SUMsRUFBYSxXQUFhRCxFQUFNLEtBQUssV0FFckNDLEVBQWEsbUJBQXFCRCxFQUFNLEtBQUssbUJBSTdDLFlBQVlDLENBQVksQ0FFNUIsRUFVQSxTQUFTQyxFQUF1QkMsRUFBaUJDLEVBQU1DLEVBQWNDLEVBQWEsQ0FFOUUsU0FBU0MsRUFBZ0JDLEVBQVNDLEVBQVEsQ0FFdEMsSUFBSUMsRUFBT0YsRUFBUSxNQUFNLEdBQUcsRUFDeEJHLEVBQWdCRixFQUVwQixPQUFBQyxFQUFLLFFBQVEsU0FBVUUsRUFBS0MsRUFBT0MsRUFBTyxDQUN0Q0gsRUFBZ0JBLEVBQWNDLEVBQ2xDLENBQUMsRUFFTUQsQ0FFWCxDQUVBLElBQUlJLEVBQWUsQ0FBQyxFQUNoQkMsRUFBa0IsQ0FBQyxFQUV2QixHQUFJYixFQUFpQixDQUVqQixJQUFJYyxFQUF1QixDQUFDLEVBQzVCZCxFQUFnQixNQUFNLEdBQUcsRUFBRSxRQUFRLFNBQVVlLEVBQU1MLEVBQU9DLEVBQU8sQ0FDekRJLEdBQ0FELEVBQXFCLEtBQUtDLEVBQUssWUFBWSxDQUFDLENBRXBELENBQUMsRUFFRGQsRUFBSyxRQUFRLFNBQVVlLEVBQVlOLEVBQU9DLEVBQU8sQ0FFN0MsSUFBSU0sRUFBYWIsRUFBZ0JELEVBQWFhLENBQVUsRUFFcERFLEVBQXNCRCxFQUFXLFlBQVksRUFHN0NFLEVBQWEsQ0FBQyxFQUNsQkwsRUFBcUIsUUFBUSxTQUFVQyxFQUFNLENBQ3pDSSxFQUFXLEtBQUtELEVBQW9CLFNBQVNILENBQUksR0FBSyxDQUFDYixFQUFhLFNBQVNlLENBQVUsQ0FBQyxDQUM1RixDQUFDLEVBSUdFLEVBQVcsU0FBUyxFQUFJLEdBQUssQ0FBQ0EsRUFBVyxTQUFTLEVBQUssSUFFdkRQLEVBQWEsS0FBS0ksQ0FBVSxFQUM1QkgsRUFBZ0IsS0FBS0gsQ0FBSyxFQUlsQyxDQUFDLENBSUwsTUFDU1IsRUFBYSxPQUdsQlUsRUFBZVgsRUFBSyxRQUFRLFNBQVVlLEVBQVlOLEVBQU9DLEVBQU8sQ0FFeERULEVBQWEsUUFBUWMsQ0FBVSxHQUFLLEtBRXBDSixFQUFhLEtBQUtJLENBQVUsRUFDNUJILEVBQWdCLEtBQUtILENBQUssRUFJbEMsQ0FBQyxHQUtERSxFQUFlWCxFQUVmQSxFQUFLLFFBQVEsU0FBVUssRUFBUUksRUFBT0MsRUFBTyxDQUV6Q0UsRUFBZ0IsS0FBS0gsQ0FBSyxDQUU5QixDQUFDLEdBTUwsTUFBTyxDQUFFLGFBQWdCRSxFQUFjLGdCQUFtQkMsQ0FBZ0IsQ0FJOUUiLAogICJuYW1lcyI6IFsiZWxlbWVudCIsICJyZXN1bHQiLCAic3RyaW5nIiwgImV2ZW50IiwgIndvcmtlclJlc3VsdCIsICJmaWx0ZXJLZXlWYWx1ZVBhdGhEYXRhIiwgImZpbHRlcmluZ1N0cmluZyIsICJkYXRhIiwgImV4Y2x1ZGVkRGF0YSIsICJkYXRhS2V5UGF0aCIsICJ2YWx1ZUZvcktleVBhdGgiLCAia2V5UGF0aCIsICJvYmplY3QiLCAia2V5cyIsICJjdXJyZW50T2JqZWN0IiwgImtleSIsICJpbmRleCIsICJhcnJheSIsICJmaWx0ZXJlZERhdGEiLCAiZmlsdGVyZWRJbmRleGVzIiwgImZpbHRlcmluZ1N0cmluZ1dvcmRzIiwgIndvcmQiLCAiZGF0YU9iamVjdCIsICJkYXRhU3RyaW5nIiwgImxvd2VyY2FzZURhdGFTdHJpbmciLCAid29yZHNGb3VuZCJdCn0K\\n\");\n}\n", "import { IS, IS_NOT, NO, UIObject, YES } from \"./UIObject\"\n// @ts-ignore\nimport UIKeyValueStringFilterWebWorker from \"./UIKeyValueStringFilterWebWorker.worker.js\"\n\n\n\n\n\nexport class UIKeyValueStringFilter extends UIObject {\n    \n    \n    static _sharedWebWorkerHolder = { webWorker: new UIKeyValueStringFilterWebWorker() }\n    \n    static _instanceNumber = -1\n    \n    \n    _instanceNumber: number\n    \n    _isThreadClosed = NO\n    \n    private _webWorkerHolder = UIKeyValueStringFilter._sharedWebWorkerHolder\n    \n    constructor(useSeparateWebWorkerHolder = NO) {\n        \n        \n        super()\n        \n        if (useSeparateWebWorkerHolder) {\n            \n            this._webWorkerHolder = { webWorker: new UIKeyValueStringFilterWebWorker() }\n            \n        }\n        \n        UIKeyValueStringFilter._instanceNumber = UIKeyValueStringFilter._instanceNumber + 1\n        this._instanceNumber = UIKeyValueStringFilter._instanceNumber\n        \n        if (IS_NOT(this._webWorkerHolder.webWorker.onmessage)) {\n            \n            this._webWorkerHolder.webWorker.onmessage = message => {\n                \n                this.isWorkerBusy = NO\n                this.postNextMessageIfNeeded()\n                \n                const key = \"\" + message.data.identifier + message.data.instanceIdentifier\n                \n                const completionFunction = this.completionFunctions[key]\n                \n                if (IS(completionFunction)) {\n                    \n                    //console.log(\"Filtering took \" + (Date.now() - startTime) + \" ms\");\n                    \n                    completionFunction(message.data.filteredData, message.data.filteredIndexes, message.data.identifier)\n                    \n                }\n                \n                delete this.completionFunctions[key]\n                \n                var asd = 1\n                \n            }\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get instanceIdentifier() {\n        \n        return this._instanceNumber\n        \n    }\n    \n    \n    get completionFunctions() {\n        \n        const key = \"UICore_completionFunctions\"\n        var result: {\n            \n            [x: string]: (filteredData: string[], filteredIndexes: number[], identifier: any) => void;\n            \n        } = this._webWorkerHolder[key]\n        \n        if (IS_NOT(result)) {\n            \n            result = {}\n            this._webWorkerHolder[key] = result\n            \n        }\n        \n        return result\n        \n    }\n    \n    get messagesToPost() {\n        \n        const key = \"UICore_messagesToPost\"\n        var result: any[] = this._webWorkerHolder[key]\n        \n        if (IS_NOT(result)) {\n            \n            result = []\n            this._webWorkerHolder[key] = result\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    set isWorkerBusy(isWorkerBusy: boolean) {\n        \n        this._webWorkerHolder[\"UICore_isWorking\"] = isWorkerBusy\n        \n    }\n    \n    get isWorkerBusy() {\n        \n        return IS(this._webWorkerHolder[\"UICore_isWorking\"])\n        \n    }\n    \n    \n    postNextMessageIfNeeded() {\n        \n        if (this.messagesToPost.length && IS_NOT(this.isWorkerBusy)) {\n            \n            this._webWorkerHolder.webWorker.postMessage(this.messagesToPost.firstElement)\n            this.messagesToPost.removeElementAtIndex(0)\n            \n            this.isWorkerBusy = YES\n            \n        }\n        \n    }\n    \n    \n    \n    \n    filterData(\n        filteringString: string,\n        data: any[],\n        excludedData: string[],\n        dataKeyPath: string,\n        identifier: any,\n        completion: (filteredData: string[], filteredIndexes: number[], identifier: any) => void\n    ) {\n        \n        \n        if (this._isThreadClosed) {\n            \n            return\n            \n        }\n        \n        \n        \n        const instanceIdentifier = this.instanceIdentifier\n        \n        const key = \"\" + identifier + instanceIdentifier\n        \n        this.completionFunctions[key] = completion\n        \n        \n        try {\n            \n            this.messagesToPost.push({\n                \n                \"filteringString\": filteringString,\n                \"data\": data,\n                \"excludedData\": excludedData,\n                \"dataKeyPath\": dataKeyPath,\n                \"identifier\": identifier,\n                \"instanceIdentifier\": instanceIdentifier\n                \n            })\n            \n            this.postNextMessageIfNeeded()\n            \n        } catch (exception) {\n            \n            completion([], [], identifier)\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    closeThread() {\n        \n        this._isThreadClosed = YES\n        \n        if (this._webWorkerHolder != UIKeyValueStringFilter._sharedWebWorkerHolder) {\n            \n            this._webWorkerHolder.webWorker.terminate()\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import inlineWorker from '__inline-worker'\nexport default function Worker() {\n  return inlineWorker(\"onmessage=function(e){var a=g(e.data.data,e.data.sortingInstructions);a.identifier=e.data.identifier,a.instanceIdentifier=e.data.instanceIdentifier,postMessage(a)};function v(e,a){for(var i=e.split(\\\".\\\"),r=a,n=0;n<i.length;n++){var u=i[n];if(u.substring(0,2)==\\\"[]\\\"){r=r[u.substring(2)];var t=i.slice(n+1).join(\\\".\\\"),o=r;r=o.map(function(d,s,f){var c=v(t,d);return c});break}r=(r||{})[u]}return r}function l(e,a,i){if(i.length==0)return 0;var r=i[0],n=1;r.direction==\\\"descending\\\"&&(n=-1);var u=e[r.keyPath],t=a[r.keyPath];if(u<t)return-1*n;if(u>t)return 1*n;if(i.length>1){var o=i.slice(1);return l(e,a,o)}return 0}function g(e,a){var i=e.map(function(t,o,d){var s={_UIKeyValueStringSorterWebWorkerSortingObjectIndex:o};return a.forEach(function(f,c,y){s[f.keyPath]=JSON.stringify(v(f.keyPath,t)||{}).toLowerCase()}),s}),r=i.sort(function(t,o){return l(t,o,a)}),n=r.map(function(t,o,d){var s=t._UIKeyValueStringSorterWebWorkerSortingObjectIndex;return s}),u={sortedData:n.map(function(t,o,d){return e[t]}),sortedIndexes:n};return u}\\n//# sourceMappingURL=data:application/json;base64,\\n\");\n}\n", "import { IS, IS_NOT, MAKE_ID, NO, UIObject, YES } from \"./UIObject\"\n// @ts-ignore\nimport UIKeyValueStringSorterWebWorker from \"./UIKeyValueStringSorterWebWorker.worker.js\"\n\n\nexport interface UIKeyValueStringSorterSortingInstruction {\n    \n    keyPath: string;\n    \n    dataType: string;\n    \n    direction: string;\n    \n    \n}\n\n\n\n\n\nexport class UIKeyValueStringSorter extends UIObject {\n    \n    \n    static _sharedWebWorkerHolder = { webWorker: new UIKeyValueStringSorterWebWorker() }\n    \n    static _instanceNumber = -1\n    \n    \n    _instanceNumber: number\n    \n    _isThreadClosed = NO\n    \n    private _webWorkerHolder = UIKeyValueStringSorter._sharedWebWorkerHolder\n    \n    \n    constructor(useSeparateWebWorkerHolder = NO) {\n        \n        \n        super()\n        \n        if (useSeparateWebWorkerHolder) {\n            \n            this._webWorkerHolder = { webWorker: new UIKeyValueStringSorterWebWorker() }\n            \n        }\n        \n        UIKeyValueStringSorter._instanceNumber = UIKeyValueStringSorter._instanceNumber + 1\n        this._instanceNumber = UIKeyValueStringSorter._instanceNumber\n        \n        if (IS_NOT(this._webWorkerHolder.webWorker.onmessage)) {\n            \n            this._webWorkerHolder.webWorker.onmessage = message => {\n    \n                this.isWorkerBusy = NO;\n                this.postNextMessageIfNeeded();\n                \n                const key = \"\" + message.data.identifier + message.data.instanceIdentifier\n        \n                const completionFunction = this.completionFunctions[key]\n        \n                if (IS(completionFunction)) {\n            \n                    //console.log(\"Filtering took \" + (Date.now() - startTime) + \" ms\");\n            \n                    completionFunction(message.data.sortedData, message.data.sortedIndexes, message.data.identifier)\n            \n                }\n                \n                delete this.completionFunctions[key];\n                \n                var asd = 1;\n                \n            }\n            \n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get instanceIdentifier() {\n        \n        return this._instanceNumber\n        \n    }\n    \n    \n    \n    \n    get completionFunctions() {\n        \n        const key = \"UICore_completionFunctions\";\n        var result: {\n        \n            [x: string]: (sortedData: any[], sortedIndexes: number[], identifier: any) => void\n            \n        } = this._webWorkerHolder[key];\n        \n        if (IS_NOT(result)) {\n            \n            result = {};\n            this._webWorkerHolder[key] = result;\n            \n        }\n        \n        return result;\n        \n    }\n    \n    get messagesToPost() {\n        \n        const key = \"UICore_messagesToPost\";\n        var result: any[] = this._webWorkerHolder[key];\n        \n        if (IS_NOT(result)) {\n            \n            result = [];\n            this._webWorkerHolder[key] = result;\n            \n        }\n        \n        return result;\n        \n    }\n    \n    \n    set isWorkerBusy(isWorkerBusy: boolean) {\n        \n        this._webWorkerHolder[\"UICore_isWorking\"] = isWorkerBusy;\n        \n    }\n    \n    get isWorkerBusy() {\n        \n        return IS(this._webWorkerHolder[\"UICore_isWorking\"]);\n        \n    }\n    \n    \n    postNextMessageIfNeeded() {\n        \n        if (this.messagesToPost.length && IS_NOT(this.isWorkerBusy)) {\n            \n            this._webWorkerHolder.webWorker.postMessage(this.messagesToPost.firstElement);\n            this.messagesToPost.removeElementAtIndex(0);\n            \n            this.isWorkerBusy = YES;\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    static dataType = {\n        \n        \"string\": \"string\"\n        \n    }\n    \n    \n    static direction = {\n        \n        \"descending\": \"descending\",\n        \"ascending\": \"ascending\"\n        \n    }\n    \n    \n    \n    \n    \n    sortData<T>(\n        data: T[],\n        sortingInstructions: UIKeyValueStringSorterSortingInstruction[],\n        identifier: any,\n        completion: (sortedData: T[], sortedIndexes: number[], identifier: any) => void\n    ) {\n        \n        \n        if (this._isThreadClosed) {\n            \n            return\n            \n        }\n    \n        \n        const instanceIdentifier = this.instanceIdentifier\n        \n        const key = \"\" + identifier + instanceIdentifier\n        \n        this.completionFunctions[key] = completion;\n        \n        \n        try {\n            \n            this.messagesToPost.push({\n                \n                \"data\": data,\n                \"sortingInstructions\": sortingInstructions,\n                \"identifier\": identifier,\n                \"instanceIdentifier\": instanceIdentifier\n                \n            });\n            \n            this.postNextMessageIfNeeded();\n            \n        } catch (exception) {\n            \n            completion([], [], identifier)\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    sortedData<T>(\n        data: T[],\n        sortingInstructions: UIKeyValueStringSorterSortingInstruction[],\n        identifier: any = MAKE_ID()\n    ) {\n    \n        const result: Promise<{\n        \n            sortedData: T[],\n            sortedIndexes: number[],\n            identifier: any\n        \n        }> = new Promise((resolve, reject) => {\n        \n            this.sortData(data, sortingInstructions, identifier, (sortedData, sortedIndexes, sortedIdentifier) => {\n    \n                if (sortedIdentifier == identifier) {\n    \n                    resolve({\n        \n                        sortedData: sortedData,\n                        sortedIndexes: sortedIndexes,\n                        identifier: sortedIdentifier\n        \n                    })\n        \n                }\n                \n                \n            \n            })\n        \n        \n        \n        })\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    closeThread() {\n        \n        this._isThreadClosed = YES\n        \n        if (this._webWorkerHolder != UIKeyValueStringSorter._sharedWebWorkerHolder) {\n            \n            this._webWorkerHolder.webWorker.terminate();\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { IS_FIREFOX } from \"./ClientCheckers\"\nimport { UIColor } from \"./UIColor\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { IS, nil, NO, YES } from \"./UIObject\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\nexport class UIDialogView<ViewType extends UIView = UIView> extends UIView {\n    \n    _isAUIDialogView = YES\n    \n    _view: ViewType = nil\n    \n    _appearedAnimated: boolean\n    \n    animationDuration: number = 0.25\n    \n    _zIndex: number = 100\n    \n    isVisible: boolean = NO\n    \n    dismissesOnTapOutside = YES\n    \n    constructor(elementID?: string, viewHTMLElement?: HTMLElement) {\n        \n        \n        super(elementID, viewHTMLElement)\n        \n        this.addTargetForControlEvent(\n            UIView.controlEvent.PointerTap,\n            function (this: UIDialogView, sender: UIView, event: Event) {\n                \n                this.didDetectTapOutside(sender, event)\n                \n            }.bind(this)\n        )\n        \n        this.backgroundColor = UIColor.colorWithRGBA(0, 10, 25).colorWithAlpha(0.75) //CBColor.primaryContentColor.colorWithAlpha(0.75)\n        \n        this.zIndex = this._zIndex\n        \n    }\n    \n    \n    \n    didDetectTapOutside(sender: UIView, event: Event) {\n        \n        if (event.target == this.viewHTMLElement && this.dismissesOnTapOutside) {\n            this.dismiss(this._appearedAnimated)\n        }\n        \n    }\n    \n    \n    set zIndex(zIndex: number) {\n        \n        this._zIndex = zIndex\n        this.style.zIndex = \"\" + zIndex\n        \n    }\n    \n    get zIndex() {\n        \n        return this._zIndex\n        \n    }\n    \n    \n    \n    set view(view: ViewType) {\n        \n        this._view.removeFromSuperview()\n        \n        this._view = view\n        \n        this.addSubview(view)\n        \n    }\n    \n    \n    get view() {\n        \n        return this._view\n        \n    }\n    \n    \n    \n    willAppear(animated: boolean = NO) {\n        \n        if (animated) {\n            \n            this.style.opacity = \"0\"\n            \n        }\n        \n        this.style.height = \"\"\n        \n        this._frame = null\n        \n    }\n    \n    \n    animateAppearing() {\n        \n        this.style.opacity = \"1\"\n        \n    }\n    \n    animateDisappearing() {\n        \n        this.style.opacity = \"0\"\n        \n    }\n    \n    \n    \n    showInView(containerView: UIView, animated: boolean) {\n        \n        \n        animated = (animated && !IS_FIREFOX)\n        \n        this._appearedAnimated = animated\n        \n        this.willAppear(animated)\n        \n        \n        containerView.addSubview(this)\n        \n        if (animated) {\n            \n            this.layoutSubviews()\n            \n            UIView.animateViewOrViewsWithDurationDelayAndFunction(\n                this,\n                this.animationDuration,\n                0,\n                undefined,\n                function () {\n                    \n                    \n                    this.animateAppearing()\n                    \n                    \n                }.bind(this),\n                nil\n            )\n            \n            \n        }\n        else {\n            \n            this.setNeedsLayout()\n            \n        }\n        \n        this.isVisible = YES\n        \n    }\n    \n    \n    \n    showInRootView(animated: boolean) {\n        \n        this.showInView(UICoreValues.main.rootViewController.view, animated)\n        \n    }\n    \n    \n    \n    dismiss(animated?: boolean) {\n        \n        \n        animated = (animated && !IS_FIREFOX)\n        \n        if (animated == undefined) {\n            \n            animated = this._appearedAnimated\n            \n        }\n        \n        if (animated) {\n            \n            UIView.animateViewOrViewsWithDurationDelayAndFunction(\n                this,\n                this.animationDuration,\n                0,\n                undefined,\n                function () {\n                    \n                    this.animateDisappearing()\n                    \n                }.bind(this),\n                function () {\n                    \n                    if (this.isVisible == NO) {\n                        \n                        this.removeFromSuperview()\n                        \n                    }\n                    \n                }.bind(this)\n            )\n            \n        }\n        else {\n            \n            this.removeFromSuperview()\n            \n        }\n        \n        this.isVisible = NO\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UICoreValues.broadcastEventName.WindowDidResize) {\n            \n            this.setNeedsLayout()\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        \n        if (!IS(this.view)) {\n            \n            return\n            \n        }\n        \n        //this.frame = this.superview.bounds;\n        \n        this.setPosition(0, 0, 0, 0, 0, \"100%\")\n        this.setPosition(0, 0, 0, 0, UIView.pageHeight, \"100%\")\n    \n        const bounds = this.bounds\n    \n        const margin = 20\n    \n        //this.view.centerInContainer();\n        \n        this.view.style.position = \"relative\"\n        \n        // this.view.style.maxHeight = \"\" + (bounds.height - margin * 2).integerValue + \"px\";\n        // this.view.style.maxWidth = \"\" + (bounds.width - margin * 2).integerValue + \"px\";\n        \n        \n        \n        \n        // var viewIntrinsicRectangle = this.view.intrinsicContentSize();\n        // this.view.frame = new UIRectangle((bounds.width - viewIntrinsicRectangle.width)*0.5,  )\n        \n        super.layoutSubviews()\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { nil } from \"./UIObject\"\nimport { UIView, UIViewAddControlEventTargetObject } from \"./UIView\"\n\n\nexport class UIDateTimeInput extends UIView {\n    \n    \n    \n    \n    \n    constructor(elementID: string, type: string = UIDateTimeInput.type.DateTime) {\n        \n        super(elementID, nil, \"input\")\n        \n        this.viewHTMLElement.setAttribute(\"type\", type)\n        \n        this.viewHTMLElement.onchange = (event) => {\n            this.sendControlEventForKey(UIDateTimeInput.controlEvent.ValueChange, event)\n        }\n        \n    }\n    \n    \n    \n    \n    \n    static controlEvent = Object.assign({}, UIView.controlEvent, {\n        \n        \"ValueChange\": \"ValueChange\"\n        \n    })\n    \n    get addControlEventTarget(): UIViewAddControlEventTargetObject<typeof UIDateTimeInput.controlEvent> {\n        \n        return super.addControlEventTarget as any\n        \n    }\n    \n    \n    \n    \n    \n    static type = {\n        \n        \"Date\": \"date\",\n        \"Time\": \"time\",\n        \"DateTime\": \"datetime\"\n        \n        \n    }\n    \n    \n    static format = {\n        \n        \"European\": \"DD-MM-YYYY\",\n        \"ISOComputer\": \"YYYY-MM-DD\",\n        \"American\": \"MM/DD/YYYY\"\n        \n    }\n    \n    \n    \n    \n    \n    get date() {\n        \n        const result = new Date((this.viewHTMLElement as HTMLInputElement).value)\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import \"./UICoreExtensions\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { nil, NO, UIObject } from \"./UIObject\"\nimport { UIRoute } from \"./UIRoute\"\nimport { UIView } from \"./UIView\"\nimport { UIViewController } from \"./UIViewController\"\n\n\n\nexport class UICore extends UIObject {\n    \n    rootViewController: UIViewController = nil\n    \n    \n    constructor(rootDivElementID: string, rootViewControllerClass: typeof UIViewController) {\n        \n        super()\n        \n        UICoreValues.RootViewControllerClass = rootViewControllerClass\n        UICoreValues.main = this\n        \n        const rootViewElement = document.getElementById(rootDivElementID)\n        const rootView = new UIView(rootDivElementID, rootViewElement)\n        rootView.pausesPointerEvents = NO //YES;\n        \n        if (UICoreValues.RootViewControllerClass) {\n            \n            if (!(UICoreValues.RootViewControllerClass.prototype instanceof UIViewController) ||\n                (UICoreValues.RootViewControllerClass as any) === UIViewController) {\n                \n                console.log(\n                    \"Error, UICore.RootViewControllerClass must be a or a subclass of UIViewController, falling back to UIViewController.\")\n                \n                UICoreValues.RootViewControllerClass = UIViewController\n                \n            }\n            \n            this.rootViewController = new UICoreValues.RootViewControllerClass(rootView)\n            \n        }\n        else {\n            \n            this.rootViewController = new UIViewController(rootView)\n            \n        }\n        \n        this.rootViewController.viewWillAppear()\n        this.rootViewController.viewDidAppear()\n        \n        \n        this.rootViewController.view.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (sender, event) {\n                \n                (document.activeElement as HTMLElement).blur()\n                \n            }\n        )\n        \n        \n        \n        const windowDidResize = function (this: UICore) {\n            \n            // Doing layout two times to prevent page scrollbars from confusing the layout\n            this.rootViewController._triggerLayoutViewSubviews()\n            UIView.layoutViewsIfNeeded()\n            \n            this.rootViewController._triggerLayoutViewSubviews()\n            //UIView.layoutViewsIfNeeded()\n            \n            this.rootViewController.view.broadcastEventInSubtree({\n                \n                name: UICoreValues.broadcastEventName.WindowDidResize,\n                parameters: nil\n                \n            })\n            \n        }\n        \n        window.addEventListener(\"resize\", windowDidResize.bind(this))\n        \n        const didScroll = function (this: UICore) {\n            \n            //code\n            \n            this.rootViewController.view.broadcastEventInSubtree({\n                \n                name: UIView.broadcastEventName.PageDidScroll,\n                parameters: nil\n                \n            })\n            \n            \n            \n        }.bind(this)\n        \n        window.addEventListener(\"scroll\", didScroll, false)\n        \n        const hashDidChange = function (this: UICore) {\n            \n            //code\n            \n            this.rootViewController.handleRouteRecursively(UIRoute.currentRoute)\n            \n            this.rootViewController.view.broadcastEventInSubtree({\n                \n                name: UICoreValues.broadcastEventName.RouteDidChange,\n                parameters: nil\n                \n            })\n            \n            \n        }.bind(this)\n        \n        window.addEventListener(\"hashchange\", hashDidChange.bind(this), false)\n        \n        hashDidChange()\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    static loadClass(className: string) {\n        \n        if (window[className]) {\n            return\n        }\n        \n        document.writeln(\"<script type='text/javascript' src='dist/UICore/\" + className + \".js'></script>\")\n        \n    }\n    \n    \n}\n\n\nUICoreValues.RootViewControllerClass = nil\n\n\nArray.prototype.indexOf || (Array.prototype.indexOf = function (d, e) {\n    var a\n    if (null == this) {\n        throw new TypeError(\"\\\"this\\\" is null or not defined\")\n    }\n    const c = Object(this),\n        b = c.length >>> 0\n    if (0 === b) {\n        return -1\n    }\n    a = +e || 0\n    Infinity === Math.abs(a) && (a = 0)\n    if (a >= b) {\n        return -1\n    }\n    for (a = Math.max(0 <= a ? a : b - Math.abs(a), 0); a < b;) {\n        if (a in c && c[a] === d) {\n            return a\n        }\n        a++\n    }\n    return -1\n})\n\n\n\n\n\n\n\n\n\n\n", "import { NO, YES } from \"./UIObject\"\nimport { UIView } from \"./UIView\"\n\n\nexport class UIActionIndicator extends UIView {\n    \n    \n    indicatorView: UIView\n    \n    _size: number = 50\n    \n    constructor(elementID?: string) {\n        \n        super(elementID)\n        \n        this.indicatorView = new UIView(this.elementID + \"IndicatorView\")\n        this.indicatorView.viewHTMLElement.classList.add(\"LukeHaasLoader\")\n        this.addSubview(this.indicatorView)\n        \n        this.hidden = YES\n        \n    }\n    \n    \n    \n    \n    \n    set size(size: number) {\n        \n        this._size = size\n        \n        this.setNeedsLayoutUpToRootView()\n        \n    }\n    \n    get size() {\n        \n        return this._size\n        \n    }\n    \n    \n    \n    set hidden(hidden: boolean) {\n        \n        super.hidden = hidden\n        \n        if (hidden) {\n            \n            this.indicatorView.removeFromSuperview()\n            \n        }\n        else {\n            \n            this.addSubview(this.indicatorView)\n            \n        }\n        \n    }\n    \n    start() {\n        \n        this.hidden = NO\n        \n    }\n    \n    stop() {\n        \n        this.hidden = YES\n        \n    }\n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n        //this.indicatorView.centerInContainer();\n        \n        this.indicatorView.style.height = \"\" + this._size.integerValue + \"px\"\n        this.indicatorView.style.width = \"\" + this._size.integerValue + \"px\"\n    \n        const minSize = Math.min(this.bounds.height, this.bounds.width)\n    \n        this.indicatorView.style.maxHeight = \"\" + minSize.integerValue + \"px\"\n        this.indicatorView.style.maxWidth = \"\" + minSize.integerValue + \"px\"\n    \n        const size = Math.min(this._size, minSize)\n    \n        this.indicatorView.style.left = \"\" + ((bounds.width - size) * 0.5 - 11).integerValue + \"px\"\n        this.indicatorView.style.top = \"\" + ((bounds.height - size) * 0.5 - 11).integerValue + \"px\"\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nexport interface UILanguageService {\n    \n    updateCurrentLanguageKey();\n    \n    currentLanguageKey: string;\n    \n    stringForKey(\n        key: string,\n        languageName: string,\n        defaultString: string,\n        parameters: { [x: string]: string | UILocalizedTextObject; }\n    ): string | undefined;\n    \n    stringForCurrentLanguage(localizedTextObject: UILocalizedTextObject);\n    \n    \n    \n}\n\n\nexport interface UILocalizedTextObject {\n    \n    [key: string]: string;\n    \n}\n", "import { UIColor } from \"./UIColor\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { UIDialogView } from \"./UIDialogView\"\nimport { EXTEND, FIRST, FIRST_OR_NIL, IS, IS_NOT, LAZY_VALUE, nil, NO, UIObject, wrapInNil, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIRoute } from \"./UIRoute\"\nimport { UIView } from \"./UIView\"\nimport { UIViewController } from \"./UIViewController\"\n\n\n\n\ninterface UIRootViewControllerLazyViewControllerObject<T extends typeof UIViewController> {\n    instance: InstanceType<T>;\n    class: T;\n    shouldShow: () => (Promise<boolean> | boolean);\n    isInitialized: boolean\n}\n\n\ninterface UIRootViewControllerLazyViewControllersObject {\n    [x: string]: UIRootViewControllerLazyViewControllerObject<typeof UIViewController>\n}\n\n\ninterface UIRootViewControllerLazyContentViewControllersObject extends UIRootViewControllerLazyViewControllersObject {\n    mainViewController: UIRootViewControllerLazyViewControllerObject<typeof UIViewController>\n}\n\n\n\n\n\nexport class UIRootViewController extends UIViewController {\n    \n    topBarView: UIView = nil\n    backgroundView: UIView = new UIView(this.view.elementID + \"BackgroundView\").configuredWithObject({\n        style: {\n            background: \"linear-gradient(\" +\n                UIColor.whiteColor.stringValue + \", \" + UIColor.blueColor.stringValue + \")\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\"\n        }\n    })\n    bottomBarView: UIView = nil\n    \n    _contentViewController: UIViewController\n    contentViewControllers: UIRootViewControllerLazyContentViewControllersObject = {\n        mainViewController: this.lazyViewControllerObjectWithClass(UIViewController)\n    }\n    \n    _detailsDialogView: UIDialogView = new UIDialogView(this.view.elementID + \"DetailsDialogView\")\n        .configuredWithObject({\n            dismiss: EXTEND((animated: boolean) => {\n                    const route = UIRoute.currentRoute\n                    this.detailsViewControllers.allValues.forEach(\n                        value => route.routeByRemovingComponentNamed(value.class.routeComponentName)\n                    )\n                    route.apply()\n                }\n            )\n        })\n    _detailsViewController: UIViewController\n    detailsViewControllers: UIRootViewControllerLazyViewControllersObject = {}\n    \n    \n    constructor(view: UIView) {\n        \n        super(view)\n        \n        this.view.addSubview(this.backgroundView)\n        \n    }\n    \n    \n    lazyViewControllerObjectWithClass<T extends typeof UIViewController>(\n        classObject: T,\n        shouldShow: () => (Promise<boolean> | boolean) = () => YES\n    ): UIRootViewControllerLazyViewControllerObject<T> {\n        const result: UIRootViewControllerLazyViewControllerObject<T> = {\n            class: classObject,\n            instance: nil,\n            shouldShow: shouldShow,\n            isInitialized: NO\n        }\n        UIObject.configureWithObject(result, {\n            // @ts-ignore\n            instance: LAZY_VALUE(\n                () => {\n                    result.isInitialized = YES\n                    return new classObject(\n                        new UIView(classObject.name.replace(\"ViewController\", \"View\"))\n                    )\n                }\n            )\n        })\n        return result\n    }\n    \n    \n    \n    \n    \n    async handleRoute(route: UIRoute) {\n        \n        super.handleRoute(route)\n        \n        UICoreValues.languageService.updateCurrentLanguageKey()\n        \n        // Show content view\n        await this.setContentViewControllerForRoute(route)\n        \n        await this.setDetailsViewControllerForRoute(route)\n        \n    }\n    \n    \n    async setContentViewControllerForRoute(route: UIRoute) {\n        const contentViewControllerObject = FIRST(\n            await this.contentViewControllers.allValues.findAsyncSequential(\n                async value => IS(route.componentWithViewController(value.class)) && await value.shouldShow()\n            ),\n            this.contentViewControllers.mainViewController\n        )\n        this.contentViewController = contentViewControllerObject.instance\n    }\n    \n    async setDetailsViewControllerForRoute(route: UIRoute) {\n        const detailsViewControllerObject = FIRST_OR_NIL(\n            await this.detailsViewControllers.allValues.findAsyncSequential(\n                async value => IS(route.componentWithViewController(value.class)) && await value.shouldShow()\n            )\n        )\n        if (IS(route) && IS(this.detailsViewController) && IS_NOT(detailsViewControllerObject)) {\n            this.detailsViewController = nil\n            this._detailsDialogView.dismiss()\n            this.view.setNeedsLayout()\n            return\n        }\n        this.detailsViewController = detailsViewControllerObject.instance\n    }\n    \n    get contentViewController(): UIViewController {\n        return this._contentViewController || nil\n    }\n    \n    set contentViewController(controller: UIViewController) {\n        \n        if (this.contentViewController == controller) {\n            return\n        }\n        \n        if (this.contentViewController) {\n            this.removeChildViewController(this.contentViewController)\n        }\n        \n        this._contentViewController = controller\n        this.addChildViewControllerInContainer(controller, this.backgroundView)\n        this._triggerLayoutViewSubviews()\n        \n        this.contentViewController.view.style.boxShadow = \"0 3px 6px 0 rgba(0, 0, 0, 0.1)\"\n        \n        this.view.setNeedsLayout()\n        \n    }\n    \n    \n    get detailsViewController(): UIViewController {\n        return this._detailsViewController\n    }\n    \n    set detailsViewController(controller: UIViewController) {\n        \n        if (this.detailsViewController == controller) {\n            return\n        }\n        \n        if (this.detailsViewController) {\n            this.removeChildViewController(this.detailsViewController)\n        }\n        \n        this._detailsViewController = controller\n        \n        if (!IS(controller)) {\n            return\n        }\n        \n        this.addChildViewControllerInDialogView(controller, this._detailsDialogView)\n        this._triggerLayoutViewSubviews()\n        \n        this.detailsViewController.view.style.borderRadius = \"5px\"\n        \n        this._detailsDialogView.showInView(this.view, YES)\n        \n    }\n    \n    updatePageScale() {\n        \n        const actualPageWidth = (UIView.pageWidth * UIView.pageScale).integerValue\n        const minScaleWidth = 700\n        const maxScaleWidth = 1500\n        const minScale = 0.7\n        const maxScale = 1\n        let scale = minScale + (maxScale - minScale) *\n            ((actualPageWidth - minScaleWidth) / (maxScaleWidth - minScaleWidth))\n        scale = Math.min(scale, maxScale)\n        scale = Math.max(scale, minScale)\n        \n        UIView.pageScale = scale\n        \n    }\n    \n    \n    performDefaultLayout(\n        paddingLength = 20,\n        contentViewMaxWidth = 1000,\n        topBarHeight = 65,\n        bottomBarMinHeight = 100\n    ) {\n        \n        // View bounds\n        const bounds = this.view.bounds\n        \n        this.topBarView.frame = new UIRectangle(0, 0, topBarHeight, bounds.width)\n        \n        this.backgroundView.style.top = \"\" + this.topBarView.frame.height.integerValue + \"px\"\n        this.backgroundView.style.width = \"100%\"\n        this.backgroundView.style.height = \"fit-content\"\n        this.backgroundView.style.minHeight = \"\" +\n            (bounds.height - this.topBarView.frame.height - this.bottomBarView.frame.height).integerValue + \"px\"\n        \n        this.contentViewController.view.style.position = \"relative\"\n        this.contentViewController.view.style.bottom = \"0\"\n        this.contentViewController.view.style.top = \"0\"\n        this.contentViewController.view.style.width = \"100%\"\n        this.contentViewController.view.setPaddings(nil, nil, paddingLength, nil)\n        this.contentViewController.view.setNeedsLayout()\n        \n        if (contentViewMaxWidth < this.backgroundView.bounds.width) {\n            \n            this.contentViewController.view.style.marginBottom = \"\" +\n                Math.min(\n                    (this.backgroundView.bounds.width - contentViewMaxWidth) * 0.5,\n                    paddingLength\n                ).integerValue + \"px\"\n            this.contentViewController.view.style.marginTop = \"\" +\n                Math.min(\n                    (this.backgroundView.bounds.width - contentViewMaxWidth) * 0.5,\n                    paddingLength\n                ).integerValue + \"px\"\n            this.contentViewController.view.style.maxWidth = contentViewMaxWidth + \"px\"\n            \n            this.contentViewController.view.style.left = \"\" +\n                ((this.backgroundView.bounds.width - this.contentViewController.view.bounds.width) * 0.5).integerValue +\n                \"px\"\n            \n        }\n        else {\n            \n            this.contentViewController.view.style.margin = \"\"\n            this.contentViewController.view.style.left = \"\"\n            this.contentViewController.view.style.maxWidth = \"\"\n            \n        }\n        \n        // Triggering immediate layout to ensure that the intrinsicContentHeight calculations work well\n        this.contentViewController._triggerLayoutViewSubviews()\n        \n        let contentViewControllerViewHeight = this.contentViewController.view.intrinsicContentHeight(\n            this.contentViewController.view.bounds.width\n        )\n        \n        const detailsViewControllerViewHeight = FIRST_OR_NIL(this.detailsViewController).view.intrinsicContentHeight(\n            this.contentViewController.view.bounds.width)\n        if (detailsViewControllerViewHeight > contentViewControllerViewHeight) {\n            contentViewControllerViewHeight = detailsViewControllerViewHeight\n        }\n        \n        \n        this.contentViewController.view.style.height = \"\" + contentViewControllerViewHeight.integerValue + \"px\"\n        this.contentViewController.view.setNeedsLayout()\n        \n        if (IS(this.detailsViewController)) {\n            \n            this.contentViewController.view.style.transform = \"translateX(\" + 0 + \"px)\"\n            \n            this.detailsViewController.view.frame = this.backgroundView.frame.rectangleWithInset(\n                paddingLength\n            ).rectangleWithWidth(\n                this.contentViewController.view.bounds.width,\n                0.5\n            ).rectangleWithHeight(\n                Math.max(\n                    this.detailsViewController.view.intrinsicContentHeight(\n                        this.detailsViewController.view.bounds.width\n                    ),\n                    this.contentViewController.view.bounds.height\n                )\n            )\n            \n        }\n        else {\n            \n            this.contentViewController.view.style.transform = \"translateX(\" + 0 + \"px)\"\n            \n        }\n        \n        \n        this.bottomBarView.frame = this.backgroundView.frame.rectangleWithY(\n            this.backgroundView.frame.max.y\n        ).rectangleWithHeight(\n            Math.max(bottomBarMinHeight, this.bottomBarView.intrinsicContentHeight(this.backgroundView.frame.width))\n        )\n        \n        \n        wrapInNil(this._detailsDialogView).setMaxSizes(this.bottomBarView.frame.max.y)\n        \n    }\n    \n    \n}\n", "export * from \"./UIObject\"\nexport * from \"./UIView\"\nexport * from \"./UIViewController\"\nexport * from \"./UITimer\"\nexport * from \"./UITextArea\"\nexport * from \"./UITextView\"\nexport * from \"./UITextField\"\nexport * from \"./UITableView\"\nexport * from \"./UIStringFilter\"\nexport * from \"./UISlideScrollerView\"\nexport * from \"./UIScrollView\"\nexport * from \"./UIRoute\"\nexport * from \"./UIRectangle\"\nexport * from \"./UIPoint\"\nexport * from \"./UINativeScrollView\"\nexport * from \"./UILink\"\nexport * from \"./UILinkButton\"\nexport * from \"./UILayoutGrid\"\nexport * from \"./UIKeyValueStringFilter\"\nexport * from \"./UIKeyValueStringSorter\"\nexport * from \"./UIImageView\"\nexport * from \"./UIDialogView\"\nexport * from \"./UIDateTimeInput\"\nexport * from \"./UICoreExtensions\"\nexport * from \"./UICore\"\nexport * from \"./UIColor\"\nexport * from \"./UIBaseButton\"\nexport * from \"./UIButton\"\nexport * from \"./UIActionIndicator\"\nexport * from \"./UICoreExtensionValueObject\"\nexport * from \"./UIInterfaces\"\nexport * from \"./ClientCheckers\"\nexport * from \"./UICoreValues\"\nexport * from \"./UIRootViewController\"\n\n\n\n\n\n\n\n\n", "import {\n    IS,\n    nil,\n    UICore,\n    UIRootViewController,\n    UIRoute,\n    UITextView,\n    UIView,\n    UIViewBroadcastEvent,\n    UIViewController,\n    YES\n} from \"uicore-ts\"\nimport { BottomBarView } from \"./BottomBarView\"\nimport { CBColor } from \"./CBCore/CBColor\"\nimport { CBCore } from \"./CBCore/CBCore\"\nimport { SocketClient } from \"./CBCore/CBSocketClient\"\nimport { LanguageService } from \"./Custom components/LanguageService\"\nimport { InformationViewController } from \"./InformationViewController\"\nimport { InternalDropdownSettingsViewController } from \"./InternalDropdownSettingsViewController\"\nimport { InternalLanguageSettingsViewController } from \"./InternalLanguageSettingsViewController\"\nimport { LanguagesDialogView } from \"./LanguagesDialogView\"\nimport { RootViewParameters } from \"./RootViewParameters\"\nimport { SomeContentViewController } from \"./SomeContentViewController\"\nimport { TopBarView } from \"./TopBarView\"\n\n\nclass RootViewController extends UIRootViewController {\n    \n    readonly bottomBarView: BottomBarView\n    readonly topBarView: TopBarView\n    \n    readonly languagesDialogViewController = new UIViewController(new LanguagesDialogView(\"LanguagesDialogView\"))\n    \n    readonly contentViewControllers = {\n        \n        informationViewController: this.lazyViewControllerObjectWithClass(InformationViewController),\n        internalDropdownSettingsViewController: this.lazyViewControllerObjectWithClass(\n            InternalDropdownSettingsViewController,\n            async () =>\n                IS((await SocketClient.AreCBInternalSettingsAvailableForCurrentUser()).result) || YES\n        ),\n        internalLanguageSettingsViewController: this.lazyViewControllerObjectWithClass(\n            InternalLanguageSettingsViewController,\n            async () =>\n                IS((await SocketClient.AreCBInternalSettingsAvailableForCurrentUser()).result) || YES\n        ),\n        mainViewController: this.lazyViewControllerObjectWithClass(SomeContentViewController)\n        \n    }\n    \n    \n    constructor(view) {\n        \n        // Calling super\n        super(view)\n        \n        // Instance variables, initialize to nil or empty function, do not leave undefined to avoid excessive if blocks\n        // this._firstView = nil;\n        // this._secondView = nil;\n        // this._testView = nil;\n        // this._button = nil;\n        \n        // The nil object avoids unnecessary crashes by allowing you to call any function or access any variable on it, returning nil\n        // Define properties with get and set functions, so they can be accessed and set like variables\n        // Name variables that should be private, like property variables, with a _ sign, this also holds for private functions\n        // Avoid accessing variables and functions named with _ from outside as this creates strong coupling and hinders stability\n        \n        // Code for further setup if necessary\n        \n        UITextView.defaultTextColor = CBColor.primaryContentColor\n        \n        // Top bar\n        this.topBarView = new TopBarView(\"TopBarView\", nil)\n        this.topBarView.titleLabel.setText(\"topBarTitle\", LanguageService.languageValues.en.topBarTitle)\n        this.view.addSubview(this.topBarView)\n        \n        // Bottom bar\n        this.bottomBarView = new BottomBarView(\"BottomBarView\").configuredWithObject({\n            style: { overflow: \"hidden\" }\n        })\n        this.view.addSubview(this.bottomBarView)\n        \n        // Initializing CBCore if needed\n        CBCore.sharedInstance\n        \n    }\n    \n    async viewDidAppear() {\n        \n        await super.viewDidAppear()\n        \n        this.topBarView.setNeedsLayout()\n        \n    }\n    \n    \n    async handleRoute(route: UIRoute) {\n        \n        await super.handleRoute(route)\n        \n        LanguageService.updateCurrentLanguageKey(route)\n        \n        const currentURL = \"\" + window.location\n        if (IS(currentURL)) {\n            SocketClient.RouteDidChange(currentURL).then(nil)\n        }\n        \n    }\n    \n    \n    viewDidReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.viewDidReceiveBroadcastEvent(event)\n        \n        if ([CBCore.broadcastEventName.userDidLogIn, CBCore.broadcastEventName.userDidLogOut].contains(event.name)) {\n            \n            this.handleRoute(UIRoute.currentRoute)\n            \n        }\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged) {\n            \n            this.detailsViewController = nil\n            this._detailsDialogView.dismiss()\n            this._triggerLayoutViewSubviews()\n            \n        }\n        \n    }\n    \n    \n    updateViewStyles() {\n    \n    }\n    \n    viewDidLayoutSubviews() {\n        \n        super.viewDidLayoutSubviews()\n        \n    }\n    \n    \n    layoutViewSubviews() {\n        \n        super.layoutViewSubviews()\n        \n        this.updatePageScale()\n    \n        const contentViewMaxWidth = 1000\n        const topBarHeight = 65\n        const bottomBarMinHeight = 100\n        this.performDefaultLayout(\n            RootViewParameters.paddingLength,\n            contentViewMaxWidth,\n            topBarHeight,\n            bottomBarMinHeight\n        )\n        \n    }\n    \n}\n\n\n\n\n\ntry {\n    \n    // @ts-ignore\n    const languageKey = (localStorage.getItem(\"CBLanguageKey\") || CBCoreInitializerObject.defaultLanguageKey || \"en\").replace(\n        \"\\\"\",\n        \"\"\n    ).replace(\"\\\"\", \"\")\n    \n    const loadingLabelElement = document.getElementById(\"LoadingLabel\")\n    \n    const loadingTextObject = { \"en\": \"Loading.\" }\n    \n    loadingLabelElement.innerHTML = (loadingTextObject[languageKey] || loadingTextObject[\"en\"])\n    \n    new UICore(\"RootView\", RootViewController)\n    \n    const loadingViewElement = document.getElementById(\"LoadingView\")\n    const rootViewElement = document.getElementById(\"RootView\")\n    rootViewElement.removeChild(loadingViewElement)\n    \n} catch (exception) {\n    \n    console.log(exception)\n    \n    //window.location = \"/unsupported\";\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIColor, UIView } from \"uicore-ts\"\n\n\n\n\n\nexport class BottomBarView extends UIView {\n    \n    //label: UITextView;\n    \n    constructor(elementID: string) {\n        \n        super(elementID)\n        \n    }\n    \n    \n    initView(elementID: string, viewHTMLElement: HTMLElement) {\n        \n        super.initView(elementID, viewHTMLElement)\n        \n        this.backgroundColor = UIColor.colorWithRGBA(50, 50, 50)\n        \n        this.setInnerHTML(\"bottomBarContent\", \"bottomBarContent\")\n        \n        \n        \n        \n        \n        // this.label = new UITextView(\"BottomBarLabel\");\n        // this.label.setText(\"bottomBarLabelText\",\"Bottom bar for contact information and such\");\n        // this.label.textColor = UIColor.whiteColor;\n        // this.label.textAlignment = UITextView.textAlignment.center;\n        \n        // this.addSubview(this.label);\n        \n    }\n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        //this.label.centerInContainer();\n        \n    }\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIColor } from \"uicore-ts\"\n\n\n\n\n\nexport class CBColor extends UIColor {\n    \n    \n    \n    \n    \n    constructor(stringValue: string) {\n        \n        super(stringValue)\n        \n    }\n    \n    \n    \n    \n    \n    static get primaryTintColor() {\n        \n        return new CBColor(\"rgba(52, 127, 230, 1)\")\n        \n    }\n    \n    static get secondaryTintColor() {\n        \n        return new CBColor(\"rgba(0, 196, 212, 1)\")\n        \n    }\n    \n    \n    static get primaryContentColor() {\n        \n        return new CBColor(\"rgb(35, 35, 35)\")\n        \n    }\n    \n    static get greenTintColor() {\n        \n        return new CBColor(\"rgba(51, 188, 125, 1)\");\n        \n    }\n    \n    static get redTintColor() {\n        \n        return new CBColor(\"rgba(236, 88, 111, 1)\");\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    FIRST, FIRST_OR_NIL,\n    IS,\n    IS_NOT,\n    nil,\n    UICore, UICoreValues, UILink,\n    UIObject,\n    UIRoute,\n    UIViewBroadcastEvent,\n    UIViewController,\n    YES\n} from \"uicore-ts\"\nimport { LanguageService } from \"../Custom components/LanguageService\"\nimport { CBUserProfile } from \"./CBDataInterfaces\"\nimport { CBServerClient } from \"./CBServerClient\"\nimport { CBSocketClient } from \"./CBSocketClient\"\n\n\ndeclare const CBCoreInitializerObject: any\n\n\nexport class CBCore extends UIObject {\n    \n    private static _sharedInstance: CBCore\n    \n    _isUserLoggedIn: boolean = nil\n    _cachedMinimizedChatInquiryIDs: string[] = nil\n    _socketClient: CBSocketClient = new CBSocketClient(this)\n    _serverClient: CBServerClient = new CBServerClient(this)\n    \n    _functionsToCallForEachSocketClient: (() => void)[] = []\n    \n    _models: any[] = []\n    \n    constructor() {\n        \n        super()\n        \n        if (CBCoreInitializerObject) {\n            \n            LanguageService.useStoredLanguageValues(CBCoreInitializerObject.languageValues)\n            \n        }\n        \n        \n        window.addEventListener(\"storage\", function (this: CBCore, event: StorageEvent) {\n            \n            if (event.newValue == event.oldValue) {\n                \n                return\n                \n            }\n            \n            //console.log(\"\" + event.key + \" changed to \" + event.newValue + \" from \" + event.oldValue);\n            \n            \n            \n            if (event.key == \"CBLanguageKey\") {\n                \n                this.didSetLanguageKey()\n                \n            }\n            \n        }.bind(this))\n        \n        \n        //this.checkIfUserIsAuthenticated();\n        \n        this.didSetLanguageKey()\n        \n        \n    }\n    \n    \n    \n    \n    \n    static get sharedInstance() {\n        if (!CBCore._sharedInstance) {\n            CBCore._sharedInstance = new CBCore()\n        }\n        return CBCore._sharedInstance\n    }\n    \n    \n    \n    \n    \n    static broadcastEventName = {\n        \n        \"userDidLogIn\": \"UserDidLogIn\",\n        \"userDidLogOut\": \"UserDidLogOut\"\n        \n    }\n    \n    broadcastMessageInRootViewTree(message: UIViewBroadcastEvent) {\n        \n        (UICoreValues.main.rootViewController as UIViewController).view.broadcastEventInSubtree(message)\n        \n    }\n    \n    \n    \n    \n    get socketClient() {\n        return this._socketClient\n    }\n    \n    get serverClient() {\n        return this._serverClient\n    }\n    \n    \n    \n    \n    \n    set isUserLoggedIn(isUserLoggedIn: boolean) {\n        \n        const previousValue = this.isUserLoggedIn\n        \n        \n        localStorage.setItem(\"CBIsUserLoggedIn\", \"\" + isUserLoggedIn)\n        \n        \n        //this._isUserLoggedIn = isUserLoggedIn;\n        \n        this.didSetIsUserLoggedIn(previousValue)\n        \n    }\n    \n    didSetIsUserLoggedIn(previousValue: boolean) {\n        \n        const isUserLoggedIn = this.isUserLoggedIn\n        \n        if (isUserLoggedIn && previousValue != isUserLoggedIn) {\n            \n            // Send message to views\n            \n            this.broadcastMessageInRootViewTree({\n                \n                name: CBCore.broadcastEventName.userDidLogIn,\n                parameters: nil\n                \n            })\n            \n            this.updateLinkTargets()\n            \n            \n        }\n        else if (previousValue != isUserLoggedIn) {\n            \n            \n            this.performFunctionWithDelay(0.01, function (this: CBCore) {\n                \n                UIRoute.currentRoute.routeByRemovingComponentsOtherThanOnesNamed([\n                    \n                    \"settings\",\n                    \"inquiry\"\n                \n                ]).apply()\n                \n                this.broadcastMessageInRootViewTree({\n                    \n                    name: CBCore.broadcastEventName.userDidLogOut,\n                    parameters: nil\n                    \n                })\n                \n                this.updateLinkTargets()\n                \n                \n            }.bind(this))\n            \n        }\n        \n        \n    }\n    \n    private updateLinkTargets() {\n        UICoreValues.main.rootViewController.view.forEachViewInSubtree(function (view) {\n            if (view instanceof UILink) {\n                view.updateTarget()\n            }\n        })\n    }\n    \n    get isUserLoggedIn() {\n        \n        const result = (localStorage.getItem(\"CBIsUserLoggedIn\") == \"true\")\n        \n        return result\n        \n    }\n    \n    \n    \n    get userProfile() {\n        \n        var result = nil\n        \n        \n        try {\n            result = JSON.parse(localStorage.getItem(\"CBUserProfile\"))\n        } catch (error) {\n            \n        }\n        \n        // if (IS_NOT(result)) {\n        \n        //     // Get userID from inquiryAccessKey if possible\n        //     var inquiryKey = this.inquiryAccessKey;\n        \n        //     if (IS(inquiryKey)) {\n        \n        //         result = FIRST_OR_NIL(this.inquiriesModel.inquiriesByCurrentUser.firstElement).inquirer\n        \n        //     }\n        \n        // }\n        \n        return FIRST_OR_NIL(result)\n        \n    }\n    \n    set userProfile(userProfile: CBUserProfile) {\n        \n        if (IS_NOT(userProfile)) {\n            \n            localStorage.removeItem(\"CBUserProfile\")\n            \n        }\n        \n        localStorage.setItem(\"CBUserProfile\", JSON.stringify(userProfile))\n        \n        this.didSetUserProfile()\n        \n    }\n    \n    didSetUserProfile() {\n        \n        this.isUserLoggedIn = IS(this.userProfile)\n        \n    }\n    \n    \n    set languageKey(languageKey: string) {\n        \n        if (IS_NOT(languageKey)) {\n            \n            localStorage.removeItem(\"CBLanguageKey\")\n            \n        }\n        \n        localStorage.setItem(\"CBLanguageKey\", JSON.stringify(languageKey))\n        \n        this.didSetLanguageKey()\n        \n    }\n    \n    get languageKey() {\n        \n        const result = FIRST(localStorage.getItem(\"CBLanguageKey\"), LanguageService.defaultLanguageKey).replace(\n            \"\\\"\",\n            \"\"\n        ).replace(\"\\\"\", \"\")\n        \n        \n        return result\n        \n    }\n    \n    didSetLanguageKey() {\n        \n        UIRoute.currentRoute.routeWithComponent(\n            \"settings\",\n            { \"language\": this.languageKey },\n            YES\n        ).applyByReplacingCurrentRouteInHistory()\n        \n    }\n    \n    \n    get externalServiceIdentifier(): { accessKey: string; serviceID: string; organizationID: string } {\n        \n        const result = JSON.parse(localStorage.getItem(\"CBExternalServiceIdentifier\"))\n        \n        return result\n        \n    }\n    \n    set externalServiceIdentifier(externalServiceIdentifier: { accessKey: string; serviceID: string; organizationID: string }) {\n        \n        localStorage.setItem(\"CBExternalServiceIdentifier\", JSON.stringify(externalServiceIdentifier))\n        \n    }\n    \n    \n    reloadSocketConnection() {\n        \n        // @ts-ignore\n        this.socketClient.socket.disconnect()\n        \n        const messagesToBeSent = this.socketClient._messagesToBeSent.filter(function (messageItem, index, array) {\n            \n            return (!messageItem.isBoundToUserWithID || messageItem.isBoundToUserWithID ==\n                CBCore.sharedInstance.userProfile._id)\n            \n        })\n        \n        this._socketClient = new CBSocketClient(this)\n        this._socketClient._messagesToBeSent = messagesToBeSent\n        \n        const socketClient = this._socketClient\n        \n        this._models.forEach(function (model, index, array) {\n            \n            model.setSocketClient(socketClient)\n            \n        })\n        \n        this._functionsToCallForEachSocketClient.forEach(function (functionToCall, index, array) {\n            \n            functionToCall()\n            \n        })\n        \n        \n        \n    }\n    \n    \n    callFunctionForEachSocketClient(functionToCall: () => void) {\n        this._functionsToCallForEachSocketClient.push(functionToCall)\n        functionToCall()\n    }\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    FIRST_OR_NIL,\n    IS,\n    IS_DEFINED,\n    IS_NOT,\n    nil,\n    UICoreValues,\n    UILanguageService,\n    UILocalizedTextObject,\n    UIRoute,\n    UIView\n} from \"uicore-ts\"\nimport { CBLocalizedTextObject } from \"../CBCore/CBDataInterfaces\"\n\n\n\n\n\nexport class LanguageService implements UILanguageService {\n    \n    static _currentLanguageKey: string\n    \n    static languageValues = {\n        \n        \"en\": {\n            \n            \"languageName\": \"English\",\n            \"languageNameShort\": \"ENG\",\n            \n            \"topBarTitle\": \"UICore application\",\n            \n            \"selectLanguageTitle\": \"Select language\",\n            \"leftBarTitle\": \"Title\"\n            \n            \n        },\n        \"est\": {\n            \n            \"languageName\": \"Eesti keel\",\n            \"languageNameShort\": \"EST\",\n            \n            \"topBarTitle\": \"UICore rakendus\",\n            \n            \"selectLanguageTitle\": \"Vali keel\",\n            \"leftBarTitle\": \"Pealkiri\"\n            \n            \n        }\n        \n        \n        \n        \n    }\n    \n    static languages = JSON.parse(JSON.stringify(LanguageService.languageValues))\n    \n    static useStoredLanguageValues(values = {}) {\n        \n        LanguageService.languages = JSON.parse(JSON.stringify(LanguageService.languageValues))\n            .objectByCopyingValuesRecursivelyFromObject(\n                values) as any\n        \n        LanguageService.broadcastLanguageChangeEvent()\n        \n    }\n    \n    \n    \n    \n    \n    static broadcastLanguageChangeEvent() {\n        \n        UICoreValues.main.rootViewController.view.broadcastEventInSubtree({\n            name: UIView.broadcastEventName.LanguageChanged,\n            parameters: {}\n        })\n        \n    }\n    \n    static get defaultLanguageKey() {\n        \n        // @ts-ignore\n        return (CBCoreInitializerObject.defaultLanguageKey || \"en\")\n        \n    }\n    \n    static get currentLanguageKey() {\n        \n        if (!LanguageService._currentLanguageKey) {\n            \n            LanguageService.updateCurrentLanguageKey()\n            \n        }\n        \n        return LanguageService._currentLanguageKey\n        \n    }\n    \n    updateCurrentLanguageKey() {\n        \n        LanguageService.updateCurrentLanguageKey()\n        \n    }\n    \n    static updateCurrentLanguageKey(route = UIRoute.currentRoute) {\n        \n        let result = route.componentWithName(\"settings\").parameters.language\n        \n        if (IS_NOT(result)) {\n            \n            result = LanguageService.defaultLanguageKey\n            \n        }\n        \n        const isChanged = (result == LanguageService._currentLanguageKey)\n        \n        LanguageService._currentLanguageKey = result\n        \n        if (isChanged) {\n            \n            LanguageService.broadcastLanguageChangeEvent()\n            \n        }\n        \n    }\n    \n    get currentLanguageKey() {\n        \n        const result = LanguageService.currentLanguageKey\n        \n        return result\n        \n    }\n    \n    \n    \n    static stringForKey(\n        key: string,\n        languageKey: string,\n        defaultString: string,\n        parameters?: { [x: string]: string | UILocalizedTextObject; }\n    ) {\n        \n        var result\n        \n        if (IS(key) && LanguageService.languages[languageKey] &&\n            IS_DEFINED(LanguageService.languages[languageKey][key])) {\n            \n            result = LanguageService.languages[languageKey][key]\n            \n        }\n        else {\n            \n            result = defaultString\n            \n        }\n        \n        if (IS(parameters)) {\n            \n            const parameterKeys = Object.keys(parameters)\n            \n            parameterKeys.forEach(function (key, index, array) {\n                \n                const keyString = \"%\" + key + \"%\"\n                \n                const parameter = parameters[key]\n                \n                var parameterString\n                \n                if (parameter instanceof Object) {\n                    \n                    parameterString = UICoreValues.languageService.stringForCurrentLanguage(parameter as UILocalizedTextObject)\n                    \n                }\n                else {\n                    \n                    parameterString = parameter\n                    \n                }\n                \n                \n                result = result.replace(new RegExp(keyString, \"g\"), parameterString)\n                \n            })\n            \n        }\n        \n        return result\n        \n    }\n    \n    stringForKey(\n        key: string,\n        languageKey: string,\n        defaultString: string,\n        parameters?: { [x: string]: string | UILocalizedTextObject; }\n    ) {\n        \n        \n        return LanguageService.stringForKey(key, languageKey, defaultString, parameters)\n        \n        \n    }\n    \n    \n    static localizedTextObjectForKey(\n        key: string,\n        defaultString = key,\n        parameters?: { [x: string]: string | UILocalizedTextObject; }\n    ) {\n        \n        const result = {}\n        \n        LanguageService.languages.forEach(function (languageObject, languageKey) {\n            \n            result[languageKey] = LanguageService.stringForKey(key, languageKey, defaultString, parameters)\n            \n        })\n        \n        return result\n        \n    }\n    \n    localizedTextObjectForKey(\n        key: string,\n        defaultString?: string,\n        parameters?: { [x: string]: string | UILocalizedTextObject; }\n    ) {\n        \n        const result = LanguageService.localizedTextObjectForKey(key, defaultString, parameters)\n        \n        return result\n        \n    }\n    \n    \n    static localizedTextObjectForText(text: string) {\n        \n        if (IS_NOT(text)) {\n            \n            return nil\n            \n        }\n        \n        const result = {\n            \n            [LanguageService.defaultLanguageKey]: text\n            \n        }\n        \n        return result\n        \n    }\n    \n    localizedTextObjectForText(text: string) {\n        \n        const result = LanguageService.localizedTextObjectForText(text)\n        \n        return result\n        \n    }\n    \n    \n    static stringForCurrentLanguage(localizedTextObject: CBLocalizedTextObject | string) {\n        \n        if (!LanguageService || !localizedTextObject) {\n            \n            const asd = 1\n            \n        }\n        \n        if (localizedTextObject === \"\" + localizedTextObject) {\n            \n            return localizedTextObject\n            \n        }\n        \n        localizedTextObject = FIRST_OR_NIL(localizedTextObject)\n        \n        var result = localizedTextObject[LanguageService.currentLanguageKey]\n        \n        if (IS_NOT(result)) {\n            \n            result = localizedTextObject[LanguageService.defaultLanguageKey]\n            \n        }\n        \n        if (IS_NOT(result)) {\n            \n            result = localizedTextObject[\"en\"]\n            \n        }\n        \n        if (IS_NOT(result)) {\n            \n            result = \"\"\n            \n        }\n        \n        return result\n        \n    }\n    \n    stringForCurrentLanguage(localizedTextObject: CBLocalizedTextObject) {\n        \n        return LanguageService.stringForCurrentLanguage(localizedTextObject)\n        \n    }\n    \n    \n    \n    \n}\n\n\n\n\n\nUICoreValues.languageService = LanguageService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { IS, nil, UIObject, YES } from \"uicore-ts\"\nimport { CBCore } from \"./CBCore\"\n\n\nexport class CBServerClient extends UIObject {\n    \n    _core: CBCore\n    \n    constructor(core: CBCore) {\n        \n        super()\n        \n        this._core = core\n        \n    }\n    \n    \n    sendJSONObject(URL: string, objectToSend: any, completion: (response: any) => void) {\n        \n        this.sendRequest(\"POST\", URL, objectToSend, function (this: CBServerClient, status, response) {\n            if (status != 200) {\n                \n                console.log(\"GET \" + URL + \" \" + status)\n                \n                if (IS(completion)) {\n                    completion(nil)\n                }\n                return\n            }\n            const result = JSON.parse(response)\n    \n            if (IS(completion)) {\n                completion(result)\n            }\n        }.bind(this))\n        \n    }\n    \n    retrieveJSONObject(URL: string, completion: (response: any) => void) {\n        \n        this.retrieveJSONObjectWithCaching(URL, nil, nil, YES, completion)\n        \n    }\n    \n    retrieveJSONObjectWithCaching(\n        URL: string,\n        cacheObject: any,\n        cacheKey: string,\n        forceUpdate: boolean,\n        completion: (response: any) => void\n    ) {\n        if (IS(cacheObject[cacheKey]) && !forceUpdate) {\n            if (IS(completion)) {\n                completion(cacheObject[cacheKey])\n            }\n            return\n        }\n        this.sendRequest(\"GET\", URL, null, function (this: CBServerClient, status, response) {\n            if (status != 200) {\n                \n                console.log(\"GET \" + URL + \" \" + status)\n                \n                if (IS(completion)) {\n                    completion(nil)\n                }\n                return\n            }\n            const result = JSON.parse(response)\n            cacheObject[cacheKey] = result\n            if (IS(completion)) {\n                completion(result)\n            }\n        }.bind(this))\n    }\n    \n    sendRequest(method: string, URL: string, data: any, completion: (status: number, response: string) => void) {\n    \n        const xhr = new XMLHttpRequest()\n        xhr.open(method, URL, true)\n        xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n        xhr.onreadystatechange = processRequest\n        \n        function processRequest(event: Event) {\n            \n            if (xhr.readyState == 4) {\n                if (IS(completion)) {\n                    completion(xhr.status, xhr.responseText)\n                }\n            }\n            \n        }\n        \n        xhr.send(JSON.stringify(data))\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    FIRST_OR_NIL,\n    IF,\n    IS,\n    IS_NIL,\n    IS_NOT,\n    MAKE_ID,\n    nil,\n    NO,\n    RETURNER,\n    UIObject,\n    UIViewBroadcastEvent,\n    YES\n} from \"uicore-ts\"\nimport { CBDialogViewShower } from \"../Custom components/CBDialogViewShower\"\nimport { CBCore } from \"./CBCore\"\nimport {\n    CBSocketHandshakeInitMessage, CBSocketHandshakeResponseMessage, CBSocketMessage, CBSocketMessageCompletionFunction,\n    CBSocketMessageHandlerFunction, CBSocketMessageSendResponseFunction, CBSocketMultipleMessage,\n    CBSocketMultipleMessagecompletionFunction, CBSocketMultipleMessageObject, CBUserProfile, SocketClientInterface\n} from \"./CBDataInterfaces\"\nimport { CBServerClient } from \"./CBServerClient\"\nimport { CBSocketCallbackHolder } from \"./CBSocketCallbackHolder\"\n\n\n\n\n\n\ndeclare interface CBSocketClientMessageToBeSent {\n    \n    key: string;\n    message: any;\n    \n    inResponseToMessage: CBSocketMessage<any>;\n    keepWaitingForResponses: boolean;\n    \n    isBoundToUserWithID: string;\n    \n    completionPolicy: string;\n    \n    didSendFunction?: () => void;\n    \n    completion: CBSocketMessageCompletionFunction;\n    \n}\n\n\ndeclare interface CBSocketClientErrorMessage {\n    \n    _isCBSocketErrorMessage: boolean;\n    \n    messageData: any;\n    \n}\n\n\n\n\n\nexport function IS_SOCKET_ERROR(object: any): object is CBSocketClientErrorMessage {\n    \n    const result = (IS(object) && object._isCBSocketErrorMessage)\n    \n    return result\n    \n}\n\nexport function IS_NOT_SOCKET_ERROR(object: any) {\n    \n    return !IS_SOCKET_ERROR(object)\n    \n}\n\n\n\n\n\nexport class CBSocketClient extends UIObject {\n    \n    \n    \n    \n    _socket = io()\n    _isConnectionEstablished = NO\n    \n    _collectMessagesToSendLater = NO\n    \n    _messagesToBeSent: CBSocketClientMessageToBeSent[] = []\n    \n    static _sharedInstance: CBSocketClient\n    \n    _core: CBCore\n    \n    _subscribedKeys: {\n        [x: string]: boolean\n    } = {}\n    \n    _callbackHolder = new CBSocketCallbackHolder(this)\n    \n    static responseMessageKey = \"CBSocketResponseMessage\"\n    static multipleMessageKey = \"CBSocketMultipleMessage\"\n    \n    \n    static disconnectionMessage: CBSocketClientErrorMessage = {\n        \n        _isCBSocketErrorMessage: YES,\n        \n        messageData: \"Server disconnected\"\n        \n    }\n    \n    \n    \n    constructor(core: CBCore) {\n        \n        super()\n        \n        this._core = core\n        \n        \n        this.socket.on(\"connect\", function (this: CBSocketClient, socket: SocketIO.Socket) {\n            \n            console.log(\"Socket.io connected to server. clientID = \" + socket + \", socketID = \" + socket)\n            \n            var instanceIdentifier = localStorage.getItem(\"InstanceIdentifier\")\n            \n            if (IS_NOT(instanceIdentifier)) {\n                \n                instanceIdentifier = MAKE_ID()\n                localStorage.setItem(\"InstanceIdentifier\", instanceIdentifier)\n                \n            }\n            \n            const handshakeMessage: CBSocketHandshakeInitMessage = {\n                \n                accessToken: null,\n                userID: this._core.userProfile._id,\n                \n                inquiryAccessKey: null,\n                \n                instanceIdentifier: instanceIdentifier\n                \n            }\n            \n            this.socket.emit(\"CBSocketHandshakeInitMessage\", {\n                \n                identifier: MAKE_ID(),\n                messageData: handshakeMessage\n                \n            })\n            \n            \n        }.bind(this))\n        \n        \n        this.socket.on(\n            \"CBSocketHandshakeResponseMessage\",\n            function (this: CBSocketClient, message: CBSocketMessage<CBSocketHandshakeResponseMessage>) {\n                \n                \n                this._isConnectionEstablished = message.messageData.accepted\n                \n                if (!message.messageData.accepted) {\n                    \n                    console.log(\"SocketIO connection failed.\")\n                    \n                    CBDialogViewShower.alert(\"Failed to establish connection to server.\", function () {\n                    \n                    \n                    \n                    })\n                    \n                }\n                else {\n                    \n                    console.log(\"SocketIO connection handshake completed.\")\n                    \n                    this._callbackHolder = new CBSocketCallbackHolder(this, this._callbackHolder)\n                    \n                    core.userProfile = message.messageData.userProfile\n                    \n                    this.sendUnsentMessages()\n                    \n                }\n                \n                \n            }.bind(this)\n        )\n        \n        \n        this.socket.on(\"disconnect\", function (this: CBSocketClient, socket: SocketIO.Socket) {\n            \n            console.log(\"Socket.io disconnected from server. clientID = \" + socket + \".\")\n            \n            this._isConnectionEstablished = NO\n            \n            this._callbackHolder.isValid = NO\n            \n            this._callbackHolder.triggerDisconnectHandlers()\n            \n            \n        }.bind(this))\n        \n        \n        \n        \n        \n        this.socket.on(\"CBPerformReconnect\", function (this: CBSocketClient, message?: string) {\n            \n            console.log(\"Performing socket reconnection.\")\n            \n            core.reloadSocketConnection()\n            \n            if (message) {\n                \n                CBDialogViewShower.alert(message)\n                \n            }\n            \n            \n            \n        }.bind(this))\n        \n        \n        \n        \n        \n        this._socket.on(\n            CBSocketClient.responseMessageKey,\n            function (this: CBSocketClient, message: CBSocketMessage<any>) {\n                \n                this.didReceiveMessageForKey(CBSocketClient.responseMessageKey, message)\n                \n            }.bind(this)\n        )\n        \n        this._socket.on(\n            CBSocketClient.multipleMessageKey,\n            (message: CBSocketMessage<CBSocketMultipleMessageObject[]>) => {\n                \n                console.log(\"Received \" + message.messageData.length + \" messages.\")\n                \n                \n                this.didReceiveMessageForKey(CBSocketClient.multipleMessageKey, message)\n                \n            }\n        )\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get socket() {\n        return this._socket\n    }\n    \n    \n    \n    \n    \n    cancelUnsentMessages(messagesToCancel: CBSocketClientMessageToBeSent[]) {\n        \n        this._messagesToBeSent = this._messagesToBeSent.filter(function (\n            this: CBSocketClient,\n            messageObject: CBSocketClientMessageToBeSent,\n            index: number,\n            array: CBSocketClientMessageToBeSent[]\n        ) {\n            return !messagesToCancel.contains(messageObject)\n        }.bind(this))\n        \n    }\n    \n    \n    \n    \n    \n    sendUnsentMessages(receiveResponsesTogether = NO, completion?: CBSocketMultipleMessagecompletionFunction) {\n        \n        if (!this._isConnectionEstablished || this._collectMessagesToSendLater) {\n            \n            return\n            \n        }\n        \n        const groupedMessages: CBSocketMultipleMessageObject<any>[] = []\n        const didSendFunctions: (() => void)[] = []\n        \n        \n        this._messagesToBeSent.copy().forEach(function (\n            this: CBSocketClient,\n            messageToBeSentObject: CBSocketClientMessageToBeSent,\n            index: number,\n            array: CBSocketClientMessageToBeSent[]\n        ) {\n            \n            if (this._isConnectionEstablished) {\n                \n                var message = messageToBeSentObject.message\n                if (IS_NOT(message)) {\n                    message = \"\"\n                }\n                \n                const identifier = MAKE_ID()\n                \n                const completion = messageToBeSentObject.completion\n                \n                const messageObject: CBSocketMessage<any> = {\n                    \n                    messageData: message,\n                    identifier: identifier,\n                    keepWaitingForResponses: messageToBeSentObject.keepWaitingForResponses,\n                    inResponseToIdentifier: messageToBeSentObject.inResponseToMessage.identifier\n                    \n                }\n                \n                const shouldSendMessage = this._callbackHolder.socketShouldSendMessage(\n                    messageToBeSentObject.key,\n                    messageObject,\n                    messageToBeSentObject.completionPolicy,\n                    completion\n                )\n                \n                if (shouldSendMessage) {\n                    \n                    \n                    groupedMessages.push({\n                        \n                        key: messageToBeSentObject.key,\n                        message: messageObject\n                        \n                    })\n                    \n                    \n                }\n                \n                didSendFunctions.push(messageToBeSentObject.didSendFunction)\n                \n                \n            }\n            \n        }.bind(this))\n        \n        \n        this._messagesToBeSent = []\n        \n        if (IS_NOT(groupedMessages.length)) {\n            \n            return\n            \n        }\n        \n        if (groupedMessages.length == 1) {\n            \n            console.log(\"sending 1 unsent message.\")\n            \n        }\n        else {\n            \n            console.log(\"Sending \" + groupedMessages.length + \" unsent messages.\")\n            \n        }\n        \n        \n        \n        const messageObject: CBSocketMultipleMessage = {\n            \n            messageData: groupedMessages,\n            identifier: MAKE_ID(),\n            \n            shouldGroupResponses: receiveResponsesTogether\n            \n        }\n        \n        //if (receiveResponsesTogether) {\n        \n        this._callbackHolder.socketWillSendMultipleMessage(messageObject, completion)\n        \n        //}\n        \n        this.socket.emit(CBSocketClient.multipleMessageKey, messageObject)\n        \n        \n        didSendFunctions.forEach(function (didSendFunction, index, array) {\n            didSendFunction()\n        })\n        \n    }\n    \n    \n    \n    \n    \n    static completionPolicy = {\n        \n        \"all\": \"all\",\n        \"allDifferent\": \"allDifferent\",\n        \"first\": \"first\",\n        \"last\": \"last\",\n        \"firstAndLast\": \"firstAndLast\",\n        \"firstAndLastIfDifferent\": \"firstAndLastIfDifferent\",\n        \"directOnly\": \"directOnly\",\n        \"firstOnly\": \"firstOnly\",\n        \"storedOrFirst\": \"storedOrFirst\"\n        \n    }\n    \n    \n    sendUserBoundMessageForKeyWithPolicy(\n        key: string,\n        message: any,\n        completionPolicy: string,\n        completion?: CBSocketMessageCompletionFunction\n    ) {\n        \n        \n        this._sendMessageForKey(key, message, undefined, NO, completionPolicy, YES, nil, completion)\n        \n    }\n    \n    sendUserBoundMessageForKey(key: string, message: any, completion?: CBSocketMessageCompletionFunction) {\n        \n        this._sendMessageForKey(key, message, undefined, NO, undefined, YES, nil, completion)\n        \n    }\n    \n    sendMessageForKeyWithPolicy(\n        key: string,\n        message: any,\n        completionPolicy: string,\n        completion?: CBSocketMessageCompletionFunction\n    ) {\n        \n        \n        this._sendMessageForKey(key, message, undefined, NO, completionPolicy, NO, nil, completion)\n        \n    }\n    \n    sendMessageForKey(key: string, message: any, completion?: CBSocketMessageCompletionFunction) {\n        \n        this._sendMessageForKey(key, message, undefined, NO, undefined, NO, nil, completion)\n        \n    }\n    \n    \n    resultForMessageForKey(key: string, message: any, completionPolicy?: string, isUserBound = NO) {\n        \n        const result = new Promise<{\n            \n            responseMessage: any,\n            result: any,\n            errorResult: any,\n            \n            respondWithMessage: CBSocketMessageSendResponseFunction\n            \n        }>((resolve, reject) => {\n            \n            this._sendMessageForKey(\n                key,\n                message,\n                undefined,\n                NO,\n                completionPolicy,\n                isUserBound,\n                nil,\n                (responseMessage, respondWithMessage) => resolve({\n                    \n                    responseMessage: responseMessage,\n                    result: IF(IS_NOT_SOCKET_ERROR(responseMessage))(() => responseMessage).ELSE(RETURNER(undefined)),\n                    errorResult: IF(IS_SOCKET_ERROR(responseMessage))(() => responseMessage).ELSE(RETURNER(undefined)),\n                    \n                    respondWithMessage: respondWithMessage\n                    \n                })\n            )\n            \n        })\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    _sendMessageForKey(\n        key: string,\n        message: any,\n        inResponseToMessage: CBSocketMessage<any> = {} as any,\n        keepMessageConnectionOpen = NO,\n        completionPolicy = CBSocketClient.completionPolicy.directOnly,\n        isUserBound = NO,\n        didSendFunction: () => void = nil,\n        completion: CBSocketMessageCompletionFunction = nil\n    ) {\n        \n        if (IS_NIL(message)) {\n            \n            message = \"\"\n            \n        }\n        \n        if (this._isConnectionEstablished && !this._collectMessagesToSendLater) {\n            \n            const identifier = MAKE_ID()\n            \n            const messageObject: CBSocketMessage<any> = {\n                \n                messageData: message,\n                identifier: identifier,\n                keepWaitingForResponses: keepMessageConnectionOpen,\n                inResponseToIdentifier: inResponseToMessage.identifier\n                \n            }\n            \n            const shouldSendMessage = this._callbackHolder.socketShouldSendMessage(\n                key,\n                messageObject,\n                completionPolicy,\n                completion\n            )\n            \n            if (shouldSendMessage) {\n                \n                this.socket.emit(key, messageObject)\n                \n            }\n            \n            didSendFunction()\n            \n        }\n        else {\n            \n            this._messagesToBeSent.push({\n                \n                key: key,\n                message: message,\n                inResponseToMessage: inResponseToMessage,\n                keepWaitingForResponses: keepMessageConnectionOpen,\n                completionPolicy: completionPolicy,\n                isBoundToUserWithID: IF(isUserBound)(RETURNER(FIRST_OR_NIL(CBCore.sharedInstance.userProfile._id)))(),\n                didSendFunction: didSendFunction,\n                completion: completion\n                \n            })\n            \n            return this._messagesToBeSent.lastElement\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    sendMessagesAsGroup<FunctionReturnType extends object>(functionToCall: () => FunctionReturnType) {\n        \n        const collectMessagesToSendLater = this._collectMessagesToSendLater\n        \n        this._collectMessagesToSendLater = YES\n        \n        var result = functionToCall()\n        \n        this._collectMessagesToSendLater = collectMessagesToSendLater\n        \n        this.sendUnsentMessages()\n        \n        return result\n        \n    }\n    \n    sendAndReceiveMessagesAsGroup<FunctionReturnType extends object>(\n        functionToCall: () => FunctionReturnType,\n        completion?: CBSocketMultipleMessagecompletionFunction\n    ) {\n        \n        const collectMessagesToSendLater = this._collectMessagesToSendLater\n        \n        this._collectMessagesToSendLater = YES\n        \n        var result = functionToCall()\n        \n        this._collectMessagesToSendLater = collectMessagesToSendLater\n        \n        this.sendUnsentMessages(YES, completion)\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveMessageForKey(key: string, message: CBSocketMessage<any>) {\n        \n        \n        const sendResponseFunction: CBSocketMessageSendResponseFunction = function (\n            this: CBSocketClient,\n            responseMessage: any,\n            completion: CBSocketMessageCompletionFunction\n        ) {\n            \n            this._sendMessageForKey(\n                CBSocketClient.responseMessageKey,\n                responseMessage,\n                message,\n                NO,\n                undefined,\n                NO,\n                nil,\n                completion\n            )\n            \n        }.bind(this) as any\n        \n        sendResponseFunction.sendIntermediateResponse = function (\n            this: CBSocketClient,\n            updateMessage: any,\n            completion: CBSocketMessageCompletionFunction\n        ) {\n            \n            this._sendMessageForKey(\n                CBSocketClient.responseMessageKey,\n                updateMessage,\n                message,\n                YES,\n                undefined,\n                NO,\n                nil,\n                completion\n            )\n            \n        }.bind(this)\n        \n        const sendUserBoundResponseFunction: CBSocketMessageSendResponseFunction = function (\n            this: CBSocketClient,\n            responseMessage: any,\n            completion: CBSocketMessageCompletionFunction\n        ) {\n            \n            this._sendMessageForKey(\n                CBSocketClient.responseMessageKey,\n                responseMessage,\n                message,\n                NO,\n                undefined,\n                YES,\n                nil,\n                completion\n            )\n            \n        }.bind(this) as any\n        \n        sendUserBoundResponseFunction.sendIntermediateResponse = function (\n            this: CBSocketClient,\n            updateMessage: any,\n            completion: CBSocketMessageCompletionFunction\n        ) {\n            \n            this._sendMessageForKey(\n                CBSocketClient.responseMessageKey,\n                updateMessage,\n                message,\n                YES,\n                undefined,\n                YES,\n                nil,\n                completion\n            )\n            \n        }.bind(this)\n        \n        if (IS_SOCKET_ERROR(message.messageData)) {\n            \n            console.log(\"CBSocketClient did receive error message.\")\n            \n            console.log(message.messageData)\n            \n            \n            \n        }\n        \n        \n        this._callbackHolder.socketDidReceiveMessageForKey(key, message, sendResponseFunction)\n        \n    }\n    \n    \n    \n    \n    \n    addTargetForMessagesForKeys(keys: string[], handlerFunction: CBSocketMessageHandlerFunction) {\n        keys.forEach(function (this: CBSocketClient, key: string, index: number, array: string[]) {\n            this.addTargetForMessagesForKey(key, handlerFunction)\n        }.bind(this))\n    }\n    \n    \n    \n    \n    \n    addTargetForMessagesForKey(key: string, handlerFunction: CBSocketMessageHandlerFunction) {\n        \n        this._callbackHolder.registerHandler(key, handlerFunction)\n        \n        if (IS_NOT(this._subscribedKeys[key])) {\n            \n            this._socket.on(key, function (this: CBSocketClient, message: CBSocketMessage<any>) {\n                \n                this.didReceiveMessageForKey(key, message)\n                \n            }.bind(this))\n            \n            this._subscribedKeys[key] = true\n            \n        }\n        \n        \n        \n    }\n    \n    addTargetForOneMessageForKey(key: string, handlerFunction: CBSocketMessageHandlerFunction) {\n        \n        this._callbackHolder.registerOnetimeHandler(key, handlerFunction)\n        \n        if (IS_NOT(this._subscribedKeys[key])) {\n            \n            this._socket.on(key, function (this: CBSocketClient, message: CBSocketMessage<any>) {\n                \n                this.didReceiveMessageForKey(key, message)\n                \n            }.bind(this))\n            \n            this._subscribedKeys[key] = true\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\nexport const SocketClient: SocketClientInterface = new Proxy({ \"name\": \"SocketClient\" }, {\n    \n    get(target, key) {\n        \n        const result = (\n            messageData,\n            completionPolicy,\n            isUserBound\n        ) => CBCore.sharedInstance.socketClient.resultForMessageForKey(\n            key as string,\n            messageData,\n            completionPolicy,\n            isUserBound\n        )\n        \n        \n        \n        return result\n        \n    }\n    \n}) as any\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    IS,\n    nil,\n    NO,\n    UIActionIndicator, UIButton,\n    UIColor,\n    UICore, UICoreValues, UIDialogView, UIImageView,\n    UIObject,\n    UIRectangle,\n    UITextView,\n    UIView,\n    YES\n} from \"uicore-ts\"\nimport { CBColor } from \"../CBCore/CBColor\"\nimport { CBLocalizedTextObject } from \"../CBCore/CBDataInterfaces\"\nimport { RootViewParameters } from \"../RootViewParameters\"\nimport { CBDialogView } from \"./CBDialogView\"\nimport { LanguageService } from \"./LanguageService\"\n\n\nexport class CBDialogViewShower extends UIObject {\n    \n    dialogView: UIDialogView<CBDialogView>\n    static currentDialogViewShower: CBDialogViewShower\n    static nextShowDialogFunctions: Function[] = []\n    static currentActionIndicatorDialogViewShower: CBDialogViewShower = nil\n    \n    constructor(elementID?: string) {\n        \n        super()\n        \n        this.dialogView = new UIDialogView<CBDialogView>()\n        this.dialogView.view = new CBDialogView(elementID)\n        this.dialogView.view.backgroundColor = UIColor.whiteColor\n        \n        const dialogLayoutFunction = this.dialogView.layoutSubviews.bind(this.dialogView)\n        this.dialogView.layoutSubviews = function (this: CBDialogViewShower) {\n            \n            dialogLayoutFunction()\n            \n            this.dialogView.view.frame = new UIRectangle(\n                0,\n                0,\n                window.innerHeight,\n                window.innerWidth\n            ).rectangleWithHeight(\n                this.dialogView.view.intrinsicContentHeight(this.getDialogWidth()),\n                0.5\n            ).rectangleWithWidth(this.getDialogWidth(), 0.5)\n            \n            this.dialogView.frame = UICoreValues.main.rootViewController.view.bounds\n            \n            \n        }.bind(this)\n        \n        \n        this.dialogView.view.yesButton.addTargetForControlEvents([\n            UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\n        ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n            \n            this.yesButtonWasPressed()\n            \n            \n        }.bind(this))\n        \n        this.dialogView.view.noButton.addTargetForControlEvents([\n            UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\n        ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n            \n            this.noButtonWasPressed()\n            \n        }.bind(this))\n        \n    }\n    \n    \n    getDialogWidth() {\n        \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding * 0.75\n        \n        \n        var result = 250\n        \n        const width = this.dialogView.view.titleLabel.intrinsicContentWidth() + padding * 2\n        \n        result = Math.max(result, this.dialogView.view.view.intrinsicContentWidth(this.dialogView.view.view.viewHTMLElement.naturalHeight || 1000000000))\n        \n        result = Math.max(result, width)\n        \n        result = Math.min(result, 1000)\n        \n        const dialogMaxWidth = (this.dialogView.superview ||\n            { \"bounds\": new UIRectangle(0, 0, 0, result) }).bounds.width\n        \n        result = Math.min(result, dialogMaxWidth)\n        \n        return result\n        \n        \n        \n    }\n    \n    \n    yesButtonWasPressed() {\n        \n        \n        \n    }\n    \n    noButtonWasPressed() {\n        \n        \n        \n    }\n    \n    \n    cancelButtonWasPressed() {\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    showQuestionDialogInRootView(titleTextObject?: CBLocalizedTextObject, questionTextObject?: CBLocalizedTextObject) {\n        \n        \n        this.dialogView.view.initTitleLabelIfNeeded()\n        \n        this.dialogView.view.titleLabel.localizedTextObject = titleTextObject\n        \n        \n        \n        this.dialogView.view.initQuestionLabelIfNeeded()\n        \n        if (IS(questionTextObject)) {\n            \n            this.dialogView.view.questionLabel.localizedTextObject = questionTextObject\n            \n        }\n        \n        \n        this.dialogView.view.initYesNoButtonsIfNeeded()\n        \n        \n        this.dialogView.view.noButton.addTargetForControlEvents([\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n        ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n            \n            this.noButtonWasPressed()\n            \n            \n        }.bind(this))\n        \n        this.dialogView.view.yesButton.addTargetForControlEvents([\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n        ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n            \n            this.yesButtonWasPressed()\n            \n            \n        }.bind(this))\n        \n        \n        this.dialogView.showInRootView(YES)\n        \n        \n    }\n    \n    showMessageDialogInRootView(titleTextObject?: CBLocalizedTextObject) {\n        \n        \n        this.dialogView.view.initTitleLabelIfNeeded()\n        \n        this.dialogView.view.titleLabel.localizedTextObject = titleTextObject\n        \n        \n        this.dialogView.view.initCancelButtonIfNeeded()\n        \n        \n        this.dialogView.view.cancelButton.addTargetForControlEvents([\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n        ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n            \n            this.cancelButtonWasPressed()\n            \n            \n        }.bind(this))\n        \n        \n        this.dialogView.showInRootView(YES)\n        \n        this.dialogView.view.cancelButton.focus()\n        \n        \n    }\n    \n    showDialogInRootView(view: UIView) {\n        \n        \n        this.dialogView.view.view = view\n        \n        this.dialogView.view.initCancelButtonIfNeeded()\n        \n        \n        this.dialogView.view.cancelButton.addTargetForControlEvents([\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n        ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n            \n            this.cancelButtonWasPressed()\n            \n            \n        }.bind(this))\n        \n        \n        this.dialogView.showInRootView(YES)\n        \n        this.dialogView.view.cancelButton.focus()\n        \n        \n    }\n    \n    \n    \n    \n    \n    showImageDialogInRootView(imageURL: string, deleteImageCallback?: Function) {\n        \n        \n        var loadingLabel = new UITextView()\n        \n        loadingLabel.text = \"Loading image.\"\n        \n        loadingLabel.textAlignment = UITextView.textAlignment.center\n        \n        this.dialogView.view.view = loadingLabel\n        \n        \n        const imageView = new UIImageView()\n        \n        imageView.imageSource = imageURL\n        \n        imageView.viewHTMLElement.onload = (event) => {\n            this.dialogView.view.view = imageView\n            \n            imageView.setNeedsLayoutUpToRootView()\n        }\n        \n        imageView.fillMode = UIImageView.fillMode.aspectFitIfLarger\n        \n        \n        if (IS(deleteImageCallback)) {\n            \n            this.dialogView.view.initYesNoButtonsIfNeeded()\n            \n            this.dialogView.view.yesButton.titleLabel.text = \"Close\"\n            \n            this.dialogView.view.noButton.titleLabel.text = \"Delete\"\n            \n            this.dialogView.view.noButtonDismissesDialog = NO\n            \n            this.dialogView.view.noButton.addTargetForControlEvents([\n                UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n            ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n                \n                const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(function (this: CBDialogViewShower) {\n                    \n                    //this.dialogView.dismiss()\n                    \n                }.bind(this))\n                \n                var textObject = LanguageService.localizedTextObjectForText(\"Delete this image.\")\n                \n                dialogShower.showQuestionDialogInRootView(textObject)\n                \n                dialogShower.yesButtonWasPressed = function () {\n                    \n                    deleteImageCallback()\n                    \n                    dialogShower.dialogView.dismiss()\n                    \n                }\n                \n                \n            }.bind(this))\n            \n            \n            this.dialogView.view.yesButton.addTargetForControlEvents([\n                UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n            ], function (this: CBDialogViewShower, sender: UIButton, event: Event) {\n                \n                \n                this.dialogView.dismiss()\n                \n                \n            }.bind(this))\n            \n        }\n        else {\n            \n            this.dialogView.view.initCancelButtonIfNeeded()\n            \n            this.dialogView.view.cancelButton.titleLabel.text = \"Close\"\n            \n        }\n        \n        \n        \n        \n        this.dialogView.showInRootView(YES)\n        \n        this.dialogView.view.cancelButton.focus()\n        \n        \n    }\n    \n    showActionIndicatorDialogInRootView(message: string) {\n        \n        \n        \n        const actionIndicator = new UIActionIndicator()\n        \n        \n        this.dialogView.zIndex = 150\n        \n        this.dialogView.view.view = actionIndicator\n        \n        actionIndicator.style.minHeight = \"100px\"\n        \n        this.dialogView.view.initQuestionLabelIfNeeded()\n        \n        this.dialogView.view.questionLabel.text = message\n        \n        \n        actionIndicator.start()\n        \n        this.dialogView.view.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.5)\n        \n        this.dialogView.view.questionLabel.textColor = UIColor.whiteColor\n        \n        \n        \n        this.dialogView.dismissesOnTapOutside = NO\n        \n        \n        \n        \n        \n        CBDialogViewShower.currentActionIndicatorDialogViewShower = this\n        \n        \n        this.dialogView.showInRootView(NO)\n        \n        this.dialogView.view.cancelButton.focus()\n        \n        \n    }\n    \n    \n    \n    \n    \n    static showNextDialog() {\n        \n        (CBDialogViewShower.nextShowDialogFunctions.firstElement || nil)()\n        CBDialogViewShower.nextShowDialogFunctions.removeElementAtIndex(0)\n        \n    }\n    \n    \n    \n    static alert(text: string, dismissCallback: Function = nil) {\n        \n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback)\n        const textObject = LanguageService.localizedTextObjectForText(text)\n        const showDialogFunction = dialogShower.showMessageDialogInRootView.bind(dialogShower, textObject)\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower)\n        \n    }\n    \n    \n    \n    static localizedAlert(textObject: CBLocalizedTextObject, dismissCallback: Function = nil) {\n        \n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback)\n        const showDialogFunction = dialogShower.showMessageDialogInRootView.bind(dialogShower, textObject)\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower)\n        \n    }\n    \n    \n    static showQuestionDialog(questionText: string, dismissCallback: Function = nil) {\n        \n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback)\n        const textObject = LanguageService.localizedTextObjectForText(questionText)\n        const showDialogFunction = dialogShower.showQuestionDialogInRootView.bind(dialogShower, textObject)\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower)\n        \n        return dialogShower\n        \n    }\n    \n    \n    static showImageDialog(imageURL: string, deleteImageCallback: Function = nil, dismissCallback: Function = nil) {\n        \n        var dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback)\n        \n        var showDialogFunction = dialogShower.showImageDialogInRootView.bind(\n            dialogShower,\n            imageURL,\n            deleteImageCallback\n        )\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower)\n        \n        return dialogShower\n        \n        \n    }\n    \n    static showDialog(view: UIView, dismissCallback: Function = nil) {\n        \n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback)\n        const showDialogFunction = dialogShower.showDialogInRootView.bind(dialogShower, view)\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower)\n    \n        return dialogShower;\n    \n    }\n    \n    static showActionIndicatorDialog(message: string, dismissCallback: Function = nil) {\n        \n        \n        if (IS(CBDialogViewShower.currentActionIndicatorDialogViewShower)) {\n            \n            \n            CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.view.questionLabel.text = message\n            \n            CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.view.setNeedsLayoutUpToRootView()\n            \n            return\n            \n        }\n        \n        \n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback)\n        \n        dialogShower.showActionIndicatorDialogInRootView(message)\n        \n        return dialogShower\n        \n        \n    }\n    \n    \n    static hideActionIndicatorDialog() {\n        \n        CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.dismiss()\n        \n        CBDialogViewShower.currentActionIndicatorDialogViewShower = nil\n        \n    }\n    \n    \n    \n    private static _dialogShowerWithDismissCallback(dismissCallback: Function) {\n        \n        const dialogShower = new CBDialogViewShower()\n        const dismissFunction = dialogShower.dialogView.dismiss.bind(dialogShower.dialogView)\n        \n        dialogShower.dialogView.dismiss = function () {\n            dismissFunction()\n            dismissCallback()\n            CBDialogViewShower.currentDialogViewShower = null\n            CBDialogViewShower.showNextDialog()\n        }\n        \n        return dialogShower\n        \n    }\n    \n    \n    private static _showDialogWithFunction(showDialogFunction: any, dialogShower: CBDialogViewShower) {\n        \n        if (IS(CBDialogViewShower.currentDialogViewShower)) {\n            \n            CBDialogViewShower.nextShowDialogFunctions.push(showDialogFunction)\n            \n        }\n        else {\n            \n            CBDialogViewShower.currentDialogViewShower = dialogShower\n            showDialogFunction()\n            \n        }\n        \n    }\n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "export class RootViewParameters {\n    \n    static get paddingLength() {\n        \n        return 20\n        \n    }\n    \n}\n", "import { FIRST_OR_NIL, IF, IS, IS_NOT, nil, NO, RETURNER, UIButton, UIColor, UITextView, UIView, YES } from \"uicore-ts\"\nimport { RootViewParameters } from \"../RootViewParameters\"\nimport { CBFlatButton } from \"./CBFlatButton\"\nimport { LanguageService } from \"./LanguageService\"\nimport { RowView } from \"./RowView\"\n\n\nexport class CBDialogView extends UIView {\n    \n    titleLabel: UITextView = nil\n    titleRow: RowView = nil\n    placeholderLabel: UITextView = nil\n    \n    _view: UIView = nil\n    \n    questionLabel: UITextView = nil\n    yesButton: CBFlatButton = nil\n    noButton: CBFlatButton = nil\n    cancelButton: CBFlatButton = nil\n    \n    noButtonDismissesDialog = YES\n    \n    constructor(elementID?: string) {\n        \n        super(elementID)\n        \n        this.updateContent()\n        \n    }\n    \n    \n    initView(elementID: string, viewHTMLElement: HTMLElement) {\n        super.initView(elementID, viewHTMLElement)\n        this.style.borderRadius = \"5px\"\n    }\n    \n    \n    set view(view: UIView) {\n        this.view.removeFromSuperview()\n        this._view = view\n        this.addSubview(view)\n    }\n    \n    get view() {\n        return this._view\n    }\n    \n    \n    initCancelButtonIfNeeded() {\n        \n        if (IS_NOT(this.cancelButton)) {\n            \n            this.cancelButton = new CBFlatButton(this.elementID + \"CancelButton\")\n            this.cancelButton.titleLabel.text = \"OK\"\n            this.cancelButton.titleLabelColor = UIColor.greenColor\n            this.cancelButton.titleLabel.style.fontWeight = \"600\"\n            this.addSubview(this.cancelButton)\n            \n            this.cancelButton.addTargetForControlEvents([\n                UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\n            ], function (this: CBDialogView, sender: UIButton, event: Event) {\n                this.dialogView.dismiss()\n            }.bind(this))\n            \n        }\n        \n    }\n    \n    initYesNoButtonsIfNeeded() {\n        \n        if (IS_NOT(this.yesButton)) {\n            \n            this.yesButton = new CBFlatButton(this.elementID + \"YesButton\")\n            this.yesButton.titleLabel.setText(\"cBDDialogViewYES\", \"YES\")\n            this.yesButton.titleLabelColor = UIColor.greenColor\n            this.yesButton.titleLabel.style.fontWeight = \"600\"\n            this.addSubview(this.yesButton)\n            \n            this.noButton = new CBFlatButton(this.elementID + \"NoButton\")\n            this.noButton.titleLabel.setText(\"cBDDialogViewNO\", \"NO\")\n            this.noButton.titleLabelColor = UIColor.redColor\n            this.noButton.titleLabel.style.fontWeight = \"600\"\n            this.addSubview(this.noButton)\n            \n            // this.yesButton.addTargetForControlEvents([UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown], function (this: CBDialogView, sender: UIButton, event: Event) {\n            //     this.dialogView.dismiss()\n            // }.bind(this))\n            \n            this.noButton.addTargetForControlEvents([\n                UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\n            ], function (this: CBDialogView, sender: UIButton, event: Event) {\n                if (this.noButtonDismissesDialog) {\n                    this.dialogView.dismiss()\n                }\n            }.bind(this))\n            \n        }\n        \n        \n        \n    }\n    \n    initQuestionLabelIfNeeded() {\n        \n        if (IS_NOT(this.questionLabel)) {\n            \n            this.questionLabel = new UITextView(this.elementID + \"QuestionLabel\", UITextView.type.header3)\n            this.questionLabel.text = LanguageService.stringForKey(\n                \"cBDDialogViewAreYouSure\",\n                LanguageService.currentLanguageKey,\n                \"Are you sure?\"\n            )\n            this.questionLabel.textAlignment = UITextView.textAlignment.center\n            this.addSubview(this.questionLabel)\n            \n        }\n        \n    }\n    \n    initTitleRow() {\n        \n        if (IS_NOT(this.titleRow)) {\n            \n            this.titleRow = new RowView(this.elementID + \"TitleRow\")\n            this.addSubview(this.titleRow)\n            \n        }\n        \n    }\n    \n    initTitleLabelIfNeeded() {\n        \n        if (IS_NOT(this.titleLabel)) {\n            \n            this.titleLabel = new UITextView(this.elementID + \"TitleLabel\", UITextView.type.header4)\n            this.titleLabel.text = \"Accept offer\"\n            this.titleLabel.style.fontSize = \"24\"\n            this.addSubview(this.titleLabel)\n            \n        }\n        \n    }\n    \n    initPlaceholderLabelIfNeeded() {\n        \n        if (IS_NOT(this.placeholderLabel)) {\n            \n            this.placeholderLabel = new UITextView(this.elementID + \"PlaceholderLabel\", UITextView.type.header4)\n            this.placeholderLabel.text = \"No offers have been made yet.\"\n            this.addSubview(this.placeholderLabel)\n            \n        }\n        \n    }\n    \n    updateContent() {\n        \n        function stringFromValue(value) {\n            if (IS(value)) {\n                return value\n            }\n            return \"-\"\n        }\n        \n        \n        \n        this.layoutSubviews()\n        \n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding * 0.75\n    \n        const bounds = this.bounds.rectangleWithInsets(padding * 0.5, padding * 0.5, 0, 0)\n    \n        const topObject = { frame: bounds.rectangleWithHeight(0) }\n    \n    \n        this.titleLabel.frame = bounds.rectangleWithHeight(this.titleLabel.intrinsicContentHeight(bounds.width)).rectangleWithY(\n            bounds.y +\n            padding * 0.5)\n        this.titleLabel.style.marginLeft = \"\" + (padding * 0.5) + \"px\"\n        \n        this.titleRow.frame = FIRST_OR_NIL(this.titleLabel, topObject).frame.rectangleForNextRow(\n            0,\n            this.titleRow.intrinsicContentHeight(bounds.width)\n        )\n        \n        \n        \n        \n        \n        this.view.frame = FIRST_OR_NIL(this.titleRow, this.titleLabel, topObject).frame.rectangleForNextRow(\n            padding,\n            this.view.intrinsicContentHeight(bounds.width)\n        ).rectangleWithWidth(bounds.width).rectangleWithX(bounds.x)\n        \n        \n        \n        this.questionLabel.frame = FIRST_OR_NIL(\n            this.view,\n            this.titleRow,\n            this.titleLabel,\n            topObject\n        ).frame.rectangleForNextRow(\n            padding,\n            this.questionLabel.intrinsicContentHeight(bounds.width)\n        ).rectangleWithWidth(bounds.width).rectangleWithX(bounds.x)\n    \n    \n    \n\n        const buttons = [this.yesButton, this.noButton]\n    \n        const buttonsFrame = FIRST_OR_NIL(\n            this.questionLabel,\n            this.view,\n            this.titleRow,\n            this.titleLabel,\n            topObject\n        ).frame.rectangleForNextRow(padding, labelHeight *\n            2)\n            .rectangleWithWidth([(buttons.everyElement.titleLabel.intrinsicContentWidth() as any as number[]).max(), 120].max() * 2 + padding * 3, 0.5)\n        \n        buttonsFrame.distributeViewsAlongWidth(buttons)\n        \n        this.cancelButton.frame = buttonsFrame.rectangleWithWidth(150, 0.5)\n        \n        \n        \n        \n        this.placeholderLabel.frame = bounds.rectangleWithInsets(padding * 0.5, padding * 0.5, 0, 0)\n        \n        \n        \n        if (IS(this.view)) {\n            \n            this.placeholderLabel.hidden = YES\n            \n            // this.titleLabel.hidden = NO\n            // this.titleRow.hidden = NO\n            \n        }\n        else {\n            \n            \n            this.placeholderLabel.hidden = NO\n            \n            // this.titleLabel.hidden = YES\n            // this.titleRow.hidden = YES\n            \n            \n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    intrinsicContentHeight(constrainingWidth: number = 0) {\n    \n    \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding * 0.75\n    \n        function addPaddingIfNeeded(value: number) {\n            \n            return IF<number>(value)(function () {\n                return value + padding\n            })()\n            \n        }\n    \n        var result = padding\n    \n        result = result + addPaddingIfNeeded(this.titleLabel.intrinsicContentHeight(constrainingWidth))\n        \n        result = result + addPaddingIfNeeded(this.titleRow.intrinsicContentHeight(constrainingWidth))\n        \n        result = result + addPaddingIfNeeded(this.view.intrinsicContentHeight(constrainingWidth) + padding)\n        \n        result = result + addPaddingIfNeeded(this.questionLabel.intrinsicContentHeight(constrainingWidth))\n        \n        result = result + IF<number>(FIRST_OR_NIL(this.yesButton, this.cancelButton))(RETURNER(labelHeight))()\n        \n        \n        \n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIButton, UIColor } from \"uicore-ts\"\nimport { CBColor } from \"../CBCore/CBColor\"\nimport { CBButton } from \"./CBButton\"\n\n\nexport class CBFlatButton extends CBButton {\n    \n    static colors = {\n        \n        titleLabel: {\n            \n            normal: CBColor.primaryTintColor,\n            highlighted: CBColor.primaryTintColor,\n            selected: CBColor.primaryTintColor\n            \n        },\n        background: {\n            \n            normal: CBColor.transparentColor,\n            hovered: new UIColor(\"#F8F8F8\"),\n            highlighted: new UIColor(\"#ebebeb\"),\n            selected: new UIColor(\"#ebebeb\")\n            \n        }\n        \n    }\n    \n    \n    constructor(elementID?: string, elementType?: string) {\n        \n        super(elementID, elementType)\n        \n    }\n    \n    \n    initView(elementID: string, viewHTMLElement: HTMLElement, initViewData) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        this.colors = {\n            \n            titleLabel: {\n                \n                normal: CBColor.primaryTintColor,\n                highlighted: CBColor.primaryTintColor,\n                selected: CBColor.primaryTintColor\n                \n            },\n            background: {\n                \n                normal: CBColor.transparentColor,\n                hovered: new UIColor(\"#F8F8F8\"),\n                highlighted: new UIColor(\"#ebebeb\"),\n                selected: new UIColor(\"#ebebeb\")\n                \n            }\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    set titleLabelColor(titleLabelColor: UIColor) {\n        \n        \n        this.colors.titleLabel.normal = titleLabelColor\n        this.colors.titleLabel.highlighted = titleLabelColor\n        this.colors.titleLabel.selected = titleLabelColor\n        \n        \n        this.updateContentForCurrentState()\n        \n    }\n    \n    get titleLabelColor() {\n    \n        const result = this.colors.titleLabel.normal\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    updateContentForNormalState() {\n        \n        UIButton.prototype.updateContentForNormalState.call(this)\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.24)\"\n        \n    }\n    \n    \n    updateContentForHoveredState() {\n        \n        UIButton.prototype.updateContentForHoveredState.call(this)\n        \n        \n        \n        //this.titleLabel.textColor = CBColor.whiteColor.colorByMultiplyingRGB(0.85);\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.18)\";\n        \n    }\n    \n    updateContentForFocusedState() {\n        \n        UIButton.prototype.updateContentForFocusedState.call(this)\n        \n        \n        \n        //this.titleLabel.textColor = CBColor.whiteColor.colorByMultiplyingRGB(0.85);\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.18)\"\n        \n    }\n    \n    \n    \n    updateContentForHighlightedState() {\n        \n        UIButton.prototype.updateContentForHighlightedState.call(this)\n        \n        \n        \n        //this.titleLabel.textColor = CBColor.whiteColor.colorByMultiplyingRGB(0.7);\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.12)\"\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { IS_NOT, UIButton, UIColor } from \"uicore-ts\"\nimport { CBColor } from \"../CBCore/CBColor\"\n\n\nexport class CBButton extends UIButton {\n    \n    \n    constructor(elementID?: string, elementType?: string) {\n        \n        super(elementID, elementType)\n        \n    }\n    \n\n    initView(elementID: string, viewHTMLElement: HTMLElement, initViewData) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        this.style.outline = \"none\"\n        \n        this.colors.titleLabel.normal = CBColor.whiteColor\n        this.setBackgroundColorsWithNormalColor(CBColor.primaryTintColor)\n        \n        this.colors.titleLabel.selected = CBColor.primaryTintColor\n        \n        \n    }\n    \n    \n    \n    \n    \n    setBackgroundColorsWithNormalColor(normalBackgroundColor: UIColor) {\n        \n        this.colors.background.normal = normalBackgroundColor\n        \n        this.colors.background.hovered = UIColor.colorWithRGBA(40, 168, 183) // normalBackgroundColor.colorByMultiplyingRGB(0.85)\n        \n        this.colors.background.focused = normalBackgroundColor // normalBackgroundColor.colorByMultiplyingRGB(0.5)\n        \n        this.colors.background.highlighted = UIColor.colorWithRGBA(48, 196, 212) // normalBackgroundColor.colorByMultiplyingRGB(0.7)\n        \n        this.colors.background.selected = UIColor.whiteColor\n        \n        this.updateContentForCurrentState()\n        \n    }\n    \n    \n    \n    updateContentForNormalState() {\n        \n        super.updateContentForNormalState()\n        \n        this.setBorder(0, 0)\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.24)\"\n        \n    }\n    \n    \n    updateContentForHoveredState() {\n        \n        super.updateContentForHoveredState()\n        \n        this.setBorder(0, 0)\n        \n        //this.titleLabel.textColor = CBColor.whiteColor.colorByMultiplyingRGB(0.85);\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.18)\"\n        \n    }\n    \n    updateContentForFocusedState() {\n        \n        super.updateContentForFocusedState()\n        \n        this.setBorder(0, 1, CBColor.primaryContentColor)\n        \n        //this.titleLabel.textColor = CBColor.whiteColor.colorByMultiplyingRGB(0.85);\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.18)\"\n        \n    }\n    \n    \n    \n    updateContentForHighlightedState() {\n        \n        super.updateContentForHighlightedState()\n        \n        this.setBorder(0, 0)\n        \n        //this.titleLabel.textColor = CBColor.whiteColor.colorByMultiplyingRGB(0.7);\n        \n        //this.style.boxShadow = \"0 2px 2px 0 rgba(0,0,0,0.12)\"\n        \n    }\n    \n    \n    \n    \n    \n    updateContentForCurrentEnabledState() {\n        \n        super.updateContentForCurrentEnabledState()\n        \n        if (IS_NOT(this.enabled)) {\n            \n            this.titleLabel.textColor = new UIColor(\"#adadad\")\n            \n            this.backgroundColor = new UIColor(\"#e5e5e5\")\n            \n            this.alpha = 1\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { IF, IS, IS_NOT_NIL, nil, UIRectangle, UIView } from \"uicore-ts\"\n\n\nexport class RowView<CellType extends UIView = UIView> extends UIView {\n    \n    _previousLayoutBounds: UIRectangle\n    _cells: CellType[]\n    _cellWeights: number[]\n    \n    padding = 0\n    _cellWidths: number[]\n    _rowHeight = 50\n    \n    \n    constructor(elementID?: string, cells: CellType[] = [], cellWidths: number[] = []) {\n        \n        super(elementID)\n        \n        this._cells = cells\n        this._cellWeights = cellWidths\n        \n    }\n    \n    \n    \n    get cells() {\n        return this._cells\n    }\n    \n    \n    set cells(cells: CellType[]) {\n        \n        const previousCells = this.cells\n        \n        const cellWeights = this.cellWeights.copy();\n    \n    \n        // The cells are added to this._cells in this.addCell()\n        \n        previousCells.copy().forEach(function (this: RowView, cell: CellType, index: number, array: CellType[]) {\n            \n            if (!cells.contains(cell)) {\n                \n                cell.removeFromSuperview()\n                this._cells.removeElement(cell)\n                \n                cellWeights[index] = nil;\n                \n            }\n            \n        }.bind(this))\n        \n        this.cellWeights = cellWeights.filter((value, index, array) => IS_NOT_NIL(value))\n        \n        cells.copy().forEach(function (this: RowView, cell: CellType, index: number, array: CellType[]) {\n            if (!IS(cell.superview)) {\n                this.addCell(cell, 1, index)\n            }\n        }, this)\n        \n        this._previousLayoutBounds = nil\n        this.setNeedsLayout()\n        \n    }\n    \n    \n    \n    removeCellAtIndex(index: number) {\n        const remainingCells = this.cells.copy()\n        remainingCells.removeElementAtIndex(index)\n        this.cellWeights.removeElementAtIndex(index)\n        this.cells = remainingCells\n    }\n    \n    removeFirstCell() {\n        this.removeCellAtIndex(0)\n    }\n    \n    removeLastCell() {\n        this.removeCellAtIndex(this.cells.length - 1)\n    }\n    \n    \n    \n    addCell(cell: CellType, weight: number = 1, index = this.cells.length) {\n        \n        if (this.cells.contains(cell) && IS_NOT_NIL(cell)) {\n            return\n        }\n        \n        this.cells.insertElementAtIndex(index, cell)\n        this.cellWeights.insertElementAtIndex(index, weight)\n        this.addSubview(cell)\n        this.setNeedsLayout()\n        \n    }\n    \n    \n    get cellWeights() {\n        return this._cellWeights\n    }\n    \n    set cellWeights(widths: number[]) {\n        this._cellWeights = widths\n        this._previousLayoutBounds = nil\n        this.setNeedsLayout()\n    }\n    \n    get cellWidths() {\n        return this._cellWidths\n    }\n    \n    set cellWidths(widths: number[]) {\n        this._cellWidths = widths\n        this._previousLayoutBounds = nil\n        this.setNeedsLayout()\n    }\n    \n    \n    \n    get rowHeight() {\n        \n        var result = IF(this._rowHeight)(() => this._rowHeight)\n        .ELSE(() => this.cells.map((value, index, array) => value.intrinsicContentHeight(this.bounds.width)).max())\n        \n        \n        \n        \n        return result //this.bounds.height\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        const bounds = this.bounds\n        \n        if (bounds.isEqualTo(this._previousLayoutBounds)) {\n            \n            return\n            \n        }\n        \n        super.layoutSubviews()\n        \n        \n        this._previousLayoutBounds = bounds\n        \n        bounds.distributeViewsAlongWidth(this._cells, this._cellWeights, this.padding, this._cellWidths)\n        \n        this.cells.forEach(function (this: RowView, cell: UIView, index: number, array: UIView[]) {\n            \n            cell.frame = cell.frame.rectangleWithHeight(this.rowHeight)\n            \n        }.bind(this))\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { FIRST, IS, IS_NOT, nil, NO, UIObject, YES } from \"uicore-ts\"\nimport {\n    CBSocketMessage,\n    CBSocketMessageCompletionFunction,\n    CBSocketMessageHandlerFunction, CBSocketMessageSendResponseFunction, CBSocketMultipleMessage,\n    CBSocketMultipleMessagecompletionFunction, CBSocketMultipleMessageObject\n} from \"./CBDataInterfaces\"\nimport { CBSocketClient } from \"./CBSocketClient\"\n\n\n\n\n\ninterface CBSocketCallbackHolderMessageDescriptor {\n    \n    key: string;\n    message: {\n        identifier: string;\n        inResponseToIdentifier?: string;\n        keepWaitingForResponses?: boolean;\n    }\n    \n    \n    sentAtTime: number;\n    \n    //completionTriggered: boolean;\n    \n    messageDataHash: string;\n    \n    responseDataHash?: string;\n    \n    mainResponseReceived: boolean;\n    \n    anyMainResponseReceived: boolean;\n    \n    completionPolicy: string;\n    completionFunction: CBSocketMessageCompletionFunction;\n    \n}\n\n\ninterface CBSocketCallbackHolderStoredResponseObject {\n    \n    messageKey: string;\n    messageData: any;\n    messageDataHash: string;\n    \n}\n\n\n\n\nexport class CBSocketCallbackHolder extends UIObject {\n    \n    messageDescriptors: {\n        \n        [x: string]: CBSocketCallbackHolderMessageDescriptor[]\n        \n    } = {}\n    \n    handlers: {\n        [x: string]: CBSocketMessageHandlerFunction[]\n    } = {}\n    \n    onetimeHandlers: {\n        [x: string]: CBSocketMessageHandlerFunction[]\n    } = {}\n    \n    keysForIdentifiers: {\n        \n        [x: string]: string\n        \n    } = {}\n    \n    \n    isValid = YES\n    _storeableResponseKeys: string[]\n    _storedResponseHashesDictionary: {\n        \n        [x: string]: {\n            \n            hash: string,\n            validityDate: number\n            \n        }\n        \n    }\n    _verifiedResponseHashesDictionary: {\n        \n        [x: string]: boolean\n        \n    } = {}\n    \n    _socketClient: CBSocketClient\n    \n    \n    \n    \n    \n    constructor(socketClient: CBSocketClient, previousCallbackHolder?: CBSocketCallbackHolder) {\n        \n        super()\n        \n        \n        this._socketClient = socketClient\n        \n        if (IS(previousCallbackHolder)) {\n            \n            this.handlers = previousCallbackHolder.handlers\n            this._verifiedResponseHashesDictionary = previousCallbackHolder._verifiedResponseHashesDictionary\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    triggerDisconnectHandlers() {\n        \n        this.messageDescriptors.forEach(function (descriptor: CBSocketCallbackHolderMessageDescriptor, key: string) {\n            \n            if (descriptor.mainResponseReceived) {\n                \n                descriptor.completionFunction(CBSocketClient.disconnectionMessage, nil)\n                \n            }\n            \n        })\n        \n    }\n    \n    \n    \n    \n    \n    registerHandler(key: string, handlerFunction: CBSocketMessageHandlerFunction) {\n        \n        \n        if (!this.handlers[key]) {\n            \n            this.handlers[key] = []\n            \n        }\n        \n        this.handlers[key].push(handlerFunction)\n        \n        \n        \n    }\n    \n    registerOnetimeHandler(key: string, handlerFunction: CBSocketMessageHandlerFunction) {\n        \n        \n        if (!this.onetimeHandlers[key]) {\n            \n            this.onetimeHandlers[key] = []\n            \n        }\n        \n        this.onetimeHandlers[key].push(handlerFunction)\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get storedResponseHashesDictionary() {\n        \n        if (IS_NOT(this._storedResponseHashesDictionary)) {\n            \n            this._storedResponseHashesDictionary = JSON.parse(localStorage[\"CBSocketResponseHashesDictionary\"] || \"{}\")\n            \n        }\n        \n        return this._storedResponseHashesDictionary\n        \n    }\n    \n    storedResponseHashObjectForKey(requestKey: string, requestDataHash: string) {\n        \n        const localStorageKey = this.keyForRequestKeyAndRequestDataHash(requestKey, requestDataHash)\n        \n        const hashObject = this.storedResponseHashesDictionary[localStorageKey]\n        \n        const result = FIRST(hashObject, {} as any)\n        \n        \n        \n        return result\n        \n    }\n    \n    storedResponseForKey(requestKey: string, requestDataHash: string) {\n        \n        const localStorageKey = this.keyForRequestKeyAndRequestDataHash(requestKey, requestDataHash)\n        \n        const storedObject = JSON.parse(localStorage[localStorageKey] || \"{}\")\n        \n        return storedObject.responseMessageData\n        \n    }\n    \n    keyForRequestKeyAndRequestDataHash(requestKey: string, requestDataHash: string) {\n        \n        const result = \"_CBSCH_LS_key_\" + requestKey + \"_\" + requestDataHash\n        \n        return result\n        \n    }\n    \n    storeResponse(\n        requestKey: string,\n        requestDataHash: string,\n        responseMessage: CBSocketMessage<any>,\n        responseDataHash: string\n    ) {\n        \n        \n        if (!responseMessage.canBeStoredAsResponse ||\n            (IS_NOT(responseMessage.messageData) && IS_NOT(responseMessage.messageDataHash))) {\n            \n            return\n            \n        }\n        \n        \n        const localStorageKey = this.keyForRequestKeyAndRequestDataHash(requestKey, requestDataHash)\n        \n        \n        var validityDate: number\n        \n        if (responseMessage.responseValidityDuration) {\n            \n            validityDate = Date.now() + responseMessage.responseValidityDuration\n            \n        }\n        \n        const storedResponseHashesDictionary = this.storedResponseHashesDictionary\n        storedResponseHashesDictionary[localStorageKey] = {\n            \n            hash: responseDataHash,\n            validityDate: validityDate\n            \n        }\n        \n        this.saveInLocalStorage(localStorageKey, {\n            \n            responseMessageData: responseMessage.messageData,\n            responseHash: responseDataHash\n            \n        })\n        \n        \n        this.saveStoredResponseHashesDictionary(storedResponseHashesDictionary)\n        \n    }\n    \n    \n    \n    \n    \n    private saveStoredResponseHashesDictionary(storedResponseHashesDictionary: { [x: string]: { hash: string; validityDate: number; }; }) {\n        \n        this.saveInLocalStorage(\"CBSocketResponseHashesDictionary\", storedResponseHashesDictionary)\n        \n    }\n    \n    saveInLocalStorage(key: string, object: any) {\n        \n        \n        const stringToSave = JSON.stringify(object)\n        \n        if (stringToSave != localStorage[key]) {\n            \n            localStorage[key] = stringToSave\n            \n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    socketShouldSendMessage(\n        key: string,\n        message: CBSocketMessage<any>,\n        completionPolicy: string,\n        completionFunction: CBSocketMessageCompletionFunction\n    ) {\n        \n        \n        \n        var result = YES\n        \n        var triggerStoredResponseImmediately = NO\n        \n        \n        const messageDataHash = objectHash(message.messageData || nil)\n        \n        const descriptorKey = \"socketMessageDescriptor_\" + key + messageDataHash\n        \n        this.messageDescriptors[descriptorKey] = (this.messageDescriptors[descriptorKey] || [])\n        \n        \n        const hashObject = this.storedResponseHashObjectForKey(key, messageDataHash)\n        message.storedResponseHash = hashObject.hash\n        \n        \n        \n        if (completionPolicy == CBSocketClient.completionPolicy.first) {\n            \n            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || [])\n            \n            const matchingDescriptor = descriptorsForKey.find(function (descriptor, index, array) {\n                return (descriptor.messageDataHash == messageDataHash)\n            })\n            \n            if (matchingDescriptor) {\n                \n                result = NO\n                \n            }\n            \n        }\n        \n        if (completionPolicy == CBSocketClient.completionPolicy.storedOrFirst) {\n            \n            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || [])\n            \n            const matchingDescriptor = descriptorsForKey.find(function (descriptor, index, array) {\n                return (descriptor.messageDataHash == messageDataHash)\n            })\n            \n            const storedResponse = IS(message.storedResponseHash)\n            \n            if (matchingDescriptor ||\n                (storedResponse && this._verifiedResponseHashesDictionary[message.storedResponseHash])) {\n                \n                result = NO\n                \n                triggerStoredResponseImmediately = YES\n                \n            }\n            \n        }\n        \n        if (completionPolicy == CBSocketClient.completionPolicy.firstOnly) {\n            \n            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || [])\n            \n            const matchingDescriptor = descriptorsForKey.find(function (descriptor, index, array) {\n                return (descriptor.messageDataHash == messageDataHash)\n            })\n            \n            if (matchingDescriptor) {\n                \n                return NO\n                \n            }\n            \n        }\n        \n        \n        if (hashObject && hashObject.hash && hashObject.validityDate && message.storedResponseHash &&\n            this._verifiedResponseHashesDictionary[message.storedResponseHash] && hashObject.validityDate >\n            Date.now()) {\n            \n            result = NO\n            \n            triggerStoredResponseImmediately = YES\n            \n        }\n        \n        \n        if (IS(completionFunction)) {\n            \n            this.messageDescriptors[descriptorKey].push({\n                \n                key: key,\n                message: {\n                    \n                    identifier: message.identifier,\n                    inResponseToIdentifier: message.inResponseToIdentifier,\n                    keepWaitingForResponses: message.keepWaitingForResponses\n                    \n                },\n                \n                sentAtTime: Date.now(),\n                \n                //completionTriggered: NO,\n                \n                \n                messageDataHash: messageDataHash,\n                \n                mainResponseReceived: NO,\n                anyMainResponseReceived: NO,\n                \n                \n                completionPolicy: completionPolicy,\n                completionFunction: completionFunction\n                \n            })\n            \n            this.keysForIdentifiers[message.identifier] = descriptorKey\n            \n        }\n        \n        \n        if (triggerStoredResponseImmediately) {\n            \n            this.socketDidReceiveMessageForKey(\n                CBSocketClient.responseMessageKey,\n                {\n                    \n                    identifier: nil,\n                    messageData: nil,\n                    \n                    inResponseToIdentifier: message.identifier,\n                    \n                    useStoredResponse: YES\n                    \n                },\n                nil\n            )\n            \n        }\n        \n        \n        return result\n        \n        \n    }\n    \n    \n    \n    \n    \n    static defaultMultipleMessagecompletionFunction(responseMessages: any[], callcompletionFunctions: () => void) {\n        callcompletionFunctions()\n    }\n    \n    \n    socketWillSendMultipleMessage(\n        messageToSend: CBSocketMultipleMessage,\n        completionFunction: CBSocketMultipleMessagecompletionFunction = CBSocketCallbackHolder.defaultMultipleMessagecompletionFunction\n    ) {\n        \n        \n        \n        const key = CBSocketClient.multipleMessageKey\n        \n        \n        const messageDataHash = objectHash(messageToSend.messageData || nil)\n        \n        const descriptorKey = \"socketMessageDescriptor_\" + key + messageDataHash\n        \n        this.messageDescriptors[descriptorKey] = (this.messageDescriptors[descriptorKey] || [])\n        \n        \n        messageToSend.storedResponseHash = this.storedResponseHashObjectForKey(key, messageDataHash).hash\n        \n        \n        \n        \n        \n        this.messageDescriptors[descriptorKey].push({\n            \n            key: key,\n            message: {\n                \n                identifier: messageToSend.identifier,\n                inResponseToIdentifier: messageToSend.inResponseToIdentifier,\n                keepWaitingForResponses: messageToSend.keepWaitingForResponses\n                \n            },\n            \n            sentAtTime: Date.now(),\n            \n            //completionTriggered: NO,\n            \n            \n            messageDataHash: messageDataHash,\n            \n            mainResponseReceived: NO,\n            anyMainResponseReceived: NO,\n            \n            \n            completionPolicy: CBSocketClient.completionPolicy.directOnly,\n            completionFunction: function (\n                this: CBSocketCallbackHolder,\n                responseMessage: CBSocketMultipleMessageObject[],\n                respondWithMessage\n            ) {\n                \n                completionFunction(\n                    responseMessage.map(function (messageObject, index, array) {\n                        \n                        return messageObject.message.messageData\n                        \n                    }),\n                    function (this: CBSocketCallbackHolder) {\n                        \n                        //console.log(\"Received multiple message response with length of \" + responseMessage.length + \".\");\n                        \n                        // Call all completion functions\n                        responseMessage.forEach(function (\n                            this: CBSocketCallbackHolder,\n                            messageObject: CBSocketMultipleMessageObject,\n                            index: number,\n                            array: CBSocketMultipleMessageObject[]\n                        ) {\n                            \n                            this._socketClient.didReceiveMessageForKey(messageObject.key, messageObject.message)\n                            \n                        }.bind(this))\n                        \n                    }.bind(this)\n                )\n                \n            }.bind(this)\n            \n        })\n        \n        this.keysForIdentifiers[messageToSend.identifier] = descriptorKey\n        \n        \n    }\n    \n    \n    \n    \n    \n    socketDidReceiveMessageForKey(\n        key: string,\n        message: CBSocketMessage<any>,\n        sendResponseFunction: CBSocketMessageSendResponseFunction\n    ) {\n        \n        \n        if (!this.isValid) {\n            \n            return\n            \n        }\n        \n        \n        // Call static handlers\n        if (this.handlers[key]) {\n            \n            this.handlers[key].forEach(function (\n                this: CBSocketCallbackHolder,\n                handler: CBSocketMessageHandlerFunction,\n                index,\n                array\n            ) {\n                \n                handler(message.messageData, sendResponseFunction)\n                \n            }.bind(this))\n            \n        }\n        \n        if (this.onetimeHandlers[key]) {\n            \n            this.onetimeHandlers[key].forEach(function (\n                this: CBSocketCallbackHolder,\n                handler: CBSocketMessageHandlerFunction,\n                index,\n                array\n            ) {\n                \n                handler(message.messageData, sendResponseFunction)\n                \n            }.bind(this))\n            \n            delete this.onetimeHandlers[key]\n            \n        }\n        \n        \n        \n        // Temporary response handlers are evaluated here\n        if (message.inResponseToIdentifier &&\n            (CBSocketClient.responseMessageKey == key || CBSocketClient.multipleMessageKey == key)) {\n            \n            // Find descriptors for the key of the message that is being responded to\n            const descriptorKey = this.keysForIdentifiers[message.inResponseToIdentifier]\n            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || [])\n            \n            // Find response data hash to check for differences\n            const responseDataHash = message.messageDataHash\n            \n            // Remove identifier from dictionary\n            if (!message.keepWaitingForResponses) {\n                \n                delete this.keysForIdentifiers[message.inResponseToIdentifier]\n                \n                delete this.messageDescriptors[descriptorKey]\n                \n            }\n            \n            \n            // Function to call completion function\n            const callCompletionFunction = (descriptor, storedResponseCondition = NO) => {\n                \n                var messageData = message.messageData\n                \n                if (message.useStoredResponse && storedResponseCondition) {\n                    \n                    messageData = this.storedResponseForKey(descriptor.key, descriptor.messageDataHash)\n                    \n                    const responseHash = this.storedResponseHashObjectForKey(\n                        descriptor.key,\n                        descriptor.messageDataHash\n                    ).hash\n                    \n                    const localStorageKey = this.keyForRequestKeyAndRequestDataHash(\n                        descriptor.key,\n                        descriptor.messageDataHash\n                    )\n                    \n                    if (message.responseValidityDuration && this.storedResponseHashesDictionary[localStorageKey]) {\n                        \n                        this.storedResponseHashesDictionary[localStorageKey].validityDate = Date.now() +\n                            message.responseValidityDuration\n                        \n                        this.saveStoredResponseHashesDictionary(this.storedResponseHashesDictionary)\n                        \n                    }\n                    \n                    this._verifiedResponseHashesDictionary[responseHash] = YES\n                    \n                    console.log(\"Using stored response.\")\n                    \n                }\n                \n                // Call completionFunction and set response data hash\n                descriptor.completionFunction(messageData, sendResponseFunction)\n                descriptor.responseDataHash = responseDataHash\n                \n            }\n            \n            \n            descriptorsForKey.copy().forEach(function (\n                this: CBSocketCallbackHolder,\n                descriptor: CBSocketCallbackHolderMessageDescriptor,\n                index: number,\n                array: CBSocketCallbackHolderMessageDescriptor[]\n            ) {\n                \n                \n                if ((descriptor.completionPolicy == CBSocketClient.completionPolicy.directOnly &&\n                        descriptor.message.identifier == message.inResponseToIdentifier) || descriptor.completionPolicy ==\n                    CBSocketClient.completionPolicy.first || descriptor.completionPolicy ==\n                    CBSocketClient.completionPolicy.firstOnly || descriptor.completionPolicy ==\n                    CBSocketClient.completionPolicy.storedOrFirst) {\n                    \n                    // Calling completion function and removing descriptor\n                    \n                    if (!message.keepWaitingForResponses) {\n                        \n                        this.storeResponse(descriptor.key, descriptor.messageDataHash, message, responseDataHash)\n                        \n                        descriptorsForKey.removeElement(descriptor)\n                        \n                        sendResponseFunction.respondingToMainResponse = YES\n                        \n                    }\n                    \n                    callCompletionFunction(descriptor, !message.keepWaitingForResponses)\n                    \n                }\n                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.all) {\n                    \n                    // Calling completion function\n                    callCompletionFunction(descriptor, !message.keepWaitingForResponses)\n                    \n                    // Marking descriptor as having been responded to\n                    if (!message.keepWaitingForResponses) {\n                        \n                        if (message.inResponseToIdentifier == descriptor.message.identifier) {\n                            \n                            sendResponseFunction.respondingToMainResponse = YES\n                            descriptor.mainResponseReceived = YES\n                            descriptorsForKey.removeElement(descriptor)\n                            \n                        }\n                        \n                        descriptor.anyMainResponseReceived = YES\n                        \n                    }\n                    \n                    \n                    \n                }\n                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.allDifferent) {\n                    \n                    // Calling completionFunction if messageData is different from previous\n                    if (descriptor.responseDataHash != responseDataHash) {\n                        \n                        callCompletionFunction(descriptor, !message.keepWaitingForResponses)\n                        \n                    }\n                    \n                    // Marking descriptor as having been responded to\n                    if (!message.keepWaitingForResponses) {\n                        \n                        if (message.inResponseToIdentifier == descriptor.message.identifier) {\n                            \n                            sendResponseFunction.respondingToMainResponse = YES\n                            descriptor.mainResponseReceived = YES\n                            descriptorsForKey.removeElement(descriptor)\n                            \n                        }\n                        \n                        descriptor.anyMainResponseReceived = YES\n                        \n                    }\n                    \n                }\n                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.last &&\n                    descriptor.message.identifier == message.inResponseToIdentifier) {\n                    \n                    if (!message.keepWaitingForResponses) {\n                        \n                        // Marking descriptor as having been responded to\n                        descriptor.mainResponseReceived = YES\n                        descriptor.anyMainResponseReceived = YES\n                        \n                        sendResponseFunction.respondingToMainResponse = YES\n                        \n                    }\n                    else {\n                        \n                        descriptor.completionFunction(message.messageData, sendResponseFunction)\n                        \n                    }\n                    \n                }\n                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLast ||\n                    descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLastIfDifferent) {\n                    \n                    if (!message.keepWaitingForResponses) {\n                        \n                        // Only calling completionFunction once as a first response call\n                        if (!descriptor.anyMainResponseReceived) {\n                            \n                            callCompletionFunction(descriptor, !message.keepWaitingForResponses)\n                            \n                        }\n                        \n                        // Marking descriptor as having been responded to\n                        if (descriptor.message.identifier == message.inResponseToIdentifier) {\n                            \n                            descriptor.mainResponseReceived = YES\n                            sendResponseFunction.respondingToMainResponse = YES\n                            \n                        }\n                        \n                        descriptor.anyMainResponseReceived = YES\n                        \n                    }\n                    else if (descriptor.message.identifier == message.inResponseToIdentifier &&\n                        message.keepWaitingForResponses) {\n                        \n                        descriptor.completionFunction(message.messageData, sendResponseFunction)\n                        \n                    }\n                    \n                }\n                \n            }.bind(this))\n            \n            \n            \n            \n            \n            // Last message completion policies\n            \n            const allResponsesReceived = descriptorsForKey.allMatch(function (descriptorObject, index, array) {\n                return descriptorObject.mainResponseReceived\n            })\n            \n            descriptorsForKey.copy().forEach(function (\n                this: CBSocketCallbackHolder,\n                descriptor: CBSocketCallbackHolderMessageDescriptor,\n                index: number,\n                array: CBSocketCallbackHolderMessageDescriptor[]\n            ) {\n                \n                if ((descriptor.completionPolicy == CBSocketClient.completionPolicy.last ||\n                        descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLast) &&\n                    allResponsesReceived && !message.keepWaitingForResponses) {\n                    \n                    // Calling completionFunction\n                    callCompletionFunction(descriptor, !message.keepWaitingForResponses)\n                    \n                    // Cleaning up\n                    descriptorsForKey.removeElement(descriptor)\n                    \n                }\n                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLastIfDifferent &&\n                    allResponsesReceived && !message.keepWaitingForResponses) {\n                    \n                    // Calling completionFunction if needed\n                    if (descriptor.responseDataHash != responseDataHash) {\n                        \n                        callCompletionFunction(descriptor, !message.keepWaitingForResponses)\n                        \n                    }\n                    \n                    // Cleaning up\n                    descriptorsForKey.removeElement(descriptor)\n                    \n                }\n                \n            }.bind(this))\n            \n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIColor, UIRoute, UIViewController } from \"uicore-ts\"\nimport { CBCore } from \"./CBCore/CBCore\"\nimport { RootViewParameters } from \"./RootViewParameters\"\n\n\nexport class InformationViewController extends UIViewController {\n    \n    \n    constructor(view) {\n        \n        super(view)\n        \n        // Code for further setup if necessary\n    \n        this.view.backgroundColor = UIColor.whiteColor\n        \n    }\n    \n    \n    static readonly routeComponentName = \"information\"\n    \n    static readonly ParameterIdentifierName = {\n        \n        \"key\": \"key\"\n        \n    }\n    \n    \n    async handleRoute(route: UIRoute) {\n        \n        super.handleRoute(route)\n        \n        CBCore.sharedInstance.didSetLanguageKey()\n    \n        const inquiryComponent = route.componentWithName(InformationViewController.routeComponentName)\n    \n        const key = inquiryComponent.parameters[InformationViewController.ParameterIdentifierName.key]\n    \n        this.view.setInnerHTML(key, \"Failed to load data for key\")\n        \n        this.view.setNeedsLayoutUpToRootView()\n        \n        // @ts-ignore\n        const imgLoad = imagesLoaded(this.view.viewHTMLElement)\n    \n        const imagesDidLoad = function (this: InformationViewController, instance) {\n            \n            console.log(\"ALWAYS - all images have been loaded\")\n            this.view.setNeedsLayoutUpToRootView()\n            \n            imgLoad.off(\"always\", imagesDidLoad)\n            \n            \n        }.bind(this)\n        \n        imgLoad.on(\"always\", imagesDidLoad)\n        \n    }\n    \n    \n    \n    updateViewConstraints() {\n        \n        super.updateViewConstraints()\n        \n    }\n    \n    \n    \n    updateViewStyles() {\n        \n        super.updateViewStyles()\n        \n    }\n    \n    \n    \n    viewDidLayoutSubviews() {\n        \n        super.viewDidLayoutSubviews()\n        \n    }\n    \n    \n    \n    layoutViewSubviews() {\n        \n        super.layoutViewSubviews()\n    \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding\n    \n        // View bounds\n        const bounds = this.view.bounds.rectangleWithInset(padding)\n    \n    \n    \n    \n    \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    FIRST,\n    IS,\n    IS_DEFINED, IS_NOT,\n    MAKE_ID, nil,\n    NO, UIButton,\n    UIColor, UIRoute, UITableView,\n    UITextArea,\n    UITextView,\n    UIView,\n    UIViewController,\n    YES\n} from \"uicore-ts\"\nimport { CBColor } from \"./CBCore/CBColor\"\nimport { CBCore } from \"./CBCore/CBCore\"\nimport { CBDropdownData, CBDropdownDataItem } from \"./CBCore/CBDataInterfaces\"\nimport { SocketClient } from \"./CBCore/CBSocketClient\"\nimport { CBButton } from \"./Custom components/CBButton\"\nimport { CBCheckbox } from \"./Custom components/CBCheckbox\"\nimport { CBDialogViewShower } from \"./Custom components/CBDialogViewShower\"\nimport { CBTextField } from \"./Custom components/CBTextField\"\nimport { LanguageService } from \"./Custom components/LanguageService\"\nimport { SearchableDropdown } from \"./Custom components/SearchableDropdown\"\nimport { RootViewParameters } from \"./RootViewParameters\"\n\n\n\n\n\n\nexport class InternalDropdownSettingsViewController extends UIViewController {\n    \n    \n    titleLabel: UITextView\n    loadButton: UIButton\n    dropdownCodeTextField: CBTextField\n    tableView: UITableView\n    textArea: UITextArea\n    dropdown: SearchableDropdown<undefined>\n    saveButton: CBButton\n    deleteButton: CBButton\n    addButton: CBButton\n    itemTitleOrAttachedObjectTextArea: UITextArea\n    isASectionCheckbox: CBCheckbox\n    downButton: CBButton\n    upButton: CBButton\n    itemTitleJSONLabel: UITextView\n    dropdownCodesTextArea: UITextArea\n    deleteDropdownButton: CBButton\n    \n    itemCodeTextField: CBTextField\n    clearDropdownButton: CBButton\n    dataTextArea: UITextArea\n    dataTextJSONLabel: UITextView\n    loadPlainDataButton: CBButton\n    loadJSONDataButton: CBButton\n    itemTitleCheckbox: CBCheckbox\n    itemAttachedObjectCheckbox: CBCheckbox\n    \n    \n    constructor(view) {\n        \n        super(view)\n        \n        // Code for further setup if necessary\n        \n        this.loadSubviews()\n        \n    }\n    \n    \n    static readonly routeComponentName = \"internal_dropdown_settings\"\n    \n    static readonly ParameterIdentifierName = {}\n    \n    \n    loadSubviews() {\n        \n        \n        this.view.backgroundColor = UIColor.whiteColor\n        \n        \n        this.titleLabel = new UITextView(this.view.elementID + \"TitleLabel\", UITextView.type.header2)\n        this.titleLabel.text = \"Internal dropdown settings\"\n        this.view.addSubview(this.titleLabel)\n        \n        \n        \n        this.dropdownCodeTextField = new CBTextField(this.view.elementID + \"DropdownCodeTextField\")\n        this.dropdownCodeTextField.placeholderText = \"Dropdown code\"\n        this.view.addSubview(this.dropdownCodeTextField)\n        \n        this.dropdownCodesTextArea = new UITextArea(this.view.elementID + \"DropdownCodesTextArea\")\n        this.dropdownCodesTextArea.placeholderText = \"Available dropdown codes\"\n        this.view.addSubview(this.dropdownCodesTextArea)\n        \n        \n        this.loadButton = new CBButton(this.view.elementID + \"LoadButton\")\n        this.loadButton.titleLabel.text = \"Load\"\n        this.view.addSubview(this.loadButton)\n        \n        this.saveButton = new CBButton(this.view.elementID + \"SaveButton\")\n        this.saveButton.titleLabel.setText(\"internalDropdownSettingsViewControllerSaveButton\", \"Save\")\n        this.view.addSubview(this.saveButton)\n        \n        \n        // this.textArea = new UITextArea(this.view.elementID + \"TextArea\")\n        // this.view.addSubview(this.textArea)\n        \n        \n        this.dropdown = new SearchableDropdown(this.view.elementID + \"SearchableDropdown\")\n        this.dropdown._controlEventTargets[UIView.controlEvent.PointerUpInside] = []\n        this.dropdown._controlEventTargets[UIView.controlEvent.EnterDown] = []\n        this.dropdown._dialogView = nil\n        this.dropdown.isSingleSelection = YES\n        this.dropdown._rightImageView.imageSource = nil\n        this.dropdown.keepFocusedRowVisible = NO\n        this.view.addSubview(this.dropdown)\n        \n        this.dropdown._tableView.style.borderWidth = \"1px\"\n        this.dropdown._tableView.style.borderStyle = \"solid\"\n        this.dropdown._tableView.style.borderColor = CBColor.primaryContentColor.stringValue\n        this.view.addSubview(this.dropdown._tableView)\n        \n        \n        this.addButton = new CBButton(this.view.elementID + \"AddButton\")\n        this.addButton.titleLabel.text = \"Add row\"\n        this.addButton.setBackgroundColorsWithNormalColor(UIColor.greenColor)\n        this.view.addSubview(this.addButton)\n        \n        this.deleteButton = new CBButton(this.view.elementID + \"DeleteButton\")\n        this.deleteButton.titleLabel.text = \"Delete row\"\n        this.deleteButton.setBackgroundColorsWithNormalColor(UIColor.redColor)\n        this.view.addSubview(this.deleteButton)\n        \n        \n        this.deleteDropdownButton = new CBButton(this.view.elementID + \"DeleteDropdownButton\")\n        this.deleteDropdownButton.titleLabel.text = \"Delete dropdown\"\n        this.deleteDropdownButton.setBackgroundColorsWithNormalColor(UIColor.redColor)\n        this.view.addSubview(this.deleteDropdownButton)\n        \n        this.clearDropdownButton = new CBButton(this.view.elementID + \"ClearDropdownButton\")\n        this.clearDropdownButton.titleLabel.text = \"Clear dropdown\"\n        this.clearDropdownButton.setBackgroundColorsWithNormalColor(UIColor.redColor)\n        this.view.addSubview(this.clearDropdownButton)\n        \n        \n        \n        // Selecting of purpose of itemtitleTextArea\n        this.itemTitleCheckbox = new CBCheckbox(this.view.elementID + \"ItemTitleCheckbox\")\n        this.itemAttachedObjectCheckbox = new CBCheckbox(this.view.elementID + \"ItemTitleCheckbox\")\n        \n        this.itemTitleCheckbox.titleLabel.text = \"Item title\"\n        this.itemAttachedObjectCheckbox.titleLabel.text = \"Attached object\"\n        \n        this.itemTitleCheckbox.selected = YES\n        \n        this.view.addSubviews([this.itemTitleCheckbox, this.itemAttachedObjectCheckbox])\n        \n        \n        \n        this.itemTitleOrAttachedObjectTextArea = new UITextArea(this.view.elementID +\n            \"ItemTitleOrAttachedObjectTextArea\")\n        this.itemTitleOrAttachedObjectTextArea.placeholderText = \"Title\"\n        this.view.addSubview(this.itemTitleOrAttachedObjectTextArea)\n        \n        this.itemTitleJSONLabel = new UITextView(this.view.elementID + \"ItemTitleJSONLabel\")\n        this.view.addSubview(this.itemTitleJSONLabel)\n        \n        this.itemTitleDidChange()\n        \n        \n        this.isASectionCheckbox = new CBCheckbox(this.view.elementID + \"IsASectionCheckbox\")\n        this.isASectionCheckbox.titleLabel.text = \"Is a section\"\n        this.view.addSubview(this.isASectionCheckbox)\n        \n        \n        \n        this.itemCodeTextField = new CBTextField(this.view.elementID + \"ItemCodeTextField\")\n        this.itemCodeTextField.placeholderText = \"Item code\"\n        this.view.addSubview(this.itemCodeTextField)\n        \n        \n        \n        this.downButton = new CBButton(this.view.elementID + \"DownButton\")\n        this.downButton.titleLabel.text = \"Down\"\n        this.view.addSubview(this.downButton)\n        \n        this.upButton = new CBButton(this.view.elementID + \"UpButton\")\n        this.upButton.titleLabel.text = \"Up\"\n        this.view.addSubview(this.upButton)\n        \n        \n        \n        this.dataTextJSONLabel = new UITextView(this.view.elementID + \"DataTextJSONLabel\")\n        this.dataTextJSONLabel.text = \"Data in JSON format\"\n        this.view.addSubview(this.dataTextJSONLabel)\n        \n        this.dataTextArea = new UITextArea(this.view.elementID + \"DataTextArea\")\n        this.dataTextArea.placeholderText = \"Data in JSON format\"\n        this.view.addSubview(this.dataTextArea)\n        \n        this.loadPlainDataButton = new CBButton(this.view.elementID + \"LoadPlainDataButton\")\n        this.loadPlainDataButton.titleLabel.text = \"Load plain data\"\n        this.view.addSubview(this.loadPlainDataButton)\n        \n        this.loadJSONDataButton = new CBButton(this.view.elementID + \"LoadJSONDataButton\")\n        this.loadJSONDataButton.titleLabel.text = \"Load JSON data\"\n        this.view.addSubview(this.loadJSONDataButton);\n        \n        \n        \n        \n        \n        [\n            this.itemTitleCheckbox, this.itemAttachedObjectCheckbox\n        ].forEach(function (\n            this: InternalDropdownSettingsViewController,\n            checkbox: CBCheckbox,\n            index: number,\n            array: CBCheckbox[]\n        ) {\n            \n            checkbox.addTargetForControlEvents([\n                CBCheckbox.controlEvent.EnterDown, CBCheckbox.controlEvent.SelectionChange\n            ], function (this: InternalDropdownSettingsViewController, sender: CBCheckbox, event: Event) {\n                \n                [\n                    this.itemTitleCheckbox, this.itemAttachedObjectCheckbox\n                ].forEach(function (checkboxObject, index, array) {\n                    \n                    checkboxObject.selected = (checkboxObject == sender)\n                    \n                })\n                \n                this.updateitemDetailsView()\n                \n            }.bind(this))\n            \n            \n            \n        }.bind(this))\n        \n        \n        \n        \n        \n        this.downButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n    \n                const data = this.dropdown.drawingData\n    \n                const rowIndex = this.dropdown.selectedIndices.firstElement\n    \n                if (this.dropdown.selectedData.firstElement && rowIndex < data.length - 1) {\n    \n                    const row = data[rowIndex]\n    \n                    data.removeElementAtIndex(rowIndex)\n                    \n                    data.insertElementAtIndex(rowIndex + 1, row)\n                    \n                    this.dropdown.selectedIndices[0] = rowIndex + 1\n                    \n                    this.dropdown._drawingData = data\n                    \n                    this.reloadTableData()\n                    \n                }\n                \n                \n            }.bind(this)\n        )\n        \n        this.upButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n    \n                const data = this.dropdown.drawingData\n    \n                const rowIndex = this.dropdown.selectedIndices.firstElement\n    \n                if (this.dropdown.selectedData.firstElement && rowIndex > 0) {\n    \n                    const row = data[rowIndex]\n    \n                    data.removeElementAtIndex(rowIndex)\n                    \n                    data.insertElementAtIndex(rowIndex - 1, row)\n                    \n                    this.dropdown.selectedIndices[0] = rowIndex - 1\n                    \n                    this.dropdown._drawingData = data\n                    \n                    this.reloadTableData()\n                    \n                }\n                \n                \n            }.bind(this)\n        )\n        \n        \n        this.dropdown.addTargetForControlEvent(\n            SearchableDropdown.controlEvent.SelectionDidChange,\n            function (\n                this: InternalDropdownSettingsViewController,\n                sender: SearchableDropdown<undefined>,\n                event: Event\n            ) {\n                \n                this.updateitemDetailsView()\n                \n            }.bind(this)\n        )\n        \n        this.isASectionCheckbox.addTargetForControlEvent(\n            CBCheckbox.controlEvent.SelectionChange,\n            function (this: InternalDropdownSettingsViewController, sender: CBCheckbox, event: Event) {\n    \n                const selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n    \n                selectedItem.isADropdownDataSection = sender.selected\n                selectedItem.isADropdownDataRow = IS_NOT(sender.selected)\n                \n                \n                this.reloadTableData()\n                \n                \n            }.bind(this)\n        )\n        \n        this.itemCodeTextField.textField.addTargetForControlEvent(\n            UITextArea.controlEvent.TextChange,\n            function (this: InternalDropdownSettingsViewController, sender: CBTextField, event: Event) {\n    \n                const selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n    \n                selectedItem.itemCode = this.itemCodeTextField.text\n                \n            }.bind(this)\n        )\n        \n        this.itemTitleOrAttachedObjectTextArea.addTargetForControlEvent(\n            UITextArea.controlEvent.TextChange,\n            function (this: InternalDropdownSettingsViewController, sender: CBTextField, event: Event) {\n                \n                if (this.itemTitleCheckbox.selected) {\n                    \n                    this.itemTitleDidChange()\n                    \n                }\n                else {\n                    \n                    this.itemAttachedObjectDidChange()\n                    \n                }\n                \n                \n                \n                this.reloadTableData()\n                \n                \n            }.bind(this)\n        )\n        \n        \n        //this.loadSubjectData()\n        \n        this.updateAvailableCodes()\n        \n        \n        this.loadButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n                \n                this.loadData()\n                \n            }.bind(this)\n        )\n        \n        this.saveButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n                \n                CBCore.sharedInstance.socketClient.sendMessageForKey(\n                    \"RetrieveDropdownCodes\",\n                    nil,\n                    function (this: InternalDropdownSettingsViewController, codes: string[]) {\n                        \n                        \n                        \n                        this.saveData()\n                        \n                        \n                    }.bind(this)\n                )\n                \n                \n                \n            }.bind(this)\n        )\n        \n        this.addButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n    \n                const title = JSON.parse(this.itemTitleOrAttachedObjectTextArea.text)\n    \n                if (IS_NOT(LanguageService.stringForCurrentLanguage(title))) {\n                    \n                    title[LanguageService.defaultLanguageKey] = \"<Title>\"\n                    \n                }\n    \n    \n                const itemID = MAKE_ID();\n    \n                const dataRow: CBDropdownDataItem<undefined> = {\n        \n                    _id: itemID,\n                    title: title,\n                    isADropdownDataRow: !this.isASectionCheckbox.selected,\n                    isADropdownDataSection: this.isASectionCheckbox.selected,\n        \n                    attachedObject: undefined,\n        \n                    itemCode: nil,\n                    dropdownCode: (this.dropdown.selectedData.firstElement || {} as any).dropdownCodes\n        \n                }\n    \n                const rowIndex = this.dropdown.selectedIndices.firstElement\n    \n                if (IS_DEFINED(rowIndex)) {\n                    \n                    this.dropdown.drawingData.insertElementAtIndex(rowIndex + 1, dataRow)\n                    \n                    this.reloadTableData()\n                    \n                }\n                else {\n                    \n                    this.dropdown.drawingData.push(dataRow)\n                    \n                    this.reloadTableData()\n                    \n                    this.dropdown._tableView.scrollToBottom()\n                    \n                }\n                \n                \n                \n                \n            }.bind(this)\n        )\n        \n        this.deleteButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n    \n                const rowIndex = this.dropdown.selectedIndices.firstElement\n    \n                if (IS_DEFINED(rowIndex)) {\n                    \n                    this.dropdown.drawingData.removeElementAtIndex(rowIndex)\n                    \n                    this.dropdown.selectedData.removeElementAtIndex(0)\n                    this.dropdown.selectedIndices.removeElementAtIndex(0)\n                    \n                    this.dropdown.selectionDidChange(this.dropdown.selectedData)\n                    \n                }\n                \n                this.reloadTableData()\n                \n            }.bind(this)\n        )\n        \n        this.deleteDropdownButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n                \n                \n                if (this.dropdownCodeTextField.text && confirm(\"Are you sure you want to delete this dropdown?\")) {\n                    \n                    if (this.dropdownCodeTextField.text &&\n                        confirm(\"This will REMOVE THE DROPDOWN FROM THE SERVER, are you definitely sure?\")) {\n                        \n                        CBCore.sharedInstance.socketClient.sendMessageForKey(\n                            \"DeleteDropdownDataForCode\",\n                            this.dropdownCodeTextField.text,\n                            function (this: InternalDropdownSettingsViewController) {\n                                \n                                this.updateAvailableCodes()\n                                \n                            }.bind(this)\n                        )\n                        \n                        this.dropdownCodeTextField.text = nil\n                        \n                        this.dropdown.data = []\n                        \n                        this.updateitemDetailsView()\n                        \n                    }\n                    \n                }\n                \n            }.bind(this)\n        )\n        \n        this.clearDropdownButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n                \n                \n                if (this.dropdownCodeTextField.text && confirm(\"Are you sure you want to clear this dropdown?\")) {\n                    \n                    this.dropdown.data = []\n                    \n                    this.dropdown.selectedData = []\n                    \n                    this.dropdown.selectedIndices = []\n                    \n                    this.updateitemDetailsView()\n                    \n                }\n                \n            }.bind(this)\n        )\n        \n        \n        this.loadPlainDataButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n                \n                this.loadPlainData()\n                \n            }.bind(this)\n        )\n        \n        this.loadJSONDataButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalDropdownSettingsViewController, sender: UIButton, event: Event) {\n                \n                this.loadJSONData()\n                \n            }.bind(this)\n        )\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    reloadTableData() {\n        \n        this.dropdown._tableView.reloadData()\n    \n    \n        const dataToShow = {}\n    \n    \n        this.dropdown.drawingData.forEach(function (dataItem, index, array) {\n            \n            dataToShow[FIRST(dataItem.itemCode, dataItem._id)] = dataItem.title\n            \n        })\n        \n        \n        this.dataTextArea.text = JSON.stringify(dataToShow, null, 2)\n        \n    }\n    \n    \n    \n    \n    \n    async updateAvailableCodes() {\n    \n    \n        var { result: codes } = await SocketClient.RetrieveDropdownCodes()\n    \n        this.dropdownCodesTextArea.text = \"Saved codes: \" + JSON.stringify(codes)\n        \n        if (codes.length && IS_NOT(this.dropdownCodeTextField.text)) {\n            \n            this.dropdownCodeTextField.text = codes.firstElement\n            \n            this.loadData()\n            \n        }\n        \n        \n        \n        \n    }\n    \n    \n    updateitemDetailsView() {\n    \n        const selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n    \n    \n        if (IS(selectedItem)) {\n            \n            if (this.itemTitleCheckbox.selected) {\n                \n                this.itemTitleOrAttachedObjectTextArea.text = JSON.stringify(selectedItem.title, null, 2)\n                this.itemTitleDidChange()\n                \n            }\n            else {\n                \n                this.itemTitleOrAttachedObjectTextArea.text = JSON.stringify(selectedItem.attachedObject, null, 2)\n                this.itemAttachedObjectDidChange()\n                \n            }\n            \n            \n            \n            this.itemCodeTextField.text = selectedItem.itemCode\n            \n        }\n        \n        this.isASectionCheckbox.selected = IS(selectedItem.isADropdownDataSection)\n        \n        \n        \n    }\n    \n    async loadData() {\n        \n        if (IS_NOT(this.dropdownCodeTextField.text)) {\n            \n            this.loadSubjectData()\n            \n            return\n            \n        }\n    \n        var { result: responseMessage } = await SocketClient.RetrieveDropdownDataForCode(this.dropdownCodeTextField.text)\n    \n        this._triggerLayoutViewSubviews()\n        \n        if (IS(responseMessage)) {\n            \n            CBDialogViewShower.alert(\"Loaded data.\")\n            \n        }\n        else {\n            \n            CBDialogViewShower.alert(\"Failed to load data.\")\n            \n            return\n            \n        }\n    \n        const dropdownData: CBDropdownDataItem<undefined>[] = []\n    \n        responseMessage.data.forEach(function (sectionOrRow, index, array) {\n            \n            if (sectionOrRow.isADropdownDataSection) {\n    \n    \n                const dataSection: CBDropdownDataItem<undefined> = {\n        \n                    _id: sectionOrRow._id,\n                    title: sectionOrRow.title,\n                    rowsData: [],\n                    isADropdownDataSection: YES,\n                    isADropdownDataRow: NO,\n        \n                    attachedObject: sectionOrRow.attachedObject,\n        \n                    itemCode: sectionOrRow.itemCode,\n                    dropdownCode: sectionOrRow.dropdownCode\n        \n                }\n    \n                const rowsData = dataSection.rowsData\n    \n                sectionOrRow.rowsData.forEach(function (rowData, index, array) {\n                    \n                    rowsData.push({\n                        \n                        _id: rowData._id,\n                        title: rowData.title,\n                        isADropdownDataSection: NO,\n                        isADropdownDataRow: YES,\n                        \n                        attachedObject: rowData.attachedObject,\n                        \n                        itemCode: rowData.itemCode,\n                        dropdownCode: rowData.dropdownCode\n                        \n                    })\n                    \n                })\n                \n                dataSection.rowsData = rowsData\n                \n                dropdownData.push(dataSection)\n                \n            }\n            else {\n                \n                dropdownData.push({\n                    \n                    _id: sectionOrRow._id,\n                    title: sectionOrRow.title,\n                    attachedObject: sectionOrRow.attachedObject,\n                    isADropdownDataRow: YES,\n                    \n                    itemCode: sectionOrRow.itemCode,\n                    dropdownCode: sectionOrRow.dropdownCode\n                    \n                } as any)\n                \n            }\n            \n            \n            \n            \n            \n        })\n        \n        this.dropdown.selectedData.removeElementAtIndex(0)\n        this.dropdown.selectedIndices.removeElementAtIndex(0)\n        \n        this.dropdown.data = dropdownData\n        \n        this.reloadTableData()\n        \n        this.updateitemDetailsView()\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    async saveData() {\n    \n    \n        const uploadData: CBDropdownData<undefined> = {\n        \n            dropdownCode: this.dropdownCodeTextField.text,\n            data: []\n        \n        } as any\n    \n        var currentRowsTarget = uploadData.data\n    \n        this.dropdown.drawingData.forEach(function (\n            this: InternalDropdownSettingsViewController,\n            item: CBDropdownDataItem<undefined>,\n            index: number,\n            array: CBDropdownDataItem<undefined>[]\n        ) {\n            \n            \n            \n            if ((item as CBDropdownDataItem<undefined>).isADropdownDataSection) {\n                \n                \n                currentRowsTarget = []\n                \n                uploadData.data.push({\n                    \n                    title: item.title,\n                    attachedObject: item.attachedObject,\n                    rowsData: currentRowsTarget,\n                    isADropdownDataSection: YES,\n                    isADropdownDataRow: NO,\n                    \n                    itemCode: FIRST(item.itemCode, item._id),\n                    dropdownCode: uploadData.dropdownCode\n                    \n                } as any)\n                \n                \n                \n            }\n            else {\n                \n                \n                currentRowsTarget.push({\n                    \n                    \n                    title: item.title,\n                    attachedObject: item.attachedObject,\n                    isADropdownDataSection: NO,\n                    isADropdownDataRow: YES,\n                    \n                    itemCode: FIRST(item.itemCode, item._id),\n                    dropdownCode: uploadData.dropdownCode\n                    \n                } as any)\n                \n                \n            }\n            \n            \n        }.bind(this))\n        \n        \n        // Send the data to server to be saved\n    \n        var { result: response } = await SocketClient.SaveDropdownData(uploadData)\n    \n        this.updateAvailableCodes()\n        \n        if (IS(response)) {\n            \n            CBDialogViewShower.alert(\"Saved successfully.\")\n            \n            this.loadData()\n            \n        }\n        else {\n            \n            CBDialogViewShower.alert(\"Failed to save dropdown data.\")\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    loadPlainData() {\n    \n    \n        const drawingData: CBDropdownDataItem<undefined>[] = []\n    \n        const lines = this.dataTextArea.text.split(\"\\n\")\n    \n    \n    \n        lines.forEach(function (\n            this: InternalDropdownSettingsViewController,\n            line: string,\n            index: number,\n            array: string[]\n        ) {\n    \n    \n    \n            const lineItems = line.trim().split(\" \")\n    \n    \n    \n            drawingData.push({\n                \n                _id: \"\" + index,\n                title: {\n                    \n                    \"en\": lineItems.lastElement\n                    \n                },\n                \n                isADropdownDataRow: YES,\n                isADropdownDataSection: NO,\n                \n                attachedObject: undefined,\n                \n                itemCode: lineItems.firstElement,\n                \n                dropdownCode: this.dropdownCodeTextField.text\n                \n            })\n            \n            \n        }.bind(this))\n        \n        \n        this.dropdown._drawingData = drawingData\n        this.dropdown._isDrawingDataValid = YES\n        \n        this.reloadTableData()\n        \n        if (this.dropdown.selectedIndices.length) {\n            \n            this.dropdown._selectedData = [this.dropdown.drawingData[this.dropdown.selectedIndices.firstElement]]\n            \n        }\n        \n        \n        \n        this.updateitemDetailsView()\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    loadJSONData() {\n    \n    \n        const drawingData: CBDropdownDataItem<undefined>[] = []\n    \n    \n        var itemTitles: {\n        \n            [x: string]: {\n            \n                [x: string]: string;\n            \n            }\n        \n        } = {}\n    \n    \n    \n        try {\n            \n            itemTitles = JSON.parse(this.dataTextArea.text)\n            \n        } catch (exception) {\n            \n            CBDialogViewShower.alert(exception)\n            \n            return\n            \n        }\n    \n    \n    \n    \n        var index = 0\n    \n        itemTitles.forEach(function (this: InternalDropdownSettingsViewController, itemTitle: {\n            \n            [x: string]: string;\n            \n        }, itemCode: string) {\n            \n            drawingData.push({\n                \n                _id: \"\" + index,\n                title: itemTitle,\n                \n                isADropdownDataRow: YES,\n                isADropdownDataSection: NO,\n                \n                attachedObject: undefined,\n                \n                itemCode: itemCode,\n                \n                dropdownCode: this.dropdownCodeTextField.text\n                \n            })\n            \n            index = index + 1\n            \n        }.bind(this))\n        \n        \n        this.dropdown._drawingData = drawingData\n        this.dropdown._isDrawingDataValid = YES\n        \n        this.reloadTableData()\n        \n        if (this.dropdown.selectedIndices.length) {\n            \n            this.dropdown._selectedData = [this.dropdown.drawingData[this.dropdown.selectedIndices.firstElement]]\n            \n        }\n        \n        this.updateitemDetailsView()\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    itemTitleDidChange() {\n    \n        const selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n    \n        if (IS_NOT(this.itemTitleOrAttachedObjectTextArea.text) || this.itemTitleOrAttachedObjectTextArea.text ==\n            \"undefined\") {\n            \n            \n            this.itemTitleOrAttachedObjectTextArea.text = \"{  }\"\n            \n            \n        }\n        \n        \n        \n        try {\n    \n            const selectedItemTitle = JSON.parse(this.itemTitleOrAttachedObjectTextArea.text)\n    \n            if (selectedItemTitle instanceof Object && !(selectedItemTitle instanceof Array)) {\n                \n                this.itemTitleJSONLabel.textColor = CBColor.primaryContentColor\n                this.itemTitleJSONLabel.text = \"No issues detected\"\n                \n                //this.itemtitleTextArea.text = JSON.stringify(selectedItemTitle, null, 2)\n                \n                selectedItem.title = selectedItemTitle\n                \n            }\n            else {\n                \n                this.itemTitleJSONLabel.textColor = UIColor.redColor\n                this.itemTitleJSONLabel.text = \"JSON has to describe a CBLocalizedTextObject.\"\n                \n            }\n            \n            \n            \n        } catch (error) {\n            \n            this.itemTitleJSONLabel.text = error.message\n            this.itemTitleJSONLabel.textColor = UIColor.redColor\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    itemAttachedObjectDidChange() {\n    \n        const selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n    \n        if (IS_NOT(this.itemTitleOrAttachedObjectTextArea.text) || this.itemTitleOrAttachedObjectTextArea.text ==\n            \"undefined\") {\n            \n            \n            this.itemTitleOrAttachedObjectTextArea.text = \"{ undefined }\"\n            \n            \n        }\n        \n        \n        \n        try {\n    \n            var selectedItemAttachedObject\n    \n            if (this.itemTitleOrAttachedObjectTextArea.text != \"{ undefined }\") {\n                \n                selectedItemAttachedObject = JSON.parse(this.itemTitleOrAttachedObjectTextArea.text)\n                \n            }\n            \n            \n            \n            if (selectedItemAttachedObject == null ||\n                (selectedItemAttachedObject instanceof Object && !(selectedItemAttachedObject instanceof Array))) {\n                \n                this.itemTitleJSONLabel.textColor = CBColor.primaryContentColor\n                this.itemTitleJSONLabel.text = \"No issues detected\"\n                \n                //this.itemtitleTextArea.text = JSON.stringify(selectedItemTitle, null, 2)\n                \n                selectedItem.attachedObject = selectedItemAttachedObject\n                \n            }\n            else {\n                \n                this.itemTitleJSONLabel.textColor = UIColor.redColor\n                this.itemTitleJSONLabel.text = \"JSON has to describe an object.\"\n                \n            }\n            \n            \n            \n        } catch (error) {\n            \n            this.itemTitleJSONLabel.text = error.message\n            this.itemTitleJSONLabel.textColor = UIColor.redColor\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    loadSubjectData() {\n        \n    \n        \n    }\n    \n    \n    \n    \n    \n    async viewDidAppear() {\n        \n    \n        \n    }\n    \n    \n    async viewWillDisappear() {\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    async handleRoute(route: UIRoute) {\n        \n        super.handleRoute(route)\n        const inquiryComponent = route.componentWithName(InternalDropdownSettingsViewController.routeComponentName)\n    \n    \n        this.reloadTableData()\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    updateViewConstraints() {\n        \n        super.updateViewConstraints()\n        \n    }\n    \n    \n    \n    updateViewStyles() {\n        \n        super.updateViewStyles()\n        \n    }\n    \n    \n    \n    viewDidLayoutSubviews() {\n        \n        super.viewDidLayoutSubviews()\n        \n    }\n    \n    \n    \n    \n    \n    layoutViewSubviews() {\n        \n        super.layoutViewSubviews()\n    \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding\n    \n        // View bounds\n        const bounds = this.view.bounds.rectangleWithInset(padding)\n    \n        this.titleLabel.frame = bounds.rectangleWithHeight(labelHeight * 2)\n    \n        var rowFrame = this.titleLabel.frame.rectangleForNextRow(padding)\n        rowFrame.distributeViewsAlongWidth([this.dropdownCodeTextField, this.loadButton, this.saveButton], [\n            2, 1, 1\n        ], padding)\n        \n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 5)\n        this.dropdownCodesTextArea.frame = rowFrame\n        \n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 2)\n        this.dropdown.frame = rowFrame.rectangleWithWidth(bounds.width * 0.5 - padding * 0.5)\n        \n        this.dropdown._tableView.frame = this.dropdown.frame.rectangleForNextRow(padding, 500)\n        \n        this.dropdown._tableView.setMargins(0, 0, padding, 0)\n        \n        \n        \n        \n        var deleteAddFrame = this.dropdown.frame.rectangleForNextColumn(padding * 0.5, this.dropdown.frame.width +\n            padding * 0.5)\n        \n        deleteAddFrame.distributeViewsAlongWidth([this.deleteButton, this.addButton], 1, padding)\n        \n        this.itemCodeTextField.frame = deleteAddFrame.rectangleForNextRow(padding)\n        \n        var itemTextAreaPurposesFrame = this.itemCodeTextField.frame.rectangleForNextRow(padding, labelHeight * 2)\n        \n        itemTextAreaPurposesFrame.distributeViewsEquallyAlongWidth([\n            this.itemTitleCheckbox, this.itemAttachedObjectCheckbox\n        ], padding)\n        \n        this.itemTitleOrAttachedObjectTextArea.frame = itemTextAreaPurposesFrame.rectangleForNextRow(\n            padding,\n            labelHeight *\n            11\n        )\n        \n        this.itemTitleJSONLabel.frame = this.itemTitleOrAttachedObjectTextArea.frame.rectangleForNextRow(\n            padding,\n            labelHeight\n        )\n        \n        this.isASectionCheckbox.frame = this.itemTitleJSONLabel.frame.rectangleForNextRow(padding, labelHeight)\n    \n    \n        const downUpFrame = this.isASectionCheckbox.frame.rectangleForNextRow(padding, labelHeight * 2)\n    \n        downUpFrame.distributeViewsAlongWidth([this.downButton, this.upButton], 1, padding)\n        \n        \n        downUpFrame.rectangleForNextRow(padding).distributeViewsEquallyAlongWidth([\n            this.deleteDropdownButton, this.clearDropdownButton\n        ], padding)\n        \n        \n        this.dataTextJSONLabel.frame = this.dropdownCodesTextArea.frame.rectangleWithY(this.dropdown._tableView.frame.max.y +\n            padding).rectangleWithHeight(labelHeight)\n        \n        this.dataTextArea.frame = this.dataTextJSONLabel.frame.rectangleForNextRow(padding, 500)\n        \n        this.dataTextArea.frame.rectangleForNextRow(padding, labelHeight *\n            2).distributeViewsEquallyAlongWidth([this.loadPlainDataButton, this.loadJSONDataButton], padding)\n        \n        this.loadPlainDataButton.setMargins(0, 0, padding, 0)\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { nil, NO, UITextView, UIView } from \"uicore-ts\"\n\n\nexport class CBCheckbox extends UIView {\n    \n    checkbox: UIView\n    titleLabel: UITextView\n    \n    constructor(elementID: string) {\n        \n        super(elementID, nil, \"label\")\n        \n    }\n    \n\n    initView(elementID: string, viewHTMLElement: HTMLElement) {\n        \n        super.initView(elementID, viewHTMLElement)\n        \n        this.checkbox = new UIView(elementID + \"Checkbox\", nil, \"input\")\n        this.checkbox.viewHTMLElement.setAttribute(\"type\", \"checkbox\")\n        \n        this.addSubview(this.checkbox)\n        \n        this.titleLabel = new UITextView(elementID + \"TitleLabel\", UITextView.type.span)\n        \n        this.addSubview(this.titleLabel)\n        \n        \n        this.checkbox.userInteractionEnabled = NO\n        this.titleLabel.userInteractionEnabled = NO\n        \n        this.titleLabel.style.overflow = \"visible\"\n        this.titleLabel.style.lineHeight = \"1.5\"\n        \n        \n        this.style.cursor = \"pointer\"\n        \n        this.viewHTMLElement.onchange = (event) => {\n            this.sendControlEventForKey(CBCheckbox.controlEvent.SelectionChange, event)\n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    static controlEvent = Object.assign({}, UIView.controlEvent, {\n        \n        \n        \"SelectionChange\": \"SelectionChange\"\n        \n        \n    })\n    \n    \n    \n    \n    \n    get isStatic() {\n        \n        const result = this.checkbox.viewHTMLElement.classList.contains(\"staticCheckbox\")\n        \n        return result\n        \n    }\n    \n    set isStatic(isStatic: boolean) {\n        \n        if (isStatic) {\n            \n            this.checkbox.viewHTMLElement.classList.add(\"staticCheckbox\")\n            \n        }\n        else {\n            \n            this.checkbox.viewHTMLElement.classList.remove(\"staticCheckbox\")\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    get selected() {\n        \n        return (this.checkbox.viewHTMLElement as HTMLInputElement).checked\n        \n    }\n    \n    set selected(selected: boolean) {\n        \n        (this.checkbox.viewHTMLElement as HTMLInputElement).checked = selected\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        const titleWidth = this.bounds.width - 35\n        this.titleLabel.setMaxSizes(nil, titleWidth)\n        \n        this.titleLabel.textPrefix = \"<span style=\\\"position: absolute; overflow: hidden; left: 0; top: 0;text-overflow: ellipsis; white-space: pre; padding-left: 35px; width: \" +\n            titleWidth + \"px;\\\">\"\n        \n        this.titleLabel.textSuffix = \"</span>\"\n        \n        this.hoverText = this.titleLabel.text.replace(\n            this.titleLabel.textPrefix,\n            \"\"\n        ).replace(this.titleLabel.textSuffix, \"\")\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { IS, IS_NOT, UIColor, UITextField, UITextView, UIView } from \"uicore-ts\"\nimport { CBColor } from \"../CBCore/CBColor\"\n\n\nexport class CBTextField extends UIView {\n    \n    titleLabel: UITextView\n    textField: UITextField\n    \n    constructor(elementID?: string) {\n        \n        super(elementID)\n        \n    }\n    \n\n    initView(elementID: string, viewHTMLElement: HTMLElement) {\n        \n        super.initView(elementID, viewHTMLElement)\n        \n        \n        viewHTMLElement.classList.add(\"input\")\n        \n        this.textField = new UITextField(elementID + \"TextField\")\n        this.addSubview(this.textField)\n        \n        this.titleLabel = new UITextView(elementID + \"TitleLabel\", UITextView.type.label)\n        this.titleLabel.textColor = UIColor.greyColor\n        this.titleLabel.style.fontStyle = \"italic\"\n        this.addSubview(this.titleLabel)\n        \n        \n        this.titleLabel.viewHTMLElement.setAttribute(\"for\", this.textField.elementID)\n        \n        \n        this.textField.addTargetForControlEvent(UIView.controlEvent.Focus, (event) => {\n            this.titleLabel.viewHTMLElement.classList.add(\"active\")\n            this.titleLabel.textColor = CBColor.primaryTintColor\n        })\n        \n        this.textField.addTargetForControlEvent(UIView.controlEvent.Blur, (event) => {\n            if (IS_NOT(this.text)) {\n                \n                this.titleLabel.viewHTMLElement.classList.remove(\"active\")\n                \n            }\n            \n            this.titleLabel.textColor = UIColor.greyColor\n        })\n        \n        this.textField.style.webkitUserSelect = \"text\"\n        \n    }\n    \n    \n    \n    \n    \n    setPlaceholderText(key: string, defaultString: string, parameters?: { [x: string]: string }) {\n        \n        this.titleLabel.setText(key, defaultString, parameters)\n        \n    }\n    \n    \n    set placeholderText(placeholderText: string) {\n        \n        this.titleLabel.text = placeholderText\n        \n    }\n    \n    get placeholderText() {\n        \n        return this.titleLabel.text\n        \n    }\n    \n    \n    \n    \n    \n    get text() {\n        \n        return this.textField.text\n        \n    }\n    \n    set text(text: string) {\n        \n        if (IS_NOT(text)) {\n            \n            text = \"\"\n            \n        }\n        \n        this.textField.text = text\n        \n        if (IS(this.text)) {\n            \n            this.titleLabel.viewHTMLElement.classList.add(\"active\")\n            \n        }\n        else {\n            \n            this.titleLabel.viewHTMLElement.classList.remove(\"active\")\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    updateContentForCurrentEnabledState() {\n        \n        \n        this.userInteractionEnabled = this.enabled\n        \n        if (this.enabled) {\n            \n            this.alpha = 1\n            \n        }\n        else {\n            \n            this.alpha = 0.5\n            \n        }\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    didMoveToSuperview(superview: UIView) {\n        \n        super.didMoveToSuperview(superview)\n        \n        this.text = this.text\n        \n    }\n    \n    \n    \n    \n    \n    set enabled(enabled: boolean) {\n        \n        super.enabled = enabled\n        \n        \n        \n        if (IS_NOT(enabled)) {\n            \n            this.textField.viewHTMLElement.setAttribute(\"readonly\", \"\" + !enabled)\n            \n        }\n        else {\n            \n            this.textField.viewHTMLElement.removeAttribute(\"readonly\")\n            \n        }\n        \n        \n        \n        \n    }\n    \n    get enabled() {\n        \n        return super.enabled\n        \n    }\n    \n    \n    \n    \n    \n    focus() {\n        \n        this.textField.focus()\n        \n    }\n    \n    blur() {\n        \n        this.textField.blur()\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    IS,\n    IS_NOT, IS_UNDEFINED, MAKE_ID,\n    nil,\n    NO,\n    UIButton,\n    UIColor, UIDialogView, UIImageView, UIKeyValueStringFilter,\n    UILocalizedTextObject,\n    UITableView,\n    UITextField,\n    UITextView, UIView,\n    YES\n} from \"uicore-ts\"\nimport { CBColor } from \"../CBCore/CBColor\"\nimport { CBCore } from \"../CBCore/CBCore\"\nimport { CBDropdownData, CBDropdownDataItem } from \"../CBCore/CBDataInterfaces\"\nimport { CBSocketClient } from \"../CBCore/CBSocketClient\"\nimport { RootViewParameters } from \"../RootViewParameters\"\nimport { CBCheckbox } from \"./CBCheckbox\"\nimport { LanguageService } from \"./LanguageService\"\nimport { SearchableDropdownRow } from \"./SearchableDropdownRow\"\nimport { SearchTextField } from \"./SearchTextField\"\n\n\nexport class SearchableDropdown<T> extends UIButton {\n    \n    _keyValueStringFilter: UIKeyValueStringFilter\n    _containerView: UIView\n    _searchTextField: SearchTextField\n    _dialogView: UIDialogView\n    _tableView: UITableView\n    _rightImageView: UIImageView\n    \n    highlightLabel: UITextView\n    \n    _data: CBDropdownDataItem<T>[] = []\n    _filteredData: CBDropdownDataItem<T>[] = []\n    \n    _excludedData: string[] = []\n    \n    tintColor: UIColor = CBColor.primaryTintColor\n    \n    overflowLabel: UITextView\n    selectedIndices: number[] = []\n    _selectedData: CBDropdownDataItem<T>[] = []\n    _drawingData: CBDropdownDataItem<T>[] = []\n    \n    _isDrawingDataValid = NO\n    _placeholderText: string\n    _expandedContainerViewHeight: number\n    \n    isSingleSelection = NO\n    showsSelectedSectionInMultipleSelectionMode = NO\n    _dropdownCode: string\n    \n    allowsCustomItem = NO\n    _customItem: CBDropdownDataItem<any>\n    _focusedRowIndex: number\n    \n    keepFocusedRowVisible = YES\n    _placeholderLocalizedTextObject: UILocalizedTextObject\n    \n    constructor(elementID: string) {\n        \n        super(elementID)\n        \n    }\n    \n\n    initView(elementID, viewHTMLElement, initViewData) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        \n        //this.style.borderRadius = \"2px\";\n        \n        \n        this._titleLabel.text = \"Current value\"\n        this._titleLabel.textAlignment = UITextView.textAlignment.left\n        \n        this.overflowLabel = new UITextView(elementID + \"OverflowLabel\")\n        this.overflowLabel.textColor = CBColor.primaryContentColor\n        this.overflowLabel.textAlignment = UITextView.textAlignment.right\n        this.addSubview(this.overflowLabel)\n        \n        \n        this._rightImageView = new UIImageView(this.elementID + \"RightImageView\")\n        this._rightImageView.imageSource = \"images/baseline-arrow_drop_down-24px.svg\"\n        this._rightImageView.userInteractionEnabled = NO\n        this.addSubview(this._rightImageView)\n        \n        \n        this.setNeedsLayout()\n        \n        \n        this._containerView = new UIView(elementID + \"ContainerView\")\n        this._containerView.style.boxShadow = \"0 9px 13px 0 rgba(0,0,0,0.26)\"\n        this._containerView.style.borderRadius = \"2px\"\n        \n        this._searchTextField = new SearchTextField(elementID + \"SearchTextField\")\n        this._searchTextField.placeholderText = LanguageService.stringForKey(\n            \"searchableDropdownSearch\",\n            LanguageService.currentLanguageKey,\n            \"Search\"\n        )\n        this._containerView.addSubview(this._searchTextField)\n        \n        this._searchTextField._textField.addTargetForControlEvent(\n            UITextField.controlEvent.TextChange,\n            function (this: SearchableDropdown<T>, sender, event) {\n                \n                this.updateFilteredData(this._searchTextField.text)\n                \n            }.bind(this)\n        )\n        \n        this._searchTextField._textField.addTargetForControlEvent(\n            UIView.controlEvent.EscDown,\n            function (this: SearchableDropdown<T>, sender, event) {\n                \n                if (IS(this._searchTextField.text)) {\n                    \n                    this._searchTextField.text = \"\"\n                    this.updateFilteredData(\"\")\n                    \n                }\n                else {\n                    \n                    this._dialogView.dismiss(YES)\n                    \n                }\n                \n                \n            }.bind(this)\n        )\n        \n        this._searchTextField._textField.addTargetForControlEvent(\n            UIView.controlEvent.DownArrowDown,\n            function (this: SearchableDropdown<T>, sender: UITextField, event: Event) {\n                \n                if (this.focusedRowIndex < (this.drawingData.length - 1)) {\n                    \n                    this.focusedRowIndex = this.focusedRowIndex + 1\n                    \n                }\n                \n            }.bind(this)\n        )\n        \n        this._searchTextField._textField.addTargetForControlEvent(\n            UIView.controlEvent.UpArrowDown,\n            function (this: SearchableDropdown<T>, sender: UITextField, event: Event) {\n                \n                if (this.focusedRowIndex > 0) {\n                    \n                    this.focusedRowIndex = this.focusedRowIndex - 1\n                    \n                }\n                \n            }.bind(this)\n        )\n        \n        this._searchTextField._textField.addTargetForControlEvent(\n            UIView.controlEvent.EnterDown,\n            function (this: SearchableDropdown<T>, sender, event) {\n    \n                const isTouchDevice = \"ontouchstart\" in document.documentElement\n    \n                if (isTouchDevice) {\n                    \n                    this._searchTextField.blur()\n                    \n                    return\n                    \n                }\n    \n    \n                const datapoint = this.drawingData[this.focusedRowIndex]\n    \n    \n                const alreadySelected = this.selectedDataContains(datapoint)\n    \n                if (alreadySelected) {\n                    \n                    this.selectedData.removeElement(datapoint)\n                    \n                }\n                else if (this.isSingleSelection) {\n                    \n                    \n                    this.selectedIndices = [this.focusedRowIndex]\n                    \n                    this.selectedData = [datapoint]\n                    \n                    // view.selected = YES;\n                    \n                    this.selectionDidChange(this.selectedData)\n                    \n                    this.updateContentForCurrentSelection()\n                    \n                    this._dialogView.dismiss()\n                    \n                    \n                }\n                else {\n                    \n                    this.selectedData.push(datapoint)\n                    \n                }\n                \n                \n                \n                \n                \n            }.bind(this)\n        )\n        \n        this._tableView = new UITableView(elementID + \"TableView\")\n        this._containerView.addSubview(this._tableView)\n        this._tableView.backgroundColor = UIColor.whiteColor\n        \n        this._dialogView = new UIDialogView(elementID + \"DialogView\")\n        this._dialogView.view = this._containerView\n        this._dialogView.backgroundColor = UIColor.transparentColor\n        \n        this.addTargetForControlEvents([\n            UIView.controlEvent.PointerUpInside, UIView.controlEvent.EnterDown\n        ], function (this: SearchableDropdown<T>, sender, event) {\n            if (this._dialogView.isVisible) {\n                this.closeDropdown()\n            }\n            else {\n                this.openDropdown()\n            }\n        }.bind(this))\n        \n        \n        this._dialogView.addTargetForControlEvent(\n            UIView.controlEvent.PointerDown,\n            function (sender: UIDialogView, event: Event) {\n                \n                if (sender.viewHTMLElement == event.target) {\n                    sender.dismiss()\n                }\n                \n            }\n        )\n    \n    \n        const dialogLayoutFunction = this._dialogView.layoutSubviews\n    \n        this._dialogView.layoutSubviews = function (this: SearchableDropdown<T>) {\n            \n            //dialogLayoutFunction.call(this._dialogView);\n            \n            this._dialogView.frame = this.rootView.bounds //this.superview.rectangleInView(this.superview.bounds, this.rootView);\n    \n            const padding = RootViewParameters.paddingLength\n            const labelHeight = padding\n    \n            const searchTextFieldHeight = this.bounds.height\n    \n            this._containerView.frame = this.superview.rectangleInView(this.frame, this.rootView)\n                .rectangleWithHeight(this.expandedContainerViewHeight)\n            \n            this._searchTextField.frame = this._containerView.bounds.rectangleWithHeight(searchTextFieldHeight).rectangleWithInsets(\n                0,\n                16,\n                0,\n                0\n            )\n            \n            this._tableView.frame = this._containerView.bounds.rectangleWithInsets(0, 0, 0, searchTextFieldHeight)\n            \n            //this._tableView.style.maxHeight = \"\" + this._tableView.intrinsicContentHeight() + \"px\";\n            \n            \n        }.bind(this)\n        \n        \n        // var animateDialogAppearing = this._dialogView.animateAppearing;\n        // this._dialogView.animateAppearing = function (this: SearchableDropdown) {\n        //     animateDialogAppearing.call(this._dialogView);\n        //     this.style.zIndex = \"101\";\n        //     if (this.highlightLabel) {\n        //         this.highlightLabel.textColor = UIColor.whiteColor;\n        //         this.highlightLabel.style.zIndex = \"101\";\n        //         this.highlightLabel.userInteractionEnabled = NO;\n        //     }\n        \n        //     this._searchTextField.focus();\n        \n        // }.bind(this)\n        \n        // var animateDialogDisappearing = this._dialogView.animateDisappearing;\n        // this._dialogView.animateDisappearing = function (this: SearchableDropdown) {\n        //     animateDialogDisappearing.call(this._dialogView);\n        //     this.style.zIndex = \"0\";\n        //     if (this.highlightLabel) {\n        //         this.highlightLabel.textColor = CBColor.primaryContentColor;\n        //         this.highlightLabel.style.zIndex = \"0\";\n        //         this.highlightLabel.userInteractionEnabled = YES;\n        //     }\n        \n        //     this._searchTextField.blur();\n        \n        // }.bind(this)\n        \n        \n        \n        \n        \n        this._tableView.numberOfRows = function (this: SearchableDropdown<T>) {\n    \n            var result = this.drawingData.length\n    \n            if (IS_NOT(this.isSingleSelection) && this.showsSelectedSectionInMultipleSelectionMode) {\n                \n                result = result + this.selectedData.length\n                \n            }\n            \n            \n            return result\n            \n        }.bind(this)\n    \n    \n        const newReusableViewForIdentifierFunction = this._tableView.newReusableViewForIdentifier.bind(this._tableView)\n    \n        this._tableView.newReusableViewForIdentifier = function (\n            this: SearchableDropdown<T>,\n            identifier: string,\n            rowIndex: number\n        ) {\n            \n            //if (identifier == \"SelectedItemRow\") {\n    \n            const view = new SearchableDropdownRow(elementID + identifier + rowIndex)\n    \n            view.stopsPointerEventPropagation = NO\n            view.pausesPointerEvents = NO\n            \n            return view\n            \n            // }\n            \n            // return newReusableViewForIdentifierFunction(identifier, rowIndex);\n            \n        }.bind(this)\n    \n    \n        const viewForSelectedItemRow = function (this: SearchableDropdown<T>, index: number) {\n        \n            const view = this._tableView.reusableViewForIdentifier(\"SelectedItemRow\", index) as CBCheckbox\n        \n            view.titleLabel.text = LanguageService.stringForCurrentLanguage(this.selectedData[index].title)\n        \n            view.selected = YES\n        \n            return view\n        \n        }.bind(this)\n    \n    \n    \n    \n    \n        this._tableView.viewForRowWithIndex = function (this: SearchableDropdown<T>, index: number) {\n    \n    \n    \n    \n            const view = this._tableView.reusableViewForIdentifier(\"SubjectView\", index) as SearchableDropdownRow\n    \n    \n            view.style.borderBottomColor = \"\"\n            view.style.borderBottomStyle = \"\"\n            view.style.borderBottomWidth = \"\"\n    \n    \n    \n    \n            const rowWasHovered = function (this: SearchableDropdown<T>, sender: SearchableDropdownRow, event: Event) {\n        \n                this.focusedRowIndex = index\n        \n            }.bind(this)\n    \n            view.addTargetForControlEvent(UIButton.controlEvent.PointerHover, rowWasHovered)\n            \n            view.removeTargetForControlEvent(\n                UIButton.controlEvent.PointerHover,\n                view._SearchableDropdownRowWasHoveredFunction\n            )\n            \n            view._SearchableDropdownRowWasHoveredFunction = rowWasHovered\n            \n            view.focused = (this.focusedRowIndex == index)\n            \n            \n            \n            if (!this.isSingleSelection && this.showsSelectedSectionInMultipleSelectionMode) {\n                \n                if (index < this.selectedData.length) {\n                    \n                    \n                    view.type = SearchableDropdownRow.type.selectedItem\n                    \n                    view.titleText = LanguageService.stringForCurrentLanguage(this.selectedData[index].title)\n                    \n                    view.selected = YES\n                    \n                    view.updateContentForCurrentState()\n                    \n                    \n                    if (index == this.selectedData.length - 1) {\n                        \n                        view.style.borderBottomColor = UIColor.colorWithRGBA(100, 100, 100).stringValue\n                        \n                        view.style.borderBottomStyle = \"solid\"\n                        \n                        view.style.borderBottomWidth = \"1px\"\n                        \n                    }\n                    \n                    var viewWasTapped = function (this: SearchableDropdown<T>, sender, event) {\n                        \n                        \n                        this.selectedIndices.removeElementAtIndex(index)\n    \n                        const selectedItem = this.selectedData[index]\n    \n                        this.selectedData.removeElement(selectedItem)\n                        \n                        \n                        view.selected = NO\n                        \n                        this.selectionDidChange(this.selectedData)\n                        \n                        //this.performFunctionWithDelay(0.15, function (this: SearchableDropdown<T>) {\n                        \n                        this.updateContentForCurrentSelection()\n                        \n                        //}.bind(this))\n                        \n                        // // Unselecting main body item if possible\n                        // var visibleRows = this._tableView._visibleRows as SearchableDropdownRow[]\n                        \n                        // var visibleIndices = this._tableView.indexesForVisibleRows()\n                        \n                        // visibleRows.forEach(function (this: SearchableDropdown<T>, visibleRow: SearchableDropdownRow, visibleRowIndex: number, visibleRowsArray: SearchableDropdownRow[]) {\n                        \n                        //     var rowDataIndex = visibleIndices[visibleRowIndex]\n                        \n                        //     visibleRow.selected = this.selectedData.contains(this.drawingData[rowDataIndex])\n                        \n                        // }.bind(this))\n                        \n                        \n                        \n                        \n                        this._searchTextField.focus()\n                        \n                        \n                        if ((view as any).viewWasTappedFunction) {\n                            view.removeTargetForControlEvents([\n                                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap\n                            ], (view as any).viewWasTappedFunction)\n                        }\n                        \n                        \n                    }.bind(this)\n                    \n                    \n                    // Removing previous event target if possible\n                    if ((view as any).viewWasTappedFunction) {\n                        view.removeTargetForControlEvents([\n                            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap\n                        ], (view as any).viewWasTappedFunction)\n                    }\n                    \n                    \n                    // Adding event target\n                    view.addTargetForControlEvents([\n                        UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap\n                    ], viewWasTapped);\n                    (view as any).viewWasTappedFunction = viewWasTapped\n                    \n                    \n                    return view\n                    \n                    \n                    \n                }\n                \n                index = index - this.selectedData.length\n                \n            }\n            \n            \n            \n            // Datapoint\n            const datapoint = this.drawingData[index]\n    \n            if (IS_NOT(datapoint)) {\n                return\n            }\n            \n            // Setting different style for section title rows\n            if (datapoint.isADropdownDataSection) {\n                \n                view.type = SearchableDropdownRow.type.sectionTitle\n                \n                view.userInteractionEnabled = NO\n                \n            }\n            else {\n                \n                view.type = SearchableDropdownRow.type.selectableItem\n                \n                view.userInteractionEnabled = YES\n                \n            }\n            \n            if (datapoint._id == (this._customItem || nil)._id) {\n                \n                view.type = SearchableDropdownRow.type.customItem\n                \n            }\n            \n            view.updateContentForNormalState()\n            \n            view.updateContentForCurrentState()\n            \n            \n            // Setting row title\n            view.titleText = LanguageService.stringForCurrentLanguage(datapoint.title)\n            view.titleLabel.textAlignment = UITextView.textAlignment.left\n            \n            \n            // Highlighting of row\n            //view.highlighted = (this.highlightedRowIndex == index);\n            \n            \n            // Selecting of rows\n            \n            view.selected = this.selectedRowIdentifiers.contains(datapoint._id) //this.selectedIndices.contains(index); //this.selectedDataContains(datapoint);\n            \n            var viewWasTapped = function (this: SearchableDropdown<T>, sender, event) {\n                \n                if (view.selected) {\n                    \n                    this.selectedIndices.removeElement(index)\n                    \n                    this.selectedData.removeElement(datapoint)\n                    \n                }\n                else {\n                    \n                    \n                    if (this.isSingleSelection) {\n                        \n                        this.selectedIndices = [index]\n                        \n                        this.selectedData = [datapoint]\n                        \n                        // view.selected = YES;\n                        \n                        this.selectionDidChange(this.selectedData)\n                        \n                        this.updateContentForCurrentSelection()\n                        \n                        this._dialogView.dismiss()\n                        \n                        return\n                        \n                    }\n                    else {\n                        \n                        this.selectedIndices.push(index)\n                        \n                        this.selectedData.push(datapoint)\n                        \n                        \n                        \n                    }\n                    \n                    \n                    \n                }\n                \n                //view.selected = !view.selected;\n    \n                const selectedData = this.selectedData\n    \n                if (!view.selected) {\n                    \n                    \n                    view.selected = YES\n                    \n                    this.performFunctionWithDelay(0.25, function (this: SearchableDropdown<T>) {\n                        \n                        \n                        this.selectionDidChange(selectedData)\n                        \n                        this.updateContentForCurrentSelection()\n                        \n                        if (this.showsSelectedSectionInMultipleSelectionMode) {\n                            \n                            this._tableView.contentOffset = this._tableView.contentOffset.pointByAddingY(view.frame.height)\n                            \n                        }\n                        \n                        \n                    }.bind(this))\n                    \n                    \n                }\n                else {\n                    \n                    view._checkbox.selected = NO\n                    \n                    this.selectionDidChange(selectedData)\n                    \n                    this.performFunctionWithDelay(0.15, function (this: SearchableDropdown<T>) {\n                        \n                        \n                        view.selected = NO\n                        \n                        this.updateContentForCurrentSelection()\n                        \n                        if (this.showsSelectedSectionInMultipleSelectionMode) {\n                            \n                            this._tableView.contentOffset = this._tableView.contentOffset.pointByAddingY(-view.frame.height)\n                            \n                        }\n                        \n                        \n                        \n                    }.bind(this))\n                    \n                    \n                    \n                }\n                \n                \n                \n                this._searchTextField.focus()\n                \n            }.bind(this)\n            \n            // Removing previous event target if possible\n            if ((view as any).viewWasTappedFunction) {\n                view.removeTargetForControlEvents([\n                    UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\n                ], (view as any).viewWasTappedFunction)\n            }\n            \n            // Adding event target\n            view.addTargetForControlEvents([\n                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\n            ], viewWasTapped);\n            (view as any).viewWasTappedFunction = viewWasTapped\n            \n            return view\n            \n        }.bind(this)\n        \n        this._keyValueStringFilter = new UIKeyValueStringFilter()\n        \n    }\n    \n    \n    \n    \n    \n    openDropdown() {\n        this._dialogView.showInView(this.rootView, YES)\n        this._searchTextField.focus()\n    }\n    \n    closeDropdown() {\n        this._dialogView.dismiss(YES)\n    }\n    \n    boundsDidChange() {\n        \n        super.boundsDidChange()\n        \n        this.setNeedsLayout()\n        \n    }\n    \n    \n    \n    set dropdownCode(dropdownCode: string) {\n        \n        this._dropdownCode = dropdownCode\n        \n        this.fetchDropdownDataForCode(dropdownCode)\n        \n    }\n    \n    \n    get dropdownCode() {\n        \n        return this._dropdownCode\n        \n    }\n    \n    \n    fetchDropdownDataForCode(dropdownCode: string) {\n        \n        CBCore.sharedInstance.socketClient.sendMessageForKeyWithPolicy(\n            \"RetrieveDropdownDataForCode\",\n            dropdownCode,\n            CBSocketClient.completionPolicy.storedOrFirst,\n            function (this: SearchableDropdown<T>, responseMessage: CBDropdownData<T>) {\n                \n                if (IS(responseMessage)) {\n                    \n                    //alert(\"Loaded data.\")\n                    \n                }\n                else {\n                    \n                    //alert(\"Failed to load data.\")\n                    return\n                    \n                }\n    \n                const dropdownData: CBDropdownDataItem<T>[] = []\n    \n                responseMessage.data.forEach(function (sectionOrRow, index, array) {\n                    \n                    if (sectionOrRow.isADropdownDataSection) {\n    \n    \n                        const dataSection: CBDropdownDataItem<T> = {\n        \n                            _id: sectionOrRow._id,\n                            title: sectionOrRow.title,\n                            rowsData: [],\n                            isADropdownDataSection: YES,\n                            isADropdownDataRow: NO,\n        \n                            attachedObject: sectionOrRow.attachedObject,\n        \n                            itemCode: sectionOrRow.itemCode,\n                            dropdownCode: sectionOrRow.dropdownCode\n        \n                        }\n    \n                        const rowsData = dataSection.rowsData\n    \n                        sectionOrRow.rowsData.forEach(function (rowData, index, array) {\n                            \n                            rowsData.push({\n                                \n                                _id: rowData._id,\n                                title: rowData.title,\n                                isADropdownDataSection: NO,\n                                isADropdownDataRow: YES,\n                                \n                                attachedObject: rowData.attachedObject,\n                                \n                                itemCode: rowData.itemCode,\n                                dropdownCode: rowData.dropdownCode\n                                \n                            })\n                            \n                        })\n                        \n                        dataSection.rowsData = rowsData\n                        \n                        dropdownData.push(dataSection)\n                        \n                    }\n                    else {\n                        \n                        dropdownData.push({\n                            \n                            _id: sectionOrRow._id,\n                            title: sectionOrRow.title,\n                            isADropdownDataRow: YES,\n                            \n                            itemCode: sectionOrRow.itemCode,\n                            dropdownCode: sectionOrRow.dropdownCode,\n                            \n                            attachedObject: sectionOrRow.attachedObject\n                            \n                        } as any)\n                        \n                    }\n                    \n                })\n                \n                this.data = dropdownData\n                \n                this.didLoadDataForDropdownCode()\n                \n            }.bind(this)\n        )\n        \n    }\n    \n    \n    \n    \n    \n    didLoadDataForDropdownCode() {\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get focusedRowIndex() {\n        \n        return this._focusedRowIndex\n        \n    }\n    \n    set focusedRowIndex(focusedRowIndex: number) {\n    \n        const previousFocusedRowIndex = this.focusedRowIndex\n    \n        this._focusedRowIndex = focusedRowIndex\n        \n        \n        if (previousFocusedRowIndex != focusedRowIndex) {\n            \n            (this._tableView.visibleRowWithIndex(previousFocusedRowIndex) as SearchableDropdownRow).focused = NO\n    \n            const focusedRow = this._tableView.visibleRowWithIndex(this.focusedRowIndex) as SearchableDropdownRow\n    \n            focusedRow.focused = YES\n            \n            if (!this.keepFocusedRowVisible) {\n                \n                return\n                \n            }\n    \n            var contentOffset = this._tableView.contentOffset\n    \n            if (focusedRow.frame.y < contentOffset.y) {\n                \n                contentOffset.y = focusedRow.frame.y\n                \n            }\n            \n            if (focusedRow.frame.max.y > (contentOffset.y + this._tableView.bounds.height)) {\n                \n                contentOffset = contentOffset.pointByAddingY(-(contentOffset.y + this._tableView.bounds.height -\n                    focusedRow.frame.max.y))\n                \n            }\n    \n            const animationDuration = this._tableView.animationDuration\n    \n            this._tableView.animationDuration = 0\n            \n            this._tableView.contentOffset = contentOffset\n            \n            this._tableView.animationDuration = animationDuration\n            \n        }\n        \n        \n    }\n    \n    \n    set expandedContainerViewHeight(expandedContainerViewHeight: number) {\n        \n        \n        this._expandedContainerViewHeight = expandedContainerViewHeight\n        \n        this._dialogView.setNeedsLayout()\n        \n        \n    }\n    \n    \n    get expandedContainerViewHeight() {\n        \n        if (IS(this._expandedContainerViewHeight)) {\n            \n            return this._expandedContainerViewHeight\n            \n        }\n    \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding\n    \n        const result = this.superview.bounds.height - this.frame.max.y - padding\n    \n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    selectedDataContains(datapoint: CBDropdownDataItem<T>) {\n        for (var i = 0; i < this.selectedData.length; i++) {\n            const value = this.selectedData[i]\n            if (value._id == datapoint._id) {\n                return YES\n            }\n        }\n        return NO\n    }\n    \n    \n    \n    \n    \n    updateContentForNormalState() {\n        \n        \n        this.style.borderBottom = \"1px solid rgba(0,0,0,0.12)\"\n        \n        this.titleLabel.textColor = CBColor.primaryContentColor\n        this.backgroundColor = UIColor.transparentColor\n        \n        this.style.borderBottomColor = CBColor.primaryContentColor.colorWithAlpha(0.12).stringValue\n        \n        \n    }\n    \n    updateContentForHighlightedState() {\n        \n        this.style.borderBottomWidth = \"2px\"\n        \n        this.style.borderBottomColor = this.tintColor.stringValue\n        \n    }\n    \n    \n    static controlEvent = Object.assign({}, UIView.controlEvent, {\n        \n        \"SelectionDidChange\": \"SelectionDidChange\"\n        \n    })\n    \n    \n    \n    selectionDidChange(selectedRows: CBDropdownDataItem<T>[]) {\n        \n        // Update title to indicate the selection\n        this.updateTitleWithSelection(selectedRows)\n        \n        this.sendControlEventForKey(SearchableDropdown.controlEvent.SelectionDidChange, nil)\n        \n    }\n    \n    updateContentForCurrentSelection() {\n        \n        // Update selected rows in the top of the table view\n        this._tableView.reloadData()\n        \n        this.setNeedsLayout()\n        \n    }\n    \n    \n    get placeholderText() {\n        \n        if (IS_UNDEFINED(this._placeholderText)) {\n            \n            \n            this._placeholderText = \"Not selected\"\n            \n            \n        }\n        \n        return this._placeholderText\n        \n    }\n    \n    set placeholderText(placeholderText: string) {\n        \n        this._placeholderText = placeholderText\n        \n        this.updateTitleWithSelection(this.selectedData)\n        \n    }\n    \n    \n    setPlaceholderText(key: string, defaultString: string, parameters?: { [x: string]: string }) {\n        \n        this.placeholderLocalizedTextObject = LanguageService.localizedTextObjectForKey(key, defaultString, parameters)\n        \n        //this.titleLabel.setText(key, defaultString, parameters);\n        \n    }\n    \n    get placeholderLocalizedTextObject() {\n        \n        if (IS_UNDEFINED(this._placeholderLocalizedTextObject)) {\n            \n            \n            this._placeholderLocalizedTextObject = LanguageService.localizedTextObjectForKey(\n                \"searchableDropdownNotSelected\")\n            \n            \n        }\n        \n        return this._placeholderLocalizedTextObject\n        \n    }\n    \n    set placeholderLocalizedTextObject(placeholderText: UILocalizedTextObject) {\n        \n        this._placeholderLocalizedTextObject = placeholderText\n        \n        this.updateTitleWithSelection(this.selectedData)\n        \n    }\n    \n    \n    updateTitleWithSelection(selectedRows: CBDropdownDataItem<T>[]) {\n        \n        \n        this.titleLabel.localizedTextObject = this.placeholderLocalizedTextObject\n        \n        if (selectedRows && selectedRows.length) {\n    \n            const maxWidth = this.titleLabel.bounds.width\n            this.titleLabel.localizedTextObject = nil\n            this.titleLabel.text = \"\"\n            var stopLooping = NO\n    \n            selectedRows.forEach(function (this: SearchableDropdown<T>, selectedDatapoint, index, array) {\n                \n                if (stopLooping) {\n                    return\n                }\n    \n                var selectedString = LanguageService.stringForCurrentLanguage(selectedDatapoint.title)\n                if (index) {\n                    selectedString = \", \" + selectedString\n                }\n                const previousText = this.titleLabel.text\n                this.titleLabel.text = this.titleLabel.text + selectedString\n                \n                this.overflowLabel.text = \"+\" + (array.length - index - 1)\n                if (index == array.length - 1) {\n                    this.overflowLabel.text = \"\"\n                }\n                \n                if (index && (this.bounds.width -\n                    (this.overflowLabel.intrinsicContentWidth() + this.titleLabel.intrinsicContentWidth()) - 20) < 0) {\n                    \n                    this.titleLabel.text = previousText\n                    this.overflowLabel.text = \"+\" + (array.length - index - 2 * 0)\n                    \n                    stopLooping = YES\n                }\n                \n            }, this)\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    updateFilteredData(filteringString: string) {\n        \n        this._filteredData = []\n        \n        this.data.forEach(function (\n            this: SearchableDropdown<T>,\n            sectionOrRow: CBDropdownDataItem<T>,\n            index: number,\n            array: CBDropdownDataItem<T>[]\n        ) {\n            \n            if (LanguageService.stringForCurrentLanguage(sectionOrRow.title).toLowerCase().contains(filteringString.toLowerCase())) {\n                \n                this.filteredData.push(sectionOrRow)\n                \n            }\n            else if (sectionOrRow.isADropdownDataSection) {\n                \n                this._keyValueStringFilter.filterData(\n                    filteringString,\n                    sectionOrRow.rowsData,\n                    this._excludedData,\n                    \"title.\" + LanguageService.currentLanguageKey,\n                    sectionOrRow,\n                    function (\n                        this: SearchableDropdown<T>,\n                        filteredData,\n                        filteredIndexes,\n                        sectionFromThread: CBDropdownDataItem<T>\n                    ) {\n                        \n                        if (filteredData.length) {\n                            \n                            this.filteredData.push({\n                                \n                                _id: sectionFromThread._id,\n                                title: sectionFromThread.title,\n                                rowsData: filteredData,\n                                isADropdownDataSection: sectionFromThread.isADropdownDataSection,\n                                isADropdownDataRow: sectionFromThread.isADropdownDataRow,\n                                \n                                attachedObject: sectionFromThread.attachedObject,\n                                \n                                itemCode: sectionFromThread.itemCode,\n                                dropdownCode: sectionFromThread.dropdownCode\n                                \n                            })\n                            \n                            if (this.allowsCustomItem && this._searchTextField.text && this._customItem) {\n                                \n                                this.filteredData.removeElement(this._customItem)\n                                \n                                this.filteredData.push(this._customItem)\n                                \n                            }\n                            \n                            this._isDrawingDataValid = NO\n                            \n                            this._tableView.reloadData()\n                            \n                        }\n                        \n                    }.bind(this)\n                )\n                \n            }\n            \n        }.bind(this))\n        \n        \n        if (this.allowsCustomItem && this._searchTextField.text) {\n            \n            this.filteredData.removeElement(this._customItem)\n            \n            this.initCustomItemWithTitle(this._searchTextField.text)\n            \n            this.filteredData.push(this._customItem)\n            \n        }\n        \n        \n        if (this.filteredData.length) {\n            \n            this.focusedRowIndex = 0\n            \n        }\n        else {\n            \n            this.focusedRowIndex = null\n            \n        }\n        \n        this._isDrawingDataValid = NO\n        \n        this._tableView.reloadData()\n        \n    }\n    \n    \n    \n    \n    \n    initCustomItemWithTitle(title: string) {\n        \n        if (IS_NOT(title)) {\n            \n            this._customItem = undefined\n            \n        }\n        else {\n            \n            this._customItem = {\n                \n                _id: \"\" + MAKE_ID(),\n                title: LanguageService.localizedTextObjectForText(title),\n                rowsData: [],\n                isADropdownDataSection: NO,\n                isADropdownDataRow: YES,\n                \n                attachedObject: undefined,\n                \n                itemCode: \"custom_item\",\n                dropdownCode: this.dropdownCode\n                \n            }\n            \n        }\n        \n    }\n    \n    \n    selectItemOrCustomItemWithTitle(title: string) {\n        \n        if (IS_NOT(title)) {\n            \n            this._customItem = undefined\n            \n            \n            \n        }\n        else {\n    \n            var item = this.drawingData.find(function (dataItem, index, array) {\n        \n                return (LanguageService.stringForCurrentLanguage(dataItem.title) == title)\n        \n            })\n    \n    \n            if (this.allowsCustomItem && IS_NOT(item)) {\n                \n                this._searchTextField.text = title\n                \n                this.updateFilteredData(title)\n                \n                item = this._customItem\n                \n            }\n            \n            \n            if (IS_NOT(this.isSingleSelection)) {\n                \n                if (IS_NOT(this.selectedDataContains(item))) {\n    \n                    const selectedItemCodes = this.selectedItemCodes.copy()\n    \n                    selectedItemCodes.push(item.itemCode)\n                    \n                    this.selectedItemCodes = selectedItemCodes\n                    \n                    \n                }\n                \n                return\n                \n            }\n            \n            this.selectedItemCodes = [item.itemCode]\n            \n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    set data(data: CBDropdownDataItem<T>[]) {\n        \n        this._data = data\n        \n        this.updateFilteredData(this._searchTextField.text)\n        \n    }\n    \n    get data() {\n        \n        return this._data\n        \n    }\n    \n    set filteredData(data: CBDropdownDataItem<T>[]) {\n        \n        this._filteredData = data\n        \n        this._isDrawingDataValid = NO\n        \n    }\n    \n    get filteredData() {\n        return this._filteredData\n    }\n    \n    get drawingData(): CBDropdownDataItem<T>[] {\n        \n        if (this._isDrawingDataValid) {\n            return this._drawingData\n        }\n    \n        const result: CBDropdownDataItem<T>[] = []\n    \n        this._filteredData.forEach(function (this: SearchableDropdown<T>, section: CBDropdownDataItem<T>) {\n            \n            result.push({\n                \n                _id: section._id,\n                title: section.title,\n                \n                // @ts-ignore\n                rowsData: null,\n                isADropdownDataSection: section.isADropdownDataSection,\n                isADropdownDataRow: NO,\n                \n                attachedObject: section.attachedObject,\n                \n                itemCode: section.itemCode,\n                dropdownCode: section.dropdownCode\n                \n                \n            })\n            \n            if (section.rowsData) {\n                \n                section.rowsData.forEach(function (this: SearchableDropdown<T>, row) {\n                    result.push(row)\n                }.bind(this))\n                \n            }\n            \n        }.bind(this))\n        \n        \n        this._drawingData = result\n        this._isDrawingDataValid = YES\n        \n        return result\n        \n    }\n    \n    get selectedData() {\n        \n        return this._selectedData\n        \n    }\n    \n    set selectedData(selectedData: CBDropdownDataItem<T>[]) {\n        \n        this._selectedData = selectedData\n        \n    }\n    \n    \n    \n    \n    \n    clearSelection() {\n        \n        this.selectedData = []\n        this.selectedIndices = []\n        \n        this.updateTitleWithSelection(this.selectedData)\n        this.updateContentForCurrentSelection()\n        this.selectionDidChange(this.selectedData)\n        \n    }\n    \n    \n    \n    \n    \n    get selectedItemCodes() {\n        return this.selectedData.map(function (item) {\n            return item.itemCode\n        })\n    }\n    \n    set selectedItemCodes(selectedItemCodes: string[]) {\n    \n        const selectedData = []\n        const selectedIndices = []\n    \n        this._drawingData.forEach(function (item, index, array) {\n            \n            if (selectedItemCodes.contains(item.itemCode)) {\n                \n                selectedData.push(item)\n                selectedIndices.push(index)\n                \n            }\n            \n        })\n        \n        \n        this.selectedData = selectedData\n        this.selectedIndices = selectedIndices\n        \n        this.updateTitleWithSelection(this.selectedData)\n        this.updateContentForCurrentSelection()\n        this.selectionDidChange(this.selectedData)\n        \n        \n    }\n    \n    \n    \n    \n    \n    get selectedRowIdentifiers(): string[] {\n        const result = []\n        this.selectedData.forEach(function (this: SearchableDropdown<T>, selectedDatapoint: CBDropdownDataItem<T>) {\n            result.push(selectedDatapoint._id)\n        }.bind(this))\n        return result\n    }\n    \n    \n    \n    wasAddedToViewTree() {\n        \n        super.wasAddedToViewTree()\n        \n        this.setNeedsLayout()\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding\n    \n        this.updateTitleWithSelection(this.selectedData)\n        \n        if (this._rightImageView) {\n            \n            // var imageHeight = bounds.height - padding;\n            // this._rightImageView.frame = new UIRectangle(bounds.width - imageHeight - padding * 0.5, padding * 0.5, imageHeight, imageHeight);\n            \n            this._rightImageView.frame = bounds.rectangleWithInsets(0, padding *\n                0.5, 0, 0).rectangleWithWidth(24, 1).rectangleWithHeight(24, 0.5)\n            \n        }\n        \n        if (this.overflowLabel) {\n            \n            //this.overflowLabel.frame = bounds.rectangleWithInsets(padding, padding, 0, 0).rectangleWithInsets(0, this._rightImageView.bounds.width || 0, 0, 0).rectangleWithWidth(36, 1);\n            \n            //this.titleLabel.style.maxWidth = \"\" + (bounds.width - (bounds.width - this.titleLabel.viewHTMLElement.offsetLeft - (this.overflowLabel.frame.x || 0)))\n            \n            this.overflowLabel.style.width = \"36px\"\n            this.overflowLabel.style.right = \"32px\"\n            \n            this.overflowLabel.centerYInContainer()\n            \n            \n            this.titleLabel.style.marginRight = \"60px\"\n            \n            //this.overflowLabel.centerYInContainer();\n            //this.titleLabel.frame = this.titleLabel.frame.rectangleWithWidth(bounds.width - (bounds.width - this.titleLabel.frame.x - (this.overflowLabel.frame.x || 0)))\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { NO, UIButton, UIColor, YES } from \"uicore-ts\"\nimport { CBColor } from \"../CBCore/CBColor\"\nimport { CBCheckbox } from \"./CBCheckbox\"\nimport { LanguageService } from \"./LanguageService\"\n\n\nexport class SearchableDropdownRow extends UIButton {\n    \n    _checkbox: CBCheckbox\n    \n    type = SearchableDropdownRow.type.selectableItem\n    _SearchableDropdownRowWasHoveredFunction: any\n    \n    constructor(elementID: string) {\n        \n        super(elementID)\n        \n    }\n    \n\n    initView(elementID: string, viewHTMLElement: HTMLElement, initViewData) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        \n        \n        this._checkbox = new CBCheckbox(elementID + \"Checkbox\")\n        this._checkbox.userInteractionEnabled = NO\n        \n        this.addSubview(this._checkbox)\n        \n        \n        \n        \n        \n        this.style.outline = \"none\"\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    set titleText(titleText: string) {\n        \n        this.titleLabel.text = titleText\n        this._checkbox.titleLabel.text = titleText\n        \n    }\n    \n    get titleText() {\n        \n        return this.titleLabel.text\n        \n    }\n    \n    \n    \n    set selected(selected: boolean) {\n        \n        super.selected = selected\n        \n        this._checkbox.selected = selected\n        \n        \n        \n    }\n    \n    get selected() {\n        \n        return super.selected\n        \n    }\n    \n    \n    \n    \n    \n    set focused(focused: boolean) {\n        \n        this._focused = focused\n        \n        this.updateContentForCurrentState()\n        \n        \n        \n        \n    }\n    \n    get focused() {\n        \n        return this._focused\n        \n    }\n    \n    \n    \n    \n    \n    static type = {\n        \n        \"sectionTitle\": \"SectionTitle\",\n        \"selectedItem\": \"SelectedItem\",\n        \"selectableItem\": \"SelectableItem\",\n        \"customItem\": \"CustomItem\"\n        \n    }\n    \n    \n    \n    \n    \n    updateContentForNormalState() {\n        \n        \n        if (this.type == SearchableDropdownRow.type.sectionTitle) {\n            \n            \n            \n            this.backgroundColor = UIColor.transparentColor\n            this.titleLabel.textColor = CBColor.primaryContentColor.colorWithAlpha(0.5)\n            \n            this.style.borderTop = \"1px solid rgba(0, 0, 0, 0.3)\"\n            \n            this.titleLabel.style.marginLeft = \"\"\n            \n            this.textSuffix = \"\"\n            \n            if (this._checkbox) {\n                \n                this._checkbox.hidden = YES\n                \n            }\n            \n            this.titleLabel.hidden = NO\n            \n            \n            \n            \n        }\n        else if (this.type == SearchableDropdownRow.type.selectedItem) {\n            \n            this.backgroundColor = UIColor.transparentColor\n            this.titleLabel.textColor = CBColor.primaryTintColor\n            \n            this.style.borderTop = \"\"\n            \n            //this.titleLabel.style.marginLeft = \"20px\"\n            \n            this.textSuffix = \"\"\n            \n            if (this._checkbox) {\n                \n                this._checkbox.hidden = NO\n                \n                this._checkbox.titleLabel.textColor = CBColor.primaryContentColor\n                \n            }\n            \n            this.titleLabel.hidden = YES\n            \n            \n        }\n        else if (this.type == SearchableDropdownRow.type.customItem) {\n            \n            this.backgroundColor = UIColor.transparentColor\n            this.titleLabel.textColor = CBColor.primaryTintColor\n            \n            this.style.borderTop = \"1px solid rgba(0, 0, 0, 0.3)\"\n            \n            this.titleLabel.style.marginLeft = \"\"\n            \n            this.textSuffix = LanguageService.stringForKey(\n                \"searchableDropdownCustomItem\",\n                LanguageService.currentLanguageKey,\n                \"-Custom item\"\n            )\n            \n            if (this._checkbox) {\n                \n                this._checkbox.hidden = YES\n                \n            }\n            \n            this.titleLabel.hidden = NO\n            \n            \n        }\n        else {\n            \n            \n            \n            this.backgroundColor = UIColor.transparentColor\n            this.titleLabel.textColor = CBColor.primaryTintColor\n            \n            this.style.borderTop = \"\"\n            \n            this.titleLabel.style.marginLeft = \"20px\"\n            \n            this.textSuffix = \"\"\n            \n            if (this._checkbox) {\n                \n                this._checkbox.hidden = YES\n                \n            }\n            \n            this.titleLabel.hidden = NO\n            \n            \n        }\n        \n        this.userInteractionEnabled = YES\n        \n        \n        \n        \n    }\n    \n    \n    get textSuffix() {\n        \n        return this.titleLabel.textSuffix\n        \n    }\n    \n    set textSuffix(textSuffix: string) {\n        \n        this.titleLabel.textSuffix = textSuffix\n        \n        this._checkbox.titleLabel.textSuffix = textSuffix\n        \n    }\n    \n    \n    updateContentForHoveredState() {\n        \n        \n        this.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.05)\n        \n        \n    }\n    \n    \n    updateContentForHighlightedState() {\n        \n        \n        this.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.08)\n        \n        \n    }\n    \n    updateContentForFocusedState() {\n        \n        \n        this.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.08)\n        \n        \n    }\n    \n    \n    \n    updateContentForSelectedState() {\n        \n        \n        this.updateContentForNormalState()\n        \n        if (this.type == SearchableDropdownRow.type.selectableItem || this.type ==\n            SearchableDropdownRow.type.customItem) {\n            \n            this._checkbox.hidden = NO\n            //this._checkbox.titleLabel.hidden = YES;\n            \n            this._checkbox.titleLabel.textColor = CBColor.primaryTintColor\n            \n            this._titleLabel.hidden = YES\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    wasRemovedFromViewTree() {\n        \n        super.wasRemovedFromViewTree()\n        \n        this.highlighted = NO\n        this.hovered = NO\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        \n        if (this._checkbox) {\n            \n            \n            \n            this._checkbox.style.top = \"25%\"\n            this._checkbox.style.height = \"30px\"\n            \n            \n            this._checkbox.style.left = \"\" + this.contentPadding + \"px\"\n            this._checkbox.style.right = \"\" + this.contentPadding + \"px\"\n            \n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { nil, UITextField, UIView } from \"uicore-ts\"\n\n\nexport class SearchTextField extends UIView {\n    \n    _textField: UIView\n    _searchButton: UIView\n    \n    constructor(elementID: string) {\n        \n        super(elementID)\n        \n    }\n    \n    \n    initView(elementID: string, viewHTMLElement: HTMLElement) {\n        \n        super.initView(elementID, viewHTMLElement)\n        \n        \n        viewHTMLElement.classList.add(\"input\", \"input--search\")\n        \n        \n        viewHTMLElement.innerHTML = \"\\\n            <button type=\\\"button\\\" class=\\\"input__button\\\">\\\n                <i class=\\\"material-icons\\\">search</i>\\\n            </button>\\\n            <input type=\\\"search\\\" class=\\\"input__field\\\" placeholder=\\\"Search\\\">\"\n        \n        \n        \n        \n        this._textField = new UIView(nil, this.textFieldElement)\n        this._searchButton = new UIView(nil, this.searchButtonElement)\n        \n        \n        \n        this._searchButton.addTargetForControlEvents([\n            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\n        ], function (this: SearchTextField, sender: UIView, event: Event) {\n            \n            this.performSearch()\n            \n        }.bind(this))\n        \n        this._textField.addTargetForControlEvent(\n            UIView.controlEvent.EnterDown,\n            function (this: SearchTextField, sender: UIView, event: Event) {\n                \n                this.performSearch()\n                \n            }.bind(this)\n        )\n        \n        \n        \n        this._textField.viewHTMLElement.oninput = function (this: SearchTextField, event) {\n            \n            \n            this._textField.sendControlEventForKey(UITextField.controlEvent.TextChange, event)\n            \n            \n        }.bind(this)\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get searchButtonElement() {\n        \n        return this.viewHTMLElement.querySelector(\"button\") as HTMLButtonElement\n        \n        \n    }\n    \n    get textFieldElement() {\n        \n        return this.viewHTMLElement.querySelector(\"input\") as HTMLInputElement\n        \n        \n    }\n    \n    \n    \n    set placeholderText(placeholderText: string) {\n        \n        this.textFieldElement.setAttribute(\"placeholder\", placeholderText)\n        \n    }\n    \n    get placeholderText() {\n        \n        \n        return this.textFieldElement.getAttribute(\"placeholder\")\n        \n        \n    }\n    \n    \n    \n    \n    \n    get text() {\n        \n        return this.textFieldElement.value\n        \n    }\n    \n    set text(text: string) {\n        \n        this.textFieldElement.value = text\n        \n    }\n    \n    \n    \n    focus() {\n        \n        this.textFieldElement.focus()\n        \n    }\n    \n    blur() {\n        \n        this.textFieldElement.blur()\n        \n    }\n    \n    \n    \n    \n    \n    performSearch(): any {\n    \n    \n    \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    FIRST,\n    IS,\n    IS_DEFINED, IS_NOT,\n    MAKE_ID, nil,\n    NO, UIButton,\n    UIColor,\n    UICore, UICoreValues, UIRoute, UITableView,\n    UITextArea,\n    UITextView,\n    UIView,\n    UIViewController,\n    YES\n} from \"uicore-ts\"\nimport { CBColor } from \"./CBCore/CBColor\"\nimport { CBCore } from \"./CBCore/CBCore\"\nimport { CBDropdownDataItem, CBSocketMessageSendResponseFunction } from \"./CBCore/CBDataInterfaces\"\nimport { IS_NOT_SOCKET_ERROR } from \"./CBCore/CBSocketClient\"\nimport { CBButton } from \"./Custom components/CBButton\"\nimport { CBDialogViewShower } from \"./Custom components/CBDialogViewShower\"\nimport { CBTextField } from \"./Custom components/CBTextField\"\nimport { LanguageService } from \"./Custom components/LanguageService\"\nimport { SearchableDropdown } from \"./Custom components/SearchableDropdown\"\nimport { SearchableDropdownRow } from \"./Custom components/SearchableDropdownRow\"\nimport { RootViewParameters } from \"./RootViewParameters\"\n\n\n\n\n\nexport class InternalLanguageSettingsViewController extends UIViewController {\n    \n    \n    titleLabel: UITextView\n    loadButton: UIButton\n    languageKeyTextField: CBTextField\n    tableView: UITableView\n    textArea: UITextArea\n    dropdown: SearchableDropdown<string>\n    saveButton: CBButton\n    deleteButton: CBButton\n    addButton: CBButton\n    itemKeyTextField: CBTextField\n    itemTitleOrAttachedObjectTextArea: UITextArea\n    \n    languageKeysTextArea: UITextArea\n    deleteLanguageButton: CBButton\n    \n    \n    clearLanguageButton: CBButton\n    dataTextArea: UITextArea\n    dataTextJSONLabel: UITextView\n    loadJSONDataButton: CBButton\n    \n    constructor(view) {\n        \n        super(view)\n        \n        // Code for further setup if necessary\n        \n        this.loadSubviews()\n        \n    }\n    \n    \n    static readonly routeComponentName = \"internal_language_settings\"\n    \n    static readonly ParameterIdentifierName = {}\n    \n    \n    loadSubviews() {\n        \n        \n        this.view.backgroundColor = UIColor.whiteColor\n        \n        \n        this.titleLabel = new UITextView(this.view.elementID + \"TitleLabel\", UITextView.type.header2)\n        this.titleLabel.text = \"Internal language settings\"\n        this.view.addSubview(this.titleLabel)\n        \n        \n        \n        \n        \n        this.languageKeyTextField = new CBTextField(this.view.elementID + \"LanguageKeyTextField\")\n        this.languageKeyTextField.placeholderText = \"Language key\"\n        this.view.addSubview(this.languageKeyTextField)\n        \n        this.languageKeysTextArea = new UITextArea(this.view.elementID + \"LanguageKeysTextArea\")\n        this.languageKeysTextArea.placeholderText = \"Available language keys\"\n        this.view.addSubview(this.languageKeysTextArea)\n        \n        \n        this.loadButton = new CBButton(this.view.elementID + \"LoadButton\")\n        this.loadButton.titleLabel.text = \"Load\"\n        this.view.addSubview(this.loadButton)\n        \n        this.saveButton = new CBButton(this.view.elementID + \"SaveButton\")\n        this.saveButton.titleLabel.setText(\"internalLanguageSettingsViewControllerSaveButton\", \"Save\")\n        this.view.addSubview(this.saveButton)\n        \n        \n        // this.textArea = new UITextArea(this.view.elementID + \"TextArea\")\n        // this.view.addSubview(this.textArea)\n        \n        \n        this.dropdown = new SearchableDropdown(this.view.elementID + \"SearchableDropdown\")\n        this.dropdown._controlEventTargets[UIView.controlEvent.PointerUpInside] = []\n        this.dropdown._controlEventTargets[UIView.controlEvent.EnterDown] = []\n        this.dropdown._dialogView = nil\n        this.dropdown.isSingleSelection = YES\n        this.dropdown._rightImageView.imageSource = nil\n        this.dropdown.keepFocusedRowVisible = NO\n        this.view.addSubview(this.dropdown)\n        \n        this.dropdown._tableView.style.borderWidth = \"1px\"\n        this.dropdown._tableView.style.borderStyle = \"solid\"\n        this.dropdown._tableView.style.borderColor = CBColor.primaryContentColor.stringValue\n        this.view.addSubview(this.dropdown._tableView)\n        \n        \n        \n        \n        this.addButton = new CBButton(this.view.elementID + \"AddButton\")\n        this.addButton.titleLabel.text = \"Add text\"\n        this.addButton.setBackgroundColorsWithNormalColor(UIColor.greenColor)\n        this.view.addSubview(this.addButton)\n        \n        this.deleteButton = new CBButton(this.view.elementID + \"DeleteButton\")\n        this.deleteButton.titleLabel.text = \"Delete text\"\n        this.deleteButton.setBackgroundColorsWithNormalColor(UIColor.redColor)\n        this.view.addSubview(this.deleteButton)\n        \n        \n        this.deleteLanguageButton = new CBButton(this.view.elementID + \"DeleteLanguageButton\")\n        this.deleteLanguageButton.titleLabel.text = \"Delete language\"\n        this.deleteLanguageButton.setBackgroundColorsWithNormalColor(UIColor.redColor)\n        this.view.addSubview(this.deleteLanguageButton)\n        \n        this.clearLanguageButton = new CBButton(this.view.elementID + \"ClearLanguageButton\")\n        this.clearLanguageButton.titleLabel.text = \"Clear language\"\n        this.clearLanguageButton.setBackgroundColorsWithNormalColor(UIColor.redColor)\n        this.view.addSubview(this.clearLanguageButton)\n        \n        \n        \n        \n        \n        this.itemKeyTextField = new CBTextField(this.view.elementID + \"ItemKeyTextField\")\n        this.itemKeyTextField.placeholderText = \"Item key\"\n        this.view.addSubview(this.itemKeyTextField)\n        \n        this.itemTitleOrAttachedObjectTextArea = new UITextArea(this.view.elementID +\n            \"ItemTitleOrAttachedObjectTextArea\")\n        this.itemTitleOrAttachedObjectTextArea.placeholderText = \"Title\"\n        this.view.addSubview(this.itemTitleOrAttachedObjectTextArea)\n        \n        this.itemTitleDidChange()\n        \n        \n        \n        \n        \n        this.dataTextJSONLabel = new UITextView(this.view.elementID + \"DataTextJSONLabel\")\n        this.dataTextJSONLabel.text = \"Data in JSON format\"\n        this.view.addSubview(this.dataTextJSONLabel)\n        \n        this.dataTextArea = new UITextArea(this.view.elementID + \"DataTextArea\")\n        this.dataTextArea.placeholderText = \"Data in JSON format\"\n        this.view.addSubview(this.dataTextArea)\n        \n        \n        this.loadJSONDataButton = new CBButton(this.view.elementID + \"LoadJSONDataButton\")\n        this.loadJSONDataButton.titleLabel.text = \"Load JSON data\"\n        this.view.addSubview(this.loadJSONDataButton)\n        \n        \n        this.dropdown.addTargetForControlEvent(\n            SearchableDropdown.controlEvent.SelectionDidChange,\n            function (\n                this: InternalLanguageSettingsViewController,\n                sender: SearchableDropdown<undefined>,\n                event: Event\n            ) {\n                \n                this.updateitemDetailsView()\n                \n            }.bind(this)\n        )\n        \n        const dropdownViewForRowWithIndexFunction = this.dropdown._tableView.viewForRowWithIndex.bind(this.dropdown._tableView)\n        \n        this.dropdown._tableView.viewForRowWithIndex = function (\n            this: InternalLanguageSettingsViewController,\n            rowIndex: number\n        ) {\n            \n            const row = dropdownViewForRowWithIndexFunction(rowIndex)\n            const dataItem = this.dropdown.drawingData[rowIndex]\n            const key = dataItem.itemCode\n            const value = dataItem.attachedObject\n            \n            if (LanguageService.languageValues[this.languageKeyTextField.text][key] == value) {\n                \n                (row as SearchableDropdownRow).titleText = (row as SearchableDropdownRow).titleText + \" - static\"\n                row.alpha = 0.5\n                \n            }\n            else {\n                \n                row.alpha = 1\n                \n            }\n            \n            return row\n            \n        }.bind(this)\n        \n        \n        \n        \n        \n        this.itemKeyTextField.textField.addTargetForControlEvent(\n            UITextArea.controlEvent.TextChange,\n            function (this: InternalLanguageSettingsViewController, sender: CBTextField, event: Event) {\n                \n                const selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n                const previousKey = selectedItem.itemCode\n                const languageObject = LanguageService.languages[this.languageKeyTextField.text]\n                const languageValuesValue = languageObject[previousKey]\n                \n                if (IS_NOT(languageValuesValue)) {\n                    delete languageObject[previousKey]\n                }\n                \n                languageObject[this.itemKeyTextField.text] = selectedItem.attachedObject\n                \n                selectedItem.title = LanguageService.localizedTextObjectForText(this.itemKeyTextField.text)\n                selectedItem.itemCode = this.itemKeyTextField.text\n                selectedItem._id = this.itemKeyTextField.text\n                \n                this.reloadTableData()\n                \n            }.bind(this)\n        )\n        \n        this.itemTitleOrAttachedObjectTextArea.addTargetForControlEvent(\n            UITextArea.controlEvent.TextChange,\n            function (this: InternalLanguageSettingsViewController, sender: CBTextField, event: Event) {\n                \n                this.itemTitleDidChange()\n                this.reloadTableData()\n                \n            }.bind(this)\n        )\n        \n        //this.loadSubjectData()\n        \n        this.updateAvailableKeys()\n        \n        this.loadButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalLanguageSettingsViewController, sender: UIButton, event: Event) {\n                \n                this.loadData()\n                \n            }.bind(this)\n        )\n        \n        this.saveButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalLanguageSettingsViewController, sender: UIButton, event: Event) {\n                \n                CBCore.sharedInstance.socketClient.sendMessageForKey(\n                    \"RetrieveLanguageData\",\n                    nil,\n                    function (this: InternalLanguageSettingsViewController, codes: string[]) {\n                        \n                        this.saveData()\n                        \n                    }.bind(this)\n                )\n                \n            }.bind(this)\n        )\n        \n        \n        this.addButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalLanguageSettingsViewController, sender: UIButton, event: Event) {\n                \n                const title = LanguageService.localizedTextObjectForText(this.itemKeyTextField.text)\n                const itemID = MAKE_ID()\n                \n                const dataRow: CBDropdownDataItem<undefined> = {\n                    \n                    _id: itemID,\n                    title: title,\n                    isADropdownDataRow: YES,\n                    isADropdownDataSection: NO,\n                    \n                    attachedObject: undefined,\n                    \n                    itemCode: nil,\n                    dropdownCode: (this.dropdown.selectedData.firstElement || {} as any).dropdownCodes\n                    \n                }\n                \n                const rowIndex = this.dropdown.selectedIndices.firstElement\n                \n                if (IS_DEFINED(rowIndex)) {\n                    \n                    this.dropdown.drawingData.insertElementAtIndex(rowIndex + 1, dataRow)\n                    this.reloadTableData()\n                    \n                }\n                else {\n                    \n                    this.dropdown.drawingData.push(dataRow)\n                    this.reloadTableData()\n                    this.dropdown._tableView.scrollToBottom()\n                    \n                }\n                \n            }.bind(this)\n        )\n        \n        this.deleteButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalLanguageSettingsViewController, sender: UIButton, event: Event) {\n                \n                const rowIndex = this.dropdown.selectedIndices.firstElement\n                \n                if (IS_DEFINED(rowIndex)) {\n                    \n                    var selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n                    var key = LanguageService.stringForCurrentLanguage(selectedItem.title)\n                    \n                    delete LanguageService.languages[this.languageKeyTextField.text][key]\n                    \n                    this.dropdown.drawingData.removeElementAtIndex(rowIndex)\n                    \n                    this.dropdown.selectedData.removeElementAtIndex(0)\n                    this.dropdown.selectedIndices.removeElementAtIndex(0)\n                    \n                    this.dropdown.selectionDidChange(this.dropdown.selectedData)\n                    \n                }\n                \n                this.reloadTableData()\n                \n            }.bind(this)\n        )\n        \n        this.deleteLanguageButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalLanguageSettingsViewController, sender: UIButton, event: Event) {\n                \n                if (this.languageKeyTextField.text && confirm(\"Are you sure you want to delete this language?\")) {\n                    \n                    if (confirm(\"This will REMOVE THE LANGUAGE FROM THE SERVER, are you definitely sure?\")) {\n                        \n                        CBCore.sharedInstance.socketClient.sendMessageForKey(\n                            \"DeleteLanguageWithKey\",\n                            this.languageKeyTextField.text,\n                            function (\n                                this: InternalLanguageSettingsViewController,\n                                responseMessage: any,\n                                respondWithMessage: CBSocketMessageSendResponseFunction\n                            ) {\n                                \n                                LanguageService.useStoredLanguageValues(responseMessage)\n                                this.updateAvailableKeys()\n                                this.languageKeyTextField.text = nil\n                                this.dropdown.data = []\n                                this.updateitemDetailsView()\n                                \n                            }.bind(this)\n                        )\n                        \n                    }\n                    \n                }\n                \n            }.bind(this)\n        )\n        \n        this.clearLanguageButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalLanguageSettingsViewController, sender: UIButton, event: Event) {\n                \n                if (this.languageKeyTextField.text && confirm(\"Are you sure you want to clear this language?\")) {\n                    \n                    LanguageService.languages[this.languageKeyTextField.text] = {}\n                    this.dropdown.data = []\n                    this.dropdown.selectedData = []\n                    this.dropdown.selectedIndices = []\n                    this.updateitemDetailsView()\n                    \n                }\n                \n            }.bind(this)\n        )\n        \n        \n        this.loadJSONDataButton.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            function (this: InternalLanguageSettingsViewController, sender: UIButton, event: Event) {\n                \n                this.loadJSONData()\n                \n            }.bind(this)\n        )\n        \n        \n    }\n    \n    \n    reloadTableData() {\n        this.dropdown._tableView.reloadData()\n        const dataToShow = {}\n        this.dropdown.drawingData.forEach(function (dataItem, index, array) {\n            \n            dataToShow[FIRST(dataItem.itemCode, dataItem._id)] = dataItem.attachedObject\n            \n        })\n        this.dataTextArea.text = JSON.stringify(dataToShow, null, 2)\n    }\n    \n    \n    updateAvailableKeys() {\n        const codes = LanguageService.languages.allKeys\n        this.languageKeysTextArea.text = \"Saved keys: \" + JSON.stringify(codes)\n        if (codes.length && IS_NOT(this.languageKeyTextField.text)) {\n            this.languageKeyTextField.text = codes.firstElement\n            this.loadData()\n        }\n    }\n    \n    \n    updateitemDetailsView() {\n        const selectedItem: CBDropdownDataItem<undefined> = this.dropdown.selectedData.firstElement || nil\n        if (IS(selectedItem)) {\n            this.itemKeyTextField.text = LanguageService.stringForCurrentLanguage(selectedItem.title)\n            this.itemTitleOrAttachedObjectTextArea.text = selectedItem.attachedObject\n            this.itemTitleDidChange()\n        }\n    }\n    \n    loadData() {\n        \n        this._triggerLayoutViewSubviews()\n        const dropdownData: CBDropdownDataItem<string>[] = []\n        \n        LanguageService.languages[this.languageKeyTextField.text].forEach(function (value, key) {\n            \n            dropdownData.push({\n                \n                _id: key,\n                title: LanguageService.localizedTextObjectForText(key),\n                itemCode: key,\n                dropdownCode: \"Aasdasdasdasdasdasdasd\",\n                isADropdownDataRow: YES,\n                isADropdownDataSection: NO,\n                \n                attachedObject: value\n                \n            })\n            \n        })\n        \n        this.dropdown.selectedData.removeElementAtIndex(0)\n        this.dropdown.selectedIndices.removeElementAtIndex(0)\n        this.dropdown.data = dropdownData\n        \n        this.reloadTableData()\n        this.updateitemDetailsView()\n        \n    }\n    \n    \n    saveData() {\n        \n        const languageObject = {}\n        const languageKey = this.languageKeyTextField.text\n        this.dropdown.drawingData.forEach(function (dataItem, index, array) {\n            const staticLanguageObject = LanguageService.languageValues[languageKey]\n            if (IS_NOT(staticLanguageObject[dataItem.itemCode] == dataItem.attachedObject)) {\n                languageObject[dataItem.itemCode] = dataItem.attachedObject\n            }\n        })\n        \n        CBCore.sharedInstance.socketClient.sendMessageForKey(\n            \"RetrieveLanguageData\",\n            nil,\n            function (\n                this: InternalLanguageSettingsViewController,\n                responseMessage: any,\n                respondWithMessage: CBSocketMessageSendResponseFunction\n            ) {\n                \n                responseMessage[this.languageKeyTextField.text] = languageObject\n                \n                // Send the data to server to be saved\n                CBCore.sharedInstance.socketClient.sendMessageForKey(\n                    \"SaveLanguagesData\",\n                    responseMessage,\n                    function (this: InternalLanguageSettingsViewController, response) {\n                        \n                        if (IS_NOT_SOCKET_ERROR(response)) {\n                            CBDialogViewShower.alert(\"Saved successfully.\")\n                            LanguageService.useStoredLanguageValues(response)\n                            this.loadData()\n                            LanguageService.broadcastLanguageChangeEvent()\n                            UICoreValues.main.rootViewController.view.setNeedsLayout()\n                        }\n                        else {\n                            CBDialogViewShower.alert(\"Failed to save dropdown data.\")\n                        }\n                        \n                        this.updateAvailableKeys()\n                        \n                    }.bind(this)\n                )\n                \n            }.bind(this)\n        )\n        \n    }\n    \n    \n    loadJSONData() {\n        \n        let itemTitles: {\n            \n            [x: string]: string\n            \n        } = {}\n        \n        try {\n            itemTitles = JSON.parse(this.dataTextArea.text)\n        } catch (exception) {\n            CBDialogViewShower.alert(exception)\n            return\n        }\n        \n        LanguageService.languages[this.languageKeyTextField.text] = JSON.parse(JSON.stringify(\n            LanguageService.languageValues[this.languageKeyTextField.text]\n        )).objectByCopyingValuesRecursivelyFromObject(itemTitles)\n        \n        this.loadData()\n        this.reloadTableData()\n        \n        if (this.dropdown.selectedIndices.length) {\n            this.dropdown._selectedData = [this.dropdown.drawingData[this.dropdown.selectedIndices.firstElement]]\n        }\n        \n        this.updateitemDetailsView()\n        \n    }\n    \n    \n    itemTitleDidChange() {\n        \n        const selectedItem: CBDropdownDataItem<string> = this.dropdown.selectedData.firstElement || nil\n        selectedItem.attachedObject = this.itemTitleOrAttachedObjectTextArea.text\n        \n        const languageObject = LanguageService.languages[this.languageKeyTextField.text] || {}\n        languageObject[selectedItem.itemCode] = this.itemTitleOrAttachedObjectTextArea.text\n        \n    }\n    \n    \n    loadSubjectData() {\n        \n    \n        \n    }\n    \n    \n    async handleRoute(route: UIRoute) {\n        \n        super.handleRoute(route)\n        const inquiryComponent = route.componentWithName(InternalLanguageSettingsViewController.routeComponentName)\n        \n        this.reloadTableData()\n        \n    }\n    \n    \n    layoutViewSubviews() {\n        \n        super.layoutViewSubviews()\n        \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding\n        \n        // View bounds\n        const bounds = this.view.bounds.rectangleWithInset(padding)\n        \n        this.titleLabel.frame = bounds.rectangleWithHeight(labelHeight * 2)\n        \n        let rowFrame = this.titleLabel.frame.rectangleForNextRow(padding)\n        rowFrame.distributeViewsAlongWidth([this.languageKeyTextField, this.loadButton, this.saveButton], [\n            2, 1, 1\n        ], padding)\n        \n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 5)\n        this.languageKeysTextArea.frame = rowFrame\n        \n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 2)\n        this.dropdown.frame = rowFrame.rectangleWithWidth(bounds.width * 0.5 - padding * 0.5)\n        this.dropdown._tableView.frame = this.dropdown.frame.rectangleForNextRow(padding, 500)\n        this.dropdown._tableView.setMargins(0, 0, padding, 0)\n        \n        const deleteAddFrame = this.dropdown.frame.rectangleForNextColumn(padding * 0.5, this.dropdown.frame.width +\n            padding * 0.5)\n        deleteAddFrame.distributeViewsAlongWidth([this.deleteButton, this.addButton], 1, padding)\n        \n        this.itemKeyTextField.frame = deleteAddFrame.rectangleForNextRow(padding)\n        \n        this.itemTitleOrAttachedObjectTextArea.frame = this.itemKeyTextField.frame.rectangleForNextRow(\n            padding,\n            labelHeight *\n            11\n        )\n        \n        this.itemTitleOrAttachedObjectTextArea.frame.rectangleForNextRow(padding, labelHeight *\n            2).distributeViewsEquallyAlongWidth([this.deleteLanguageButton, this.clearLanguageButton], padding)\n        \n        this.dataTextJSONLabel.frame = this.languageKeysTextArea.frame.rectangleWithY(this.dropdown._tableView.frame.max.y +\n            padding).rectangleWithHeight(labelHeight)\n        \n        this.dataTextArea.frame = this.dataTextJSONLabel.frame.rectangleForNextRow(padding, 500)\n        \n        this.dataTextArea.frame.rectangleForNextRow(padding, labelHeight *\n            2).distributeViewsEquallyAlongWidth([this.loadJSONDataButton], padding)\n        \n        this.loadJSONDataButton.setMargins(0, 0, padding, 0)\n        \n    }\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import {\n    IS,\n    nil,\n    NO, UIButton,\n    UIColor,\n    UICoreValues, UIImageView,\n    UIRectangle,\n    UIRoute,\n    UITextView,\n    UIView,\n    UIViewBroadcastEvent,\n    YES\n} from \"uicore-ts\"\nimport { CBColor } from \"./CBCore/CBColor\"\nimport { CBCore } from \"./CBCore/CBCore\"\nimport { LanguageService } from \"./Custom components/LanguageService\"\n\n\n\n\n\nexport class LanguagesDialogView extends UIView {\n    \n    \n    \n    titleLabel: UITextView\n    buttons: UIButton[]\n    _previousLanguageKey: string\n    \n    constructor(elementID: string, element?: HTMLElement) {\n        \n        super(elementID, element)\n        \n    }\n    \n    \n    \n    \n    \n    initView(elementID, viewHTMLElement) {\n        \n        super.initView(elementID, viewHTMLElement)\n        \n        // Adding a title label\n        this.titleLabel = new UITextView(\"LanguagesDialogTitleLabel\", UITextView.type.header1)\n        this.titleLabel.setText(\"selectLanguageTitle\", \"Select language\")\n        this.titleLabel.textAlignment = UITextView.textAlignment.center\n        this.titleLabel.textColor = UIColor.whiteColor\n        this.addSubview(this.titleLabel)\n        \n        // Initializing the buttons array\n        this.buttons = []\n        \n        const languageKeys = Object.keys(LanguageService.languages)\n        \n        languageKeys.forEach(function (this: LanguagesDialogView, languageKey: string, index: number, array: string[]) {\n            \n            const language = LanguageService.languages[languageKey]\n            \n            // Creating a language button\n            const languageButton = new UIButton(\"LeftBarLanguageButton\" + language.languageNameShort)\n            languageButton.titleLabel.text = language.languageName\n            this.buttons.push(languageButton)\n            this.addSubview(languageButton)\n            \n            // Adding a selected image view to the button\n            const selectedImageView = new UIImageView(\"SelectedImage\" + language.languageNameShort)\n            selectedImageView.imageSource = \"images/baseline-check-24px.svg\"\n            selectedImageView.style.filter = \"invert(0.35) sepia(1) saturate(5) hue-rotate(175deg)\"\n            languageButton.addSubview(selectedImageView)\n            \n            // Augmenting button layout function\n            const buttonLayoutFunction = languageButton.layoutSubviews\n            languageButton.layoutSubviews = function () {\n                \n                // Setting frame for the imageView\n                const bounds = languageButton.bounds\n                const padding = 10\n                const imageHeight = bounds.height - 2 * padding\n                selectedImageView.frame = new UIRectangle(bounds.width - imageHeight -\n                    padding, padding, imageHeight, imageHeight)\n                \n                // Calling original function\n                buttonLayoutFunction.call(languageButton)\n                \n            }\n            \n            languageButton.setNeedsLayout()\n            \n            // Setting up button visual dynamics\n            languageButton.updateContentForNormalState = function () {\n                languageButton.titleLabel.textColor = CBColor.primaryContentColor\n                languageButton.backgroundColor = UIColor.whiteColor\n                selectedImageView.hidden = YES\n            }\n            languageButton.updateContentForHighlightedState = function () {\n                languageButton.titleLabel.textColor = CBColor.primaryContentColor\n                languageButton.backgroundColor = UIColor.colorWithRGBA(200, 200, 200)\n            }\n            languageButton.updateContentForSelectedAndHighlightedState = languageButton.updateContentForHighlightedState\n            languageButton.updateContentForSelectedState = function () {\n                languageButton.titleLabel.textColor = CBColor.primaryContentColor\n                languageButton.backgroundColor = UIColor.whiteColor\n                selectedImageView.hidden = NO\n            }\n            languageButton.updateContentForCurrentState()\n            \n            // Setting initial button selected state\n            const currentLanguageKey = UIRoute.currentRoute.componentWithName(\"settings\").parameters.language\n            if (IS(currentLanguageKey)) {\n                if (currentLanguageKey == languageKey) {\n                    languageButton.selected = YES\n                }\n            }\n            else if (languageKey == \"en\") {\n                languageButton.selected = YES\n            }\n            \n            // Adding the button press action\n            languageButton.addTargetForControlEvents([\n                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\n            ], function (this: LanguagesDialogView, sender: UIButton, event: Event) {\n                \n                CBCore.sharedInstance.languageKey = languageKey\n                \n                this.buttons.forEach(function (button, index, array) {\n                    button.selected = NO\n                })\n                languageButton.selected = YES\n                \n                LanguageService.updateCurrentLanguageKey()\n                \n                this.rootView.broadcastEventInSubtree({\n                    \n                    name: UIView.broadcastEventName.LanguageChanged,\n                    parameters: nil\n                    \n                })\n                \n                \n                \n                \n            }.bind(this))\n            \n            \n        }, this)\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    wasAddedToViewTree() {\n        \n        super.wasAddedToViewTree()\n        \n        this._previousLanguageKey = LanguageService.currentLanguageKey\n        \n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        \n        if (event.name == UICoreValues.broadcastEventName.RouteDidChange && this._previousLanguageKey !=\n            LanguageService.currentLanguageKey) {\n            \n            this._previousLanguageKey = LanguageService.currentLanguageKey\n            \n            this.rootView.broadcastEventInSubtree({\n                \n                name: UIView.broadcastEventName.LanguageChanged,\n                parameters: nil\n                \n            })\n            \n            \n            \n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        if (this.hidden) {\n            return\n        }\n        \n        const maxWidth = 350\n        if (this.bounds.width > maxWidth) {\n            this.bounds = this.bounds.rectangleWithWidth(maxWidth)\n        }\n        \n        // Variables\n        const bounds = this.bounds\n        const sidePadding = 20 * 0\n        \n        this.titleLabel.frame = new UIRectangle(sidePadding, sidePadding, 50, bounds.width - sidePadding * 2)\n        \n        var previousFrame = this.titleLabel.frame\n        this.buttons.forEach(function (button, index, array) {\n            \n            button.frame = previousFrame.rectangleWithY(previousFrame.max.y + 1).rectangleWithWidth(bounds.width -\n                sidePadding * 2)\n            previousFrame = button.frame\n            \n        })\n        \n        \n        this.bounds = bounds.rectangleWithHeight(this.intrinsicContentHeight(bounds.width))\n        \n        this.style.maxHeight = \"\" + bounds.height.integerValue + \"px\"\n        \n        this.centerInContainer()\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { UIColor, UIRoute, UITextView, UIViewController } from \"uicore-ts\"\nimport { LanguageService } from \"./Custom components/LanguageService\"\nimport { RootViewParameters } from \"./RootViewParameters\"\n\n\nexport class SomeContentViewController extends UIViewController {\n    \n    readonly titleLabel: UITextView\n    \n    constructor(view) {\n        \n        super(view)\n        \n        // Code for further setup if necessary\n        \n        this.view.backgroundColor = UIColor.whiteColor\n        \n        this.titleLabel = new UITextView(this.view.elementID + \"TitleLabel\", UITextView.type.header2)\n        this.titleLabel.localizedTextObject = { en: \"Some content\", est: \"Mingi sisu\" }\n        this.view.addSubview(this.titleLabel)\n        \n    }\n    \n    \n    static readonly routeComponentName = \"somecontent\"\n    \n    static readonly ParameterIdentifierName = {}\n    \n    async viewDidAppear() {\n    \n    }\n    \n    \n    async viewWillDisappear() {\n    \n    }\n    \n    \n    async handleRoute(route: UIRoute) {\n        \n        super.handleRoute(route)\n        const inquiryComponent = route.componentWithName(SomeContentViewController.routeComponentName)\n        \n    }\n    \n    \n    updateViewConstraints() {\n        \n        super.updateViewConstraints()\n        \n    }\n    \n    \n    updateViewStyles() {\n        \n        super.updateViewStyles()\n        \n    }\n    \n    \n    viewDidLayoutSubviews() {\n        \n        super.viewDidLayoutSubviews()\n        \n    }\n    \n    \n    layoutViewSubviews() {\n        \n        super.layoutViewSubviews()\n        \n        const padding = RootViewParameters.paddingLength\n        const labelHeight = padding\n        \n        // View bounds\n        const bounds = this.view.bounds.rectangleWithInset(padding)\n        \n        this.titleLabel.frame = bounds.rectangleWithHeight(labelHeight * 2)\n        \n    }\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import { nil, UITextView, UIView } from \"uicore-ts\"\nimport { CBColor } from \"./CBCore/CBColor\"\n\n\n\n\n\nexport class TopBarView extends UIView {\n    \n    \n    titleLabel: UITextView\n    \n    constructor(elementID, element) {\n        \n        super(elementID, element)\n        \n    }\n    \n    \n    \n    initView() {\n        \n        super.initView(nil, nil)\n        \n        this.backgroundColor = CBColor.whiteColor\n        this.initStyleSelector(\".\" + this.styleClassName, \"position: static; left: 0; right: 0; top: 0; height: 50px;\")\n        this.addStyleClass(\"TopBarView\")\n        \n        this.setBorder(nil, 0, CBColor.primaryContentColor)\n        this.style.borderBottomWidth = \"1px\"\n        \n        this.style.fontSize = \"15pt\"\n        \n        \n        this.titleLabel = new UITextView(\"TopBarTitleLabel\")\n        this.titleLabel.setText(\"topBarTitle\", \"TestPage\")\n        this.titleLabel.style.color = \"white\"\n        this.titleLabel.style.fontSize = \"25pt\"\n        //this.addSubview(this.titleLabel);\n        \n        this.style.zIndex = \"10\"\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        // Variables\n        const bounds = this.bounds\n        const sidePadding = 10\n        \n        \n        // Title\n        this.titleLabel.centerInContainer()\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["__export", "__toCommonJS", "__export", "__toCommonJS", "YES", "NO", "__export", "FIRST", "FIRST_OR_NIL", "IF", "IS", "IS_DEFINED", "IS_NIL", "IS_NOT", "IS_NOT_NIL", "IS_UNDEFINED", "MAKE_ID", "NO", "RETURNER", "UIObject", "YES", "nil", "__toCommonJS", "sourceValue", "__export", "__toCommonJS", "__export", "UIColor", "__toCommonJS", "__export", "UICoreValues", "__toCommonJS", "__export", "__toCommonJS", "__export", "UIRectangle", "__toCommonJS", "__export", "__toCommonJS", "YES", "NO", "__async", "promisedProperties", "__export", "UIView", "__toCommonJS", "view", "i", "event", "onTouchZoom", "__export", "UIRoute", "__toCommonJS", "index", "array", "__export", "UIViewController", "__toCommonJS", "__async", "event", "__export", "UITextView", "__toCommonJS", "event", "__export", "UITextField", "__toCommonJS", "event", "__export", "UITextArea", "__toCommonJS", "__export", "__toCommonJS", "event", "__export", "UIImageView", "__toCommonJS", "event", "__export", "UIButton", "__toCommonJS", "__export", "__toCommonJS", "event", "__export", "UITableView", "__toCommonJS", "view", "event", "Worker", "__export", "__toCommonJS", "__toESM", "UIStringFilterWebWorker", "__export", "__toCommonJS", "event", "__export", "__toCommonJS", "event", "index", "__export", "UILink", "__toCommonJS", "event", "__export", "__toCommonJS", "event", "__export", "__toCommonJS", "Worker", "__export", "UIKeyValueStringFilter", "__toCommonJS", "__toESM", "UIKeyValueStringFilterWebWorker", "Worker", "__export", "__toCommonJS", "__toESM", "UIKeyValueStringSorterWebWorker", "__export", "UIDialogView", "__toCommonJS", "event", "__export", "__toCommonJS", "event", "__export", "UICore", "__toCommonJS", "event", "__export", "UIActionIndicator", "__toCommonJS", "__toCommonJS", "__export", "UIRootViewController", "__toCommonJS", "__async", "__superGet", "__toCommonJS", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "key", "import_uicore_ts", "URL", "event", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "event", "event", "import_uicore_ts", "completion", "messageObject", "event", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "event", "import_uicore_ts", "event", "import_uicore_ts", "import_uicore_ts", "import_uicore_ts", "event", "event", "index", "array", "event", "index", "array", "import_uicore_ts", "event", "import_uicore_ts", "event", "index", "array", "import_uicore_ts", "import_uicore_ts", "event"]
}
