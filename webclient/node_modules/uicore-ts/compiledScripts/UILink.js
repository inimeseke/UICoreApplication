var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var UILink_exports = {};
__export(UILink_exports, {
  UILink: () => UILink
});
module.exports = __toCommonJS(UILink_exports);
var import_UIBaseButton = require("./UIBaseButton");
var import_UICoreValues = require("./UICoreValues");
var import_UIObject = require("./UIObject");
var import_UIRoute = require("./UIRoute");
class UILink extends import_UIBaseButton.UIBaseButton {
  constructor(elementID, initViewData = import_UIObject.nil) {
    super(elementID, "a", initViewData);
    this.stopsPointerEventPropagation = import_UIObject.NO;
    this.pausesPointerEvents = import_UIObject.NO;
  }
  initView(elementID, viewHTMLElement, initViewData) {
    super.initView(elementID, viewHTMLElement, initViewData);
    this.class.superclass = import_UIBaseButton.UIBaseButton;
    viewHTMLElement.onclick = this.blur.bind(this);
  }
  get colors() {
    return this._colors;
  }
  set colors(value) {
    this._colors = value;
  }
  get viewHTMLElement() {
    return super.viewHTMLElement;
  }
  set text(text) {
    this.viewHTMLElement.textContent = text;
  }
  get text() {
    return this.viewHTMLElement.textContent;
  }
  set target(target) {
    this.viewHTMLElement.setAttribute("href", target);
  }
  get target() {
    const result = this.viewHTMLElement.getAttribute("href");
    return result;
  }
  set targetRouteForCurrentState(targetRouteForCurrentState) {
    this._targetRouteForCurrentState = targetRouteForCurrentState;
    this.updateTarget();
  }
  get targetRouteForCurrentState() {
    return this._targetRouteForCurrentState;
  }
  _targetRouteForCurrentState() {
    const result = import_UIRoute.UIRoute.currentRoute.routeByRemovingComponentsOtherThanOnesNamed(["settings"]);
    return result;
  }
  didReceiveBroadcastEvent(event) {
    super.didReceiveBroadcastEvent(event);
    if (event.name == import_UICoreValues.UICoreValues.broadcastEventName.RouteDidChange) {
      this.updateTarget();
    }
  }
  wasAddedToViewTree() {
    super.wasAddedToViewTree();
    this.updateTarget();
  }
  updateTarget() {
    const route = this.targetRouteForCurrentState();
    if (route instanceof import_UIRoute.UIRoute) {
      this.target = route.linkRepresentation;
      return;
    }
    this.target = route;
  }
  layoutSubviews() {
    super.layoutSubviews();
    const bounds = this.bounds;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  UILink
});
//# sourceMappingURL=UILink.js.map
