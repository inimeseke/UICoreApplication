export declare function NilFunction(): any;
export declare var nil: any;
export declare function wrapInNil<T>(object?: T): T;
export declare const YES = true;
export declare const NO = false;
export declare function IS(object: any): boolean;
export declare function IS_NOT(object: any): boolean;
export declare function IS_DEFINED(object: any): boolean;
export declare function IS_UNDEFINED(object: any): boolean;
export declare function IS_NIL(object: any): boolean;
export declare function IS_NOT_NIL(object: any): boolean;
export declare function IS_LIKE_NULL(object: any): boolean;
export declare function IS_NOT_LIKE_NULL(object: any): boolean;
export declare function IS_AN_EMAIL_ADDRESS(email: string): boolean;
export declare function FIRST_OR_NIL<T>(...objects: T[]): T;
export declare function FIRST<T>(...objects: T[]): T;
export declare function MAKE_ID(randomPartLength?: number): string;
export declare function RETURNER<T>(value?: T): (...objects: any[]) => T;
export declare type UIIFBlockReceiver<T> = (functionToCall: () => any) => UIIFEvaluator<T>;
export declare type UIIFEvaluatorBase<T> = () => T;
export interface UIIFEvaluator<T> extends UIIFEvaluatorBase<T> {
    ELSE_IF: (otherValue: any) => UIIFBlockReceiver<T>;
    ELSE: (functionToCall: () => any) => T;
}
export declare function IF<T = any>(value: any): UIIFBlockReceiver<T>;
export declare class UIFunctionCall<T extends (...args: any) => any> {
    isAUIFunctionCallObject: boolean;
    parameters: Parameters<T>[];
    constructor(...parameters: Parameters<T>);
    callFunction(functionToCall: T): void;
}
export declare function CALL<T extends (...args: any) => any>(...objects: Parameters<T>): UIFunctionCall<T>;
export declare class UIFunctionExtender<T extends (...args: any) => any> {
    isAUIFunctionExtenderObject: boolean;
    extendingFunction: T;
    constructor(extendingFunction: T);
    extendedFunction(functionToExtend: T): (...objects: any[]) => void;
}
export declare function EXTEND<T extends (...args: any) => any>(extendingFunction: T): UIFunctionExtender<T>;
export declare class UILazyPropertyValue<T> {
    isAUILazyPropertyValueObject: boolean;
    initFunction: () => T;
    constructor(initFunction: () => T);
    setLazyPropertyValue(key: string, target: object): void;
}
export declare function LAZY_VALUE<T>(initFunction: () => T): UILazyPropertyValue<T>;
export declare type UIInitializerObject<T> = {
    [P in keyof T]?: T[P] extends (...args: any) => any ? UIFunctionCall<T[P]> | UIFunctionExtender<T[P]> | T[P] : T[P] extends object ? UIInitializerObject<T[P]> | UILazyPropertyValue<T[P]> : T[P];
};
export declare class UIObject {
    constructor();
    get class(): any;
    get superclass(): any;
    static wrapObject<T>(object: T): UIObject & T;
    isKindOfClass(classObject: any): boolean;
    isMemberOfClass(classObject: any): boolean;
    valueForKey(key: string): any;
    valueForKeyPath(keyPath: string): any;
    static valueForKeyPath(keyPath: string, object: any): any;
    setValueForKeyPath(keyPath: string, value: any, createPath?: boolean): boolean;
    static setValueForKeyPath(keyPath: string, value: any, currentObject: any, createPath: any): boolean;
    configureWithObject(object: UIInitializerObject<this>): void;
    configuredWithObject(object: UIInitializerObject<this>): this;
    static configureWithObject<T extends object>(configurationTarget: T, object: UIInitializerObject<T>): T;
    performFunctionWithSelf<T>(functionToPerform: (self: this) => T): T;
    performingFunctionWithSelf(functionToPerform: (self: this) => void): this;
    performFunctionWithDelay(delay: number, functionToCall: Function): void;
}
