{
  "version": 3,
  "sources": ["../scripts/UITextView.ts"],
  "sourcesContent": ["import { UIColor } from \"./UIColor\"\nimport { UILocalizedTextObject } from \"./UIInterfaces\"\nimport { FIRST, IS_LIKE_NULL, nil, NO, UIObject, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UITextView extends UIView {\n    \n    \n    _textColor: UIColor = UITextView.defaultTextColor\n    _textAlignment: string\n    \n    _isSingleLine = YES\n    \n    textPrefix = \"\"\n    textSuffix = \"\"\n    \n    _notificationAmount = 0\n    \n    _minFontSize: number = nil\n    _maxFontSize: number = nil\n    \n    _automaticFontSizeSelection = NO\n    \n    changesOften = NO\n    \n    static defaultTextColor = UIColor.blackColor\n    static notificationTextColor = UIColor.redColor\n    \n    static _intrinsicHeightCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    static _intrinsicWidthCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    \n    _intrinsicHeightCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    _intrinsicWidthCache: { [x: string]: { [x: string]: number; }; } & UIObject = new UIObject() as any\n    \n    \n    static _ptToPx: number\n    static _pxToPt: number\n    _text: string\n    \n    \n    constructor(elementID?: string, textViewType = UITextView.type.paragraph, viewHTMLElement = null) {\n        \n        super(elementID, viewHTMLElement, textViewType)\n        \n        this.text = \"\"\n        \n        this.style.overflow = \"hidden\"\n        this.style.textOverflow = \"ellipsis\"\n        this.isSingleLine = YES\n        \n        this.textColor = this.textColor\n        \n        this.userInteractionEnabled = YES\n        \n        \n        if (textViewType == UITextView.type.textArea) {\n            \n            this.pausesPointerEvents = YES\n            \n            this.addTargetForControlEvent(\n                UIView.controlEvent.PointerUpInside,\n                (sender, event) => sender.focus()\n            )\n            \n            \n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    static _determinePXAndPTRatios() {\n        \n        const o = document.createElement(\"div\")\n        o.style.width = \"1000pt\"\n        document.body.appendChild(o)\n        UITextView._ptToPx = o.clientWidth / 1000\n        document.body.removeChild(o)\n        UITextView._pxToPt = 1 / UITextView._ptToPx\n        \n    }\n    \n    \n    \n    \n    \n    static type = {\n        \n        \"paragraph\": \"p\",\n        \"header1\": \"h1\",\n        \"header2\": \"h2\",\n        \"header3\": \"h3\",\n        \"header4\": \"h4\",\n        \"header5\": \"h5\",\n        \"header6\": \"h6\",\n        \"textArea\": \"textarea\",\n        \"textField\": \"input\",\n        \"span\": \"span\",\n        \"label\": \"label\"\n        \n    }\n    \n    \n    \n    static textAlignment = {\n        \n        \"left\": \"left\",\n        \"center\": \"center\",\n        \"right\": \"right\",\n        \"justify\": \"justify\"\n        \n    }\n    \n    get textAlignment() {\n        const result = this.style.textAlign\n        return result\n    }\n    \n    set textAlignment(textAlignment: string) {\n        this._textAlignment = textAlignment\n        this.style.textAlign = textAlignment\n    }\n    \n    \n    \n    get textColor() {\n        const result = this._textColor\n        return result\n    }\n    \n    set textColor(color: UIColor) {\n        \n        this._textColor = color || UITextView.defaultTextColor\n        this.style.color = this._textColor.stringValue\n        \n    }\n    \n    \n    get isSingleLine() {\n        \n        return this._isSingleLine\n        \n    }\n    \n    set isSingleLine(isSingleLine: boolean) {\n        \n        this._isSingleLine = isSingleLine\n        \n        this._intrinsicHeightCache = new UIObject() as any\n        this._intrinsicWidthCache = new UIObject() as any\n        \n        if (isSingleLine) {\n            \n            this.style.whiteSpace = \"pre\"\n            \n            return\n            \n        }\n        \n        this.style.whiteSpace = \"pre-wrap\"\n        \n    }\n    \n    \n    get notificationAmount() {\n        \n        return this._notificationAmount\n        \n    }\n    \n    set notificationAmount(notificationAmount: number) {\n        \n        if (this._notificationAmount == notificationAmount) {\n            \n            return\n            \n        }\n        \n        this._notificationAmount = notificationAmount\n        \n        this.text = this.text\n        \n        this.setNeedsLayoutUpToRootView()\n        \n        this.notificationAmountDidChange(notificationAmount)\n        \n    }\n    \n    notificationAmountDidChange(notificationAmount: number) {\n    \n    \n    \n    \n    \n    }\n    \n    \n    \n    \n    \n    get text() {\n        \n        return (this._text || this.viewHTMLElement.innerHTML)\n        \n    }\n    \n    set text(text) {\n        \n        this._text = text\n        \n        var notificationText = \"\"\n        \n        if (this.notificationAmount) {\n            \n            notificationText = \"<span style=\\\"color: \" + UITextView.notificationTextColor.stringValue + \";\\\">\" +\n                (\" (\" + this.notificationAmount + \")\").bold() + \"</span>\"\n            \n        }\n        \n        if (this.viewHTMLElement.innerHTML != this.textPrefix + text + this.textSuffix + notificationText) {\n            \n            this.viewHTMLElement.innerHTML = this.textPrefix + FIRST(text, \"\") + this.textSuffix + notificationText\n            \n        }\n        \n        this._intrinsicHeightCache = new UIObject() as any\n        this._intrinsicWidthCache = new UIObject() as any\n        \n        this.setNeedsLayout()\n        \n    }\n    \n    set innerHTML(innerHTML: string) {\n        \n        this.text = innerHTML\n        \n    }\n    \n    get innerHTML() {\n        \n        return this.viewHTMLElement.innerHTML\n        \n    }\n    \n    \n    \n    setText(key: string, defaultString: string, parameters?: { [x: string]: string | UILocalizedTextObject }) {\n        \n        this.setInnerHTML(key, defaultString, parameters)\n        \n    }\n    \n    \n    get fontSize() {\n        \n        const style = window.getComputedStyle(this.viewHTMLElement, null).fontSize\n        \n        const result = (parseFloat(style) * UITextView._pxToPt)\n        \n        return result\n        \n    }\n    \n    set fontSize(fontSize: number) {\n        \n        \n        this.style.fontSize = \"\" + fontSize + \"pt\"\n        \n        this._intrinsicHeightCache = new UIObject() as any\n        this._intrinsicWidthCache = new UIObject() as any // MEETOD LUUA!!!!\n        \n        \n    }\n    \n    \n    \n    \n    \n    useAutomaticFontSize(minFontSize: number = nil, maxFontSize: number = nil) {\n        \n        \n        this._automaticFontSizeSelection = YES\n        \n        \n        this._minFontSize = minFontSize\n        \n        this._maxFontSize = maxFontSize\n        \n        this.setNeedsLayout()\n        \n        \n    }\n    \n    \n    \n    \n    \n    static automaticallyCalculatedFontSize(\n        bounds: UIRectangle,\n        currentSize: UIRectangle,\n        currentFontSize: number,\n        minFontSize?: number,\n        maxFontSize?: number\n    ) {\n        \n        minFontSize = FIRST(minFontSize, 1)\n        \n        maxFontSize = FIRST(maxFontSize, 100000000000)\n        \n        \n        const heightMultiplier = bounds.height / (currentSize.height + 1)\n        \n        const widthMultiplier = bounds.width / (currentSize.width + 1)\n        \n        \n        \n        \n        var multiplier = heightMultiplier\n        \n        if (heightMultiplier > widthMultiplier) {\n            \n            multiplier = widthMultiplier\n            \n            \n            \n        }\n        \n        \n        \n        \n        const maxFittingFontSize = currentFontSize * multiplier\n        \n        \n        if (maxFittingFontSize > maxFontSize) {\n            \n            return maxFontSize\n            \n        }\n        \n        if (minFontSize > maxFittingFontSize) {\n            \n            return minFontSize\n            \n        }\n        \n        \n        return maxFittingFontSize\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n    }\n    \n    \n    willMoveToSuperview(superview: UIView) {\n        \n        super.willMoveToSuperview(superview)\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        \n        if (this._automaticFontSizeSelection) {\n            \n            this.fontSize = UITextView.automaticallyCalculatedFontSize(\n                new UIRectangle(0, 0, 1 *\n                    this.viewHTMLElement.offsetHeight, 1 *\n                    this.viewHTMLElement.offsetWidth),\n                this.intrinsicContentSize(),\n                this.fontSize,\n                this._minFontSize,\n                this._maxFontSize\n            )\n            \n            \n            \n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    intrinsicContentHeight(constrainingWidth = 0) {\n        \n        const keyPath = (this.viewHTMLElement.innerHTML + \"_csf_\" + this.computedStyle.font).replace(new RegExp(\n                \"\\\\.\",\n                \"g\"\n            ), \"_\") + \".\" +\n            (\"\" + constrainingWidth).replace(new RegExp(\"\\\\.\", \"g\"), \"_\")\n        \n        let cacheObject = UITextView._intrinsicHeightCache\n        \n        if (this.changesOften) {\n            \n            cacheObject = this._intrinsicHeightCache\n            \n            \n        }\n        \n        \n        var result = cacheObject.valueForKeyPath(keyPath)\n        \n        \n        if (IS_LIKE_NULL(result)) {\n            \n            result = super.intrinsicContentHeight(constrainingWidth)\n            \n            cacheObject.setValueForKeyPath(keyPath, result)\n            \n            \n        }\n        \n        \n        return result\n        \n    }\n    \n    intrinsicContentWidth(constrainingHeight = 0) {\n        \n        const keyPath = (this.viewHTMLElement.innerHTML + \"_csf_\" + this.computedStyle.font).replace(new RegExp(\n                \"\\\\.\",\n                \"g\"\n            ), \"_\") + \".\" +\n            (\"\" + constrainingHeight).replace(new RegExp(\"\\\\.\", \"g\"), \"_\")\n        \n        let cacheObject = UITextView._intrinsicWidthCache\n        \n        if (this.changesOften) {\n            \n            cacheObject = this._intrinsicWidthCache\n            \n            \n        }\n        \n        \n        var result = cacheObject.valueForKeyPath(keyPath)\n        \n        \n        if (IS_LIKE_NULL(result)) {\n            \n            result = super.intrinsicContentWidth(constrainingHeight)\n            \n            cacheObject.setValueForKeyPath(keyPath, result)\n            \n            \n        }\n        \n        \n        return result\n        \n    }\n    \n    \n    \n    \n    intrinsicContentSize() {\n        \n        // This works but is slow\n        const result = this.intrinsicContentSizeWithConstraints(nil, nil)\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\nUITextView._determinePXAndPTRatios()\n\n\n\n\n\n// /**\n//  * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n//  * \n//  * @param {String} text The text to be rendered.\n//  * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n//  * \n//  * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n//  */\n// function getTextMetrics(text, font) {\n//     // re-use canvas object for better performance\n//     var canvas = getTextMetrics.canvas || (getTextMetrics.canvas = document.createElement(\"canvas\"));\n//     var context = canvas.getContext(\"2d\");\n//     context.font = font;\n//     var metrics = context.measureText(text);\n//     return metrics;\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
