{
  "version": 3,
  "sources": ["../scripts/UIColor.ts"],
  "sourcesContent": ["import { UIObject } from \"./UIObject\"\n\n\nexport interface UIColorDescriptor {\n    \n    red: number;\n    green: number;\n    blue: number;\n    alpha?: number;\n    \n}\n\n\n\n\n\nexport class UIColor extends UIObject {\n    \n    \n    constructor(public stringValue: string) {\n        \n        super()\n        \n    }\n    \n    \n    \n    toString() {\n        return this.stringValue\n    }\n    \n    static get redColor() {\n        return new UIColor(\"red\")\n    }\n    \n    static get blueColor() {\n        return new UIColor(\"blue\")\n    }\n    \n    static get greenColor() {\n        return new UIColor(\"green\")\n    }\n    \n    static get yellowColor() {\n        return new UIColor(\"yellow\")\n    }\n    \n    static get blackColor() {\n        return new UIColor(\"black\")\n    }\n    \n    static get brownColor() {\n        return new UIColor(\"brown\")\n    }\n    \n    static get whiteColor() {\n        return new UIColor(\"white\")\n    }\n    \n    static get greyColor() {\n        return new UIColor(\"grey\")\n    }\n    \n    static get lightGreyColor() {\n        return new UIColor(\"lightgrey\")\n    }\n    \n    static get transparentColor() {\n        return new UIColor(\"transparent\")\n    }\n    \n    static get undefinedColor() {\n        return new UIColor(\"\")\n    }\n    \n    static get nilColor() {\n        return new UIColor(\"\")\n    }\n    \n    \n    \n    static nameToHex(name: string) {\n        return {\n            \"aliceblue\": \"#f0f8ff\",\n            \"antiquewhite\": \"#faebd7\",\n            \"aqua\": \"#00ffff\",\n            \"aquamarine\": \"#7fffd4\",\n            \"azure\": \"#f0ffff\",\n            \"beige\": \"#f5f5dc\",\n            \"bisque\": \"#ffe4c4\",\n            \"black\": \"#000000\",\n            \"blanchedalmond\": \"#ffebcd\",\n            \"blue\": \"#0000ff\",\n            \"blueviolet\": \"#8a2be2\",\n            \"brown\": \"#a52a2a\",\n            \"burlywood\": \"#deb887\",\n            \"cadetblue\": \"#5f9ea0\",\n            \"chartreuse\": \"#7fff00\",\n            \"chocolate\": \"#d2691e\",\n            \"coral\": \"#ff7f50\",\n            \"cornflowerblue\": \"#6495ed\",\n            \"cornsilk\": \"#fff8dc\",\n            \"crimson\": \"#dc143c\",\n            \"cyan\": \"#00ffff\",\n            \"darkblue\": \"#00008b\",\n            \"darkcyan\": \"#008b8b\",\n            \"darkgoldenrod\": \"#b8860b\",\n            \"darkgray\": \"#a9a9a9\",\n            \"darkgreen\": \"#006400\",\n            \"darkkhaki\": \"#bdb76b\",\n            \"darkmagenta\": \"#8b008b\",\n            \"darkolivegreen\": \"#556b2f\",\n            \"darkorange\": \"#ff8c00\",\n            \"darkorchid\": \"#9932cc\",\n            \"darkred\": \"#8b0000\",\n            \"darksalmon\": \"#e9967a\",\n            \"darkseagreen\": \"#8fbc8f\",\n            \"darkslateblue\": \"#483d8b\",\n            \"darkslategray\": \"#2f4f4f\",\n            \"darkturquoise\": \"#00ced1\",\n            \"darkviolet\": \"#9400d3\",\n            \"deeppink\": \"#ff1493\",\n            \"deepskyblue\": \"#00bfff\",\n            \"dimgray\": \"#696969\",\n            \"dodgerblue\": \"#1e90ff\",\n            \"firebrick\": \"#b22222\",\n            \"floralwhite\": \"#fffaf0\",\n            \"forestgreen\": \"#228b22\",\n            \"fuchsia\": \"#ff00ff\",\n            \"gainsboro\": \"#dcdcdc\",\n            \"ghostwhite\": \"#f8f8ff\",\n            \"gold\": \"#ffd700\",\n            \"goldenrod\": \"#daa520\",\n            \"gray\": \"#808080\",\n            \"green\": \"#008000\",\n            \"greenyellow\": \"#adff2f\",\n            \"honeydew\": \"#f0fff0\",\n            \"hotpink\": \"#ff69b4\",\n            \"indianred \": \"#cd5c5c\",\n            \"indigo\": \"#4b0082\",\n            \"ivory\": \"#fffff0\",\n            \"khaki\": \"#f0e68c\",\n            \"lavender\": \"#e6e6fa\",\n            \"lavenderblush\": \"#fff0f5\",\n            \"lawngreen\": \"#7cfc00\",\n            \"lemonchiffon\": \"#fffacd\",\n            \"lightblue\": \"#add8e6\",\n            \"lightcoral\": \"#f08080\",\n            \"lightcyan\": \"#e0ffff\",\n            \"lightgoldenrodyellow\": \"#fafad2\",\n            \"lightgrey\": \"#d3d3d3\",\n            \"lightgreen\": \"#90ee90\",\n            \"lightpink\": \"#ffb6c1\",\n            \"lightsalmon\": \"#ffa07a\",\n            \"lightseagreen\": \"#20b2aa\",\n            \"lightskyblue\": \"#87cefa\",\n            \"lightslategray\": \"#778899\",\n            \"lightsteelblue\": \"#b0c4de\",\n            \"lightyellow\": \"#ffffe0\",\n            \"lime\": \"#00ff00\",\n            \"limegreen\": \"#32cd32\",\n            \"linen\": \"#faf0e6\",\n            \"magenta\": \"#ff00ff\",\n            \"maroon\": \"#800000\",\n            \"mediumaquamarine\": \"#66cdaa\",\n            \"mediumblue\": \"#0000cd\",\n            \"mediumorchid\": \"#ba55d3\",\n            \"mediumpurple\": \"#9370d8\",\n            \"mediumseagreen\": \"#3cb371\",\n            \"mediumslateblue\": \"#7b68ee\",\n            \"mediumspringgreen\": \"#00fa9a\",\n            \"mediumturquoise\": \"#48d1cc\",\n            \"mediumvioletred\": \"#c71585\",\n            \"midnightblue\": \"#191970\",\n            \"mintcream\": \"#f5fffa\",\n            \"mistyrose\": \"#ffe4e1\",\n            \"moccasin\": \"#ffe4b5\",\n            \"navajowhite\": \"#ffdead\",\n            \"navy\": \"#000080\",\n            \"oldlace\": \"#fdf5e6\",\n            \"olive\": \"#808000\",\n            \"olivedrab\": \"#6b8e23\",\n            \"orange\": \"#ffa500\",\n            \"orangered\": \"#ff4500\",\n            \"orchid\": \"#da70d6\",\n            \"palegoldenrod\": \"#eee8aa\",\n            \"palegreen\": \"#98fb98\",\n            \"paleturquoise\": \"#afeeee\",\n            \"palevioletred\": \"#d87093\",\n            \"papayawhip\": \"#ffefd5\",\n            \"peachpuff\": \"#ffdab9\",\n            \"peru\": \"#cd853f\",\n            \"pink\": \"#ffc0cb\",\n            \"plum\": \"#dda0dd\",\n            \"powderblue\": \"#b0e0e6\",\n            \"purple\": \"#800080\",\n            \"red\": \"#ff0000\",\n            \"rosybrown\": \"#bc8f8f\",\n            \"royalblue\": \"#4169e1\",\n            \"saddlebrown\": \"#8b4513\",\n            \"salmon\": \"#fa8072\",\n            \"sandybrown\": \"#f4a460\",\n            \"seagreen\": \"#2e8b57\",\n            \"seashell\": \"#fff5ee\",\n            \"sienna\": \"#a0522d\",\n            \"silver\": \"#c0c0c0\",\n            \"skyblue\": \"#87ceeb\",\n            \"slateblue\": \"#6a5acd\",\n            \"slategray\": \"#708090\",\n            \"snow\": \"#fffafa\",\n            \"springgreen\": \"#00ff7f\",\n            \"steelblue\": \"#4682b4\",\n            \"tan\": \"#d2b48c\",\n            \"teal\": \"#008080\",\n            \"thistle\": \"#d8bfd8\",\n            \"tomato\": \"#ff6347\",\n            \"turquoise\": \"#40e0d0\",\n            \"violet\": \"#ee82ee\",\n            \"wheat\": \"#f5deb3\",\n            \"white\": \"#ffffff\",\n            \"whitesmoke\": \"#f5f5f5\",\n            \"yellow\": \"#ffff00\",\n            \"yellowgreen\": \"#9acd32\"\n        }[name.toLowerCase()]\n    }\n    \n    \n    \n    static hexToDescriptor(c: string): UIColorDescriptor {\n        if (c[0] === \"#\") {\n            c = c.substr(1)\n        }\n        const r = parseInt(c.slice(0, 2), 16)\n        const g = parseInt(c.slice(2, 4), 16)\n        const b = parseInt(c.slice(4, 6), 16)\n        const a = parseInt(c.slice(6, 8), 16)\n    \n        const result = { \"red\": r, \"green\": g, \"blue\": b, \"alpha\": a }\n    \n        return result\n        \n        //return 'rgb(' + r + ',' + g + ',' + b + ')';\n        \n    }\n    \n    static rgbToDescriptor(colorString: string) {\n        \n        \n        if (colorString.startsWith(\"rgba(\")) {\n            \n            colorString = colorString.slice(5, colorString.length - 1)\n            \n        }\n        \n        if (colorString.startsWith(\"rgb(\")) {\n            \n            colorString = colorString.slice(4, colorString.length - 1) + \", 0\"\n            \n        }\n    \n    \n        const components = colorString.split(\",\")\n    \n    \n    \n        const result = {\n            \"red\": Number(components[0]),\n            \"green\": Number(components[1]),\n            \"blue\": Number(components[2]),\n            \"alpha\": Number(components[3])\n        }\n    \n    \n        return result\n        \n        \n    }\n    \n    \n    \n    get colorDescriptor(): UIColorDescriptor {\n    \n        var descriptor\n    \n        const colorHEXFromName = UIColor.nameToHex(this.stringValue)\n    \n        if (this.stringValue.startsWith(\"rgb\")) {\n            \n            descriptor = UIColor.rgbToDescriptor(this.stringValue)\n            \n        }\n        else if (colorHEXFromName) {\n            \n            descriptor = UIColor.hexToDescriptor(colorHEXFromName)\n            \n        }\n        else {\n            \n            descriptor = UIColor.hexToDescriptor(this.stringValue)\n            \n        }\n        \n        return descriptor\n        \n    }\n    \n    \n    \n    colorWithRed(red: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + red + \",\" + descriptor.green + \",\" + descriptor.blue + \",\" +\n            descriptor.alpha + \")\")\n    \n        return result\n        \n    }\n    \n    colorWithGreen(green: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + descriptor.red + \",\" + green + \",\" + descriptor.blue + \",\" +\n            descriptor.alpha + \")\")\n    \n        return result\n        \n    }\n    \n    colorWithBlue(blue: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + descriptor.red + \",\" + descriptor.green + \",\" + blue + \",\" +\n            descriptor.alpha + \")\")\n    \n        return result\n        \n    }\n    \n    \n    colorWithAlpha(alpha: number) {\n    \n    \n        const descriptor = this.colorDescriptor\n    \n        const result = new UIColor(\"rgba(\" + descriptor.red + \",\" + descriptor.green + \",\" + descriptor.blue + \",\" +\n            alpha + \")\")\n    \n        return result\n        \n    }\n    \n    \n    \n    static colorWithRGBA(red: number, green: number, blue: number, alpha: number = 1) {\n    \n    \n        const result = new UIColor(\"rgba(\" + red + \",\" + green + \",\" + blue + \",\" + alpha + \")\")\n    \n        return result\n        \n        \n    }\n    \n    static colorWithDescriptor(descriptor: UIColorDescriptor) {\n    \n    \n        const result = new UIColor(\"rgba(\" + descriptor.red.toFixed(0) + \",\" + descriptor.green.toFixed(0) + \",\" +\n            descriptor.blue.toFixed(0) + \",\" + this.defaultAlphaToOne(descriptor.alpha) + \")\")\n    \n        return result\n        \n    }\n    \n    \n    private static defaultAlphaToOne(value = 1) {\n        if (value != value) {\n            value = 1\n        }\n        return value\n    }\n    \n    \n    \n    colorByMultiplyingRGB(multiplier: number) {\n    \n        const descriptor = this.colorDescriptor\n    \n        descriptor.red = descriptor.red * multiplier\n        descriptor.green = descriptor.green * multiplier\n        descriptor.blue = descriptor.blue * multiplier\n    \n        const result = UIColor.colorWithDescriptor(descriptor)\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
