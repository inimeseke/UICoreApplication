{
  "version": 3,
  "sources": ["../scripts/UITableView.ts"],
  "sourcesContent": ["import { UIButton } from \"./UIButton\"\nimport { UINativeScrollView } from \"./UINativeScrollView\"\nimport { IS, nil, NO, YES } from \"./UIObject\"\nimport { UIPoint } from \"./UIPoint\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\nexport interface UITableViewReusableViewsContainerObject {\n    \n    [key: string]: UIView[];\n    \n}\n\n\nexport interface UITableViewReusableViewPositionObject {\n    \n    bottomY: number;\n    topY: number;\n    \n    isValid: boolean;\n    \n}\n\n\n\n\n\nexport class UITableView extends UINativeScrollView {\n    \n    \n    \n    \n    allRowsHaveEqualHeight: boolean = NO\n    _visibleRows: UIView[] = []\n    _firstLayoutVisibleRows: UIView[] = []\n    \n    _rowPositions: UITableViewReusableViewPositionObject[] = []\n    \n    _highestValidRowPositionIndex: number = 0\n    \n    _reusableViews: UITableViewReusableViewsContainerObject = {}\n    \n    _removedReusableViews: UITableViewReusableViewsContainerObject = {}\n    \n    _fullHeightView: UIView\n    \n    _rowIDIndex: number = 0\n    \n    reloadsOnLanguageChange = YES\n    \n    sidePadding = 0\n    \n    _persistedData: any[] = []\n    _needsDrawingOfVisibleRowsBeforeLayout = NO\n    _isDrawVisibleRowsScheduled = NO\n    _shouldAnimateNextLayout: boolean\n    \n    animationDuration = 0.25\n    \n    \n    constructor(elementID) {\n        \n        super(elementID)\n        \n        this.scrollsX = NO\n        \n    }\n    \n    \n    \n    initView(elementID, viewHTMLElement) {\n        \n        super.initView(elementID, viewHTMLElement)\n        \n        this._fullHeightView = new UIView()\n        this._fullHeightView.hidden = YES\n        this._fullHeightView.userInteractionEnabled = NO\n        this.addSubview(this._fullHeightView)\n        \n    }\n    \n    \n    \n    loadData() {\n        \n        this._persistedData = []\n        \n        this._calculatePositionsUntilIndex(this.numberOfRows() - 1)\n        this._needsDrawingOfVisibleRowsBeforeLayout = YES\n        \n        this.setNeedsLayout()\n        \n        // this.forEachViewInSubtree(function(view) {\n        \n        //     view.setNeedsLayout();\n        \n        // })\n        \n    }\n    \n    reloadData() {\n        \n        this._removeVisibleRows()\n        this._removeAllReusableRows()\n        \n        this._rowPositions = []\n        this._highestValidRowPositionIndex = 0\n        \n        this.loadData()\n        \n    }\n    \n    \n    \n    highlightChanges(previousData: any[], newData: any[]) {\n        \n        previousData = previousData.map(function (dataPoint, index, array) {\n            \n            return JSON.stringify(dataPoint)\n            \n        })\n        \n        newData = newData.map(function (dataPoint, index, array) {\n            \n            return JSON.stringify(dataPoint)\n            \n        })\n        \n        \n        const newIndexes: number[] = []\n        \n        newData.forEach(function (value, index, array) {\n            \n            if (!previousData.contains(value)) {\n                \n                newIndexes.push(index)\n                \n            }\n            \n        })\n        \n        newIndexes.forEach(function (this: UITableView, index) {\n            \n            if (this.isRowWithIndexVisible(index)) {\n                \n                this.highlightRowAsNew(this.viewForRowWithIndex(index))\n                \n            }\n            \n        }.bind(this))\n        \n    }\n    \n    \n    \n    highlightRowAsNew(row: UIView) {\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    invalidateSizeOfRowWithIndex(index: number, animateChange = NO) {\n        \n        if (this._rowPositions[index]) {\n            this._rowPositions[index].isValid = NO\n        }\n        \n        this._highestValidRowPositionIndex = Math.min(this._highestValidRowPositionIndex, index - 1)\n        \n        // if (index == 0) {\n        \n        //     this._highestValidRowPositionIndex = 0;\n        \n        //     this._rowPositions = [];\n        \n        // }\n        \n        this._needsDrawingOfVisibleRowsBeforeLayout = YES\n        \n        this._shouldAnimateNextLayout = animateChange\n        \n    }\n    \n    \n    \n    _calculateAllPositions() {\n        this._calculatePositionsUntilIndex(this.numberOfRows() - 1)\n    }\n    \n    _calculatePositionsUntilIndex(maxIndex: number) {\n        \n        var validPositionObject = this._rowPositions[this._highestValidRowPositionIndex]\n        if (!IS(validPositionObject)) {\n            validPositionObject = {\n                bottomY: 0,\n                topY: 0,\n                isValid: YES\n            }\n        }\n        \n        var previousBottomY = validPositionObject.bottomY\n        \n        if (!this._rowPositions.length) {\n            \n            this._highestValidRowPositionIndex = -1\n            \n        }\n        \n        for (var i = this._highestValidRowPositionIndex + 1; i <= maxIndex; i++) {\n            \n            var height: number\n            \n            const rowPositionObject = this._rowPositions[i]\n            \n            if (IS((rowPositionObject || nil).isValid)) {\n                \n                height = rowPositionObject.bottomY - rowPositionObject.topY\n                \n            }\n            else {\n                \n                height = this.heightForRowWithIndex(i)\n                \n            }\n            \n            \n            \n            \n            const positionObject: UITableViewReusableViewPositionObject = {\n                bottomY: previousBottomY + height,\n                topY: previousBottomY,\n                isValid: YES\n            }\n            \n            if (i < this._rowPositions.length) {\n                this._rowPositions[i] = positionObject\n            }\n            else {\n                this._rowPositions.push(positionObject)\n            }\n            this._highestValidRowPositionIndex = i\n            previousBottomY = previousBottomY + height\n            \n        }\n        \n    }\n    \n    \n    \n    indexesForVisibleRows(paddingRatio = 0.5): number[] {\n        \n        const firstVisibleY = this.contentOffset.y - this.bounds.height * paddingRatio\n        const lastVisibleY = firstVisibleY + this.bounds.height * (1 + paddingRatio)\n        \n        const numberOfRows = this.numberOfRows()\n        \n        if (this.allRowsHaveEqualHeight) {\n            \n            const rowHeight = this.heightForRowWithIndex(0)\n            \n            var firstIndex = firstVisibleY / rowHeight\n            var lastIndex = lastVisibleY / rowHeight\n            \n            firstIndex = Math.trunc(firstIndex)\n            lastIndex = Math.trunc(lastIndex) + 1\n            \n            firstIndex = Math.max(firstIndex, 0)\n            lastIndex = Math.min(lastIndex, numberOfRows - 1)\n            \n            var result = []\n            for (var i = firstIndex; i < lastIndex + 1; i++) {\n                result.push(i)\n            }\n            return result\n        }\n        \n        var accumulatedHeight = 0\n        var result = []\n        \n        this._calculateAllPositions()\n        \n        const rowPositions = this._rowPositions\n        \n        for (var i = 0; i < numberOfRows; i++) {\n            \n            const height = rowPositions[i].bottomY - rowPositions[i].topY  // this.heightForRowWithIndex(i)\n            \n            accumulatedHeight = accumulatedHeight + height\n            if (accumulatedHeight >= firstVisibleY) {\n                result.push(i)\n            }\n            if (accumulatedHeight >= lastVisibleY) {\n                break\n            }\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    _removeVisibleRows() {\n        \n        const visibleRows = []\n        this._visibleRows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n            \n            this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(\n                row._UITableViewRowIndex,\n                row\n            )\n            row.removeFromSuperview()\n            this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row)\n            \n            \n        }, this)\n        this._visibleRows = visibleRows\n        \n    }\n    \n    \n    \n    _removeAllReusableRows() {\n        // @ts-ignore\n        this._reusableViews.forEach(function (this: UITableView, rows: UIView[]) {\n            rows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n                \n                this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(\n                    row._UITableViewRowIndex,\n                    row\n                )\n                row.removeFromSuperview()\n                \n                this._markReusableViewAsUnused(row)\n                \n            }.bind(this))\n        }.bind(this))\n    }\n    \n    \n    \n    _markReusableViewAsUnused(row: UIView) {\n        if (!this._removedReusableViews[row._UITableViewReusabilityIdentifier].contains(row)) {\n            this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row)\n        }\n    }\n    \n    _drawVisibleRows() {\n        \n        if (!this.isMemberOfViewTree) {\n            return\n        }\n        \n        const visibleIndexes = this.indexesForVisibleRows()\n        \n        const minIndex = visibleIndexes[0]\n        const maxIndex = visibleIndexes[visibleIndexes.length - 1]\n        \n        const removedViews = []\n        \n        const visibleRows = []\n        this._visibleRows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n            if (row._UITableViewRowIndex < minIndex || row._UITableViewRowIndex > maxIndex) {\n                \n                //row.removeFromSuperview();\n                \n                this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(\n                    row._UITableViewRowIndex,\n                    row\n                )\n                \n                this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row)\n                \n                removedViews.push(row)\n                \n            }\n            else {\n                visibleRows.push(row)\n            }\n        }, this)\n        this._visibleRows = visibleRows\n        \n        visibleIndexes.forEach(function (this: UITableView, rowIndex: number, index: number, array: number) {\n            \n            \n            if (this.isRowWithIndexVisible(rowIndex)) {\n                return\n            }\n            const view: UIView = this.viewForRowWithIndex(rowIndex)\n            //view._UITableViewRowIndex = rowIndex;\n            this._firstLayoutVisibleRows.push(view)\n            this._visibleRows.push(view)\n            this.addSubview(view)\n            \n        } as any, this)\n        \n        for (var i = 0; i < removedViews.length; i++) {\n            \n            var view: UIView = removedViews[i]\n            if (this._visibleRows.indexOf(view) == -1) {\n                \n                //this._persistedData[view._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(view._UITableViewRowIndex, view);\n                view.removeFromSuperview()\n                \n                //this._removedReusableViews[view._UITableViewReusabilityIdentifier].push(view);\n                \n            }\n            \n        }\n        \n        //this.setNeedsLayout();\n        \n    }\n    \n    \n    visibleRowWithIndex(rowIndex: number): UIView {\n        for (var i = 0; i < this._visibleRows.length; i++) {\n            const row = this._visibleRows[i]\n            if (row._UITableViewRowIndex == rowIndex) {\n                return row\n            }\n        }\n        return nil\n    }\n    \n    \n    isRowWithIndexVisible(rowIndex: number) {\n        return IS(this.visibleRowWithIndex(rowIndex))\n    }\n    \n    \n    \n    reusableViewForIdentifier(identifier: string, rowIndex: number) {\n        \n        if (!this._removedReusableViews[identifier]) {\n            this._removedReusableViews[identifier] = []\n        }\n        \n        if (this._removedReusableViews[identifier] && this._removedReusableViews[identifier].length) {\n            \n            const view = this._removedReusableViews[identifier].pop()\n            \n            view._UITableViewRowIndex = rowIndex\n            \n            Object.assign(view, this._persistedData[rowIndex] || this.defaultRowPersistenceDataItem())\n            \n            return view\n            \n        }\n        \n        if (!this._reusableViews[identifier]) {\n            this._reusableViews[identifier] = []\n        }\n        \n        const newView = this.newReusableViewForIdentifier(identifier, this._rowIDIndex)\n        this._rowIDIndex = this._rowIDIndex + 1\n        \n        if (this._rowIDIndex > 40) {\n            \n            const asd = 1\n            \n        }\n        \n        newView._UITableViewReusabilityIdentifier = identifier\n        \n        newView._UITableViewRowIndex = rowIndex\n        \n        Object.assign(newView, this._persistedData[rowIndex] || this.defaultRowPersistenceDataItem())\n        this._reusableViews[identifier].push(newView)\n        \n        return newView\n        \n    }\n    \n    \n    // Functions that should be overridden to draw the correct content START\n    newReusableViewForIdentifier(identifier: string, rowIDIndex: number): UIView {\n        \n        const view = new UIButton(this.elementID + \"Row\" + rowIDIndex)\n        \n        view.stopsPointerEventPropagation = NO\n        view.pausesPointerEvents = NO\n        \n        return view\n        \n    }\n    \n    heightForRowWithIndex(index: number): number {\n        return 50\n    }\n    \n    numberOfRows() {\n        return 10000\n    }\n    \n    defaultRowPersistenceDataItem() {\n        \n        \n        \n    }\n    \n    persistenceDataItemForRowWithIndex(rowIndex: number, row: UIView) {\n        \n        \n        \n    }\n    \n    viewForRowWithIndex(rowIndex: number): UIView {\n        \n        const row = this.reusableViewForIdentifier(\"Row\", rowIndex);\n        (row as UIButton).titleLabel.text = \"Row \" + rowIndex\n        \n        return row\n        \n    }\n    \n    // Functions that should be overridden to draw the correct content END\n    \n    \n    // Functions that trigger redrawing of the content\n    didScrollToPosition(offsetPosition: UIPoint) {\n        \n        super.didScrollToPosition(offsetPosition)\n        \n        this.forEachViewInSubtree(function (view: UIView) {\n            \n            view._isPointerValid = NO\n            \n        })\n        \n        if (!this._isDrawVisibleRowsScheduled) {\n            \n            this._isDrawVisibleRowsScheduled = YES\n            \n            UIView.runFunctionBeforeNextFrame(function (this: UITableView) {\n                \n                this._calculateAllPositions()\n                \n                this._drawVisibleRows()\n                \n                this.setNeedsLayout()\n                \n                this._isDrawVisibleRowsScheduled = NO\n                \n            }.bind(this))\n            \n        }\n        \n    }\n    \n    wasAddedToViewTree() {\n        this.loadData()\n    }\n    \n    setFrame(rectangle: UIRectangle, zIndex?: number, performUncheckedLayout?: boolean) {\n        \n        const frame = this.frame\n        super.setFrame(rectangle, zIndex, performUncheckedLayout)\n        if (frame.isEqualTo(rectangle) && !performUncheckedLayout) {\n            return\n        }\n        \n        this._needsDrawingOfVisibleRowsBeforeLayout = YES\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged && this.reloadsOnLanguageChange) {\n            \n            this.reloadData()\n            \n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    private _layoutAllRows(positions = this._rowPositions) {\n        \n        const bounds = this.bounds\n        \n        this._visibleRows.forEach(function (this: UITableView, row: UIView, index: number, array: UIView[]) {\n            \n            const frame = bounds.copy()\n            \n            const positionObject = positions[row._UITableViewRowIndex]\n            frame.min.y = positionObject.topY\n            frame.max.y = positionObject.bottomY\n            row.frame = frame\n            \n            row.style.width = \"\" + (bounds.width - this.sidePadding * 2).integerValue + \"px\"\n            row.style.left = \"\" + this.sidePadding.integerValue + \"px\"\n            \n            \n        }, this)\n        \n        this._fullHeightView.frame = bounds.rectangleWithHeight((positions.lastElement ||\n            nil).bottomY).rectangleWithWidth(bounds.width * 0.5)\n        \n        this._firstLayoutVisibleRows = []\n        \n        \n    }\n    \n    private _animateLayoutAllRows() {\n        \n        UIView.animateViewOrViewsWithDurationDelayAndFunction(\n            this._visibleRows,\n            this.animationDuration,\n            0,\n            undefined,\n            function (this: UITableView) {\n                \n                this._layoutAllRows()\n                \n            }.bind(this),\n            function (this: UITableView) {\n                \n                // this._calculateAllPositions()\n                // this._layoutAllRows()\n                \n            }.bind(this)\n        )\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        const previousPositions: UITableViewReusableViewPositionObject[] = JSON.parse(JSON.stringify(this._rowPositions))\n        \n        const previousVisibleRowsLength = this._visibleRows.length\n        \n        if (this._needsDrawingOfVisibleRowsBeforeLayout) {\n            \n            //this._calculateAllPositions()\n            \n            this._drawVisibleRows()\n            \n            this._needsDrawingOfVisibleRowsBeforeLayout = NO\n            \n        }\n        \n        \n        \n        super.layoutSubviews()\n        \n        \n        if (!this.numberOfRows() || !this.isMemberOfViewTree) {\n            \n            return\n            \n        }\n        \n        \n        \n        \n        \n        if (this._shouldAnimateNextLayout) {\n            \n            \n            \n            // Need to do layout with the previous positions\n            \n            this._layoutAllRows(previousPositions)\n            \n            \n            if (previousVisibleRowsLength < this._visibleRows.length) {\n                \n                \n                UIView.runFunctionBeforeNextFrame(function (this: UITableView) {\n                    \n                    this._animateLayoutAllRows()\n                    \n                }.bind(this))\n                \n            }\n            else {\n                \n                this._animateLayoutAllRows()\n                \n            }\n            \n            \n            this._shouldAnimateNextLayout = NO\n            \n        }\n        else {\n            \n            // if (this._needsDrawingOfVisibleRowsBeforeLayout) {\n            \n            //     this._drawVisibleRows();\n            \n            //     this._needsDrawingOfVisibleRowsBeforeLayout = NO;\n            \n            // }\n            \n            this._calculateAllPositions()\n            \n            this._layoutAllRows()\n            \n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    intrinsicContentHeight(constrainingWidth = 0) {\n        \n        \n        \n        var result = 0\n        \n        this._calculateAllPositions()\n        \n        if (this._rowPositions.length) {\n            \n            result = this._rowPositions[this._rowPositions.length - 1].bottomY\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["view"]
}
