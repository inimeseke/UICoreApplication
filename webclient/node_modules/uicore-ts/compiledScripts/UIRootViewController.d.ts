import { UIDialogView } from "./UIDialogView";
import { UIRoute } from "./UIRoute";
import { UIView } from "./UIView";
import { UIViewController } from "./UIViewController";
interface UIRootViewControllerLazyViewControllerObject<T extends typeof UIViewController> {
    instance: InstanceType<T>;
    class: T;
    shouldShow: () => (Promise<boolean> | boolean);
    isInitialized: boolean;
}
interface UIRootViewControllerLazyViewControllersObject {
    [x: string]: UIRootViewControllerLazyViewControllerObject<typeof UIViewController>;
}
interface UIRootViewControllerLazyContentViewControllersObject extends UIRootViewControllerLazyViewControllersObject {
    mainViewController: UIRootViewControllerLazyViewControllerObject<typeof UIViewController>;
}
export declare class UIRootViewController extends UIViewController {
    topBarView: UIView;
    backgroundView: UIView;
    bottomBarView: UIView;
    _contentViewController: UIViewController;
    contentViewControllers: UIRootViewControllerLazyContentViewControllersObject;
    _detailsDialogView: UIDialogView;
    _detailsViewController: UIViewController;
    detailsViewControllers: UIRootViewControllerLazyViewControllersObject;
    constructor(view: UIView);
    lazyViewControllerObjectWithClass<T extends typeof UIViewController>(classObject: T, shouldShow?: () => (Promise<boolean> | boolean)): UIRootViewControllerLazyViewControllerObject<T>;
    handleRoute(route: UIRoute): Promise<void>;
    setContentViewControllerForRoute(route: UIRoute): Promise<void>;
    setDetailsViewControllerForRoute(route: UIRoute): Promise<void>;
    get contentViewController(): UIViewController;
    set contentViewController(controller: UIViewController);
    get detailsViewController(): UIViewController;
    set detailsViewController(controller: UIViewController);
    updatePageScale(): void;
    performDefaultLayout(paddingLength?: number, contentViewMaxWidth?: number, topBarHeight?: number, bottomBarMinHeight?: number): void;
}
export {};
