{
  "version": 3,
  "sources": ["../scripts/UILink.ts"],
  "sourcesContent": ["import { UIBaseButton } from \"./UIBaseButton\"\nimport { UIButtonColorSpecifier } from \"./UIButton\"\nimport { UICore } from \"./UICore\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { nil, NO } from \"./UIObject\"\nimport { UIRoute } from \"./UIRoute\"\nimport { UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UILink extends UIBaseButton {\n    \n    private _colors: UIButtonColorSpecifier\n    \n    \n    constructor(elementID: string, initViewData = nil) {\n        \n        super(elementID, \"a\", initViewData)\n        \n        this.stopsPointerEventPropagation = NO\n        this.pausesPointerEvents = NO\n        \n    }\n    \n    \n    initView(elementID, viewHTMLElement, initViewData: { titleType: string }) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        this.class.superclass = UIBaseButton\n        \n        // Instance variables\n        \n        \n        //this.style.position = \"relative\"\n        \n        \n        viewHTMLElement.onclick = this.blur.bind(this)\n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get colors(): UIButtonColorSpecifier {\n        return this._colors\n    }\n    \n    set colors(value: UIButtonColorSpecifier) {\n        this._colors = value\n    }\n    \n    \n    \n    \n    \n    get viewHTMLElement() {\n        \n        // @ts-ignore\n        return super.viewHTMLElement as HTMLLinkElement\n        \n    }\n    \n    set text(text: string) {\n        \n        this.viewHTMLElement.textContent = text\n        \n    }\n    \n    get text() {\n        \n        return this.viewHTMLElement.textContent\n        \n    }\n    \n    \n    set target(target: string) {\n        \n        this.viewHTMLElement.setAttribute(\"href\", target)\n        \n    }\n    \n    get target() {\n    \n        const result = this.viewHTMLElement.getAttribute(\"href\")\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    set targetRouteForCurrentState(targetRouteForCurrentState: () => (UIRoute | string)) {\n        \n        this._targetRouteForCurrentState = targetRouteForCurrentState\n        \n        this.updateTarget()\n        \n    }\n    \n    get targetRouteForCurrentState() {\n        \n        return this._targetRouteForCurrentState\n        \n    }\n    \n    \n    _targetRouteForCurrentState() {\n    \n        const result = UIRoute.currentRoute.routeByRemovingComponentsOtherThanOnesNamed([\"settings\"]) as (UIRoute | string)\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UICoreValues.broadcastEventName.RouteDidChange) {\n            \n            this.updateTarget()\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    wasAddedToViewTree() {\n        \n        super.wasAddedToViewTree()\n        \n        this.updateTarget()\n        \n        \n    }\n    \n    \n    \n    \n    \n    updateTarget() {\n        \n        const route = this.targetRouteForCurrentState()\n        \n        if (route instanceof UIRoute) {\n            \n            this.target = route.linkRepresentation\n            \n            return\n            \n        }\n        \n        this.target = route\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6B;AAG7B,0BAA6B;AAC7B,sBAAwB;AACxB,qBAAwB;AAOjB,MAAM,eAAe,iCAAa;AAAA,EAKrC,YAAY,WAAmB,eAAe,qBAAK;AAE/C,UAAM,WAAW,KAAK,YAAY;AAElC,SAAK,+BAA+B;AACpC,SAAK,sBAAsB;AAAA,EAE/B;AAAA,EAGA,SAAS,WAAW,iBAAiB,cAAqC;AAEtE,UAAM,SAAS,WAAW,iBAAiB,YAAY;AAEvD,SAAK,MAAM,aAAa;AAQxB,oBAAgB,UAAU,KAAK,KAAK,KAAK,IAAI;AAAA,EAKjD;AAAA,EAMA,IAAI,SAAiC;AACjC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,OAAO,OAA+B;AACtC,SAAK,UAAU;AAAA,EACnB;AAAA,EAMA,IAAI,kBAAkB;AAGlB,WAAO,MAAM;AAAA,EAEjB;AAAA,EAEA,IAAI,KAAK,MAAc;AAEnB,SAAK,gBAAgB,cAAc;AAAA,EAEvC;AAAA,EAEA,IAAI,OAAO;AAEP,WAAO,KAAK,gBAAgB;AAAA,EAEhC;AAAA,EAGA,IAAI,OAAO,QAAgB;AAEvB,SAAK,gBAAgB,aAAa,QAAQ,MAAM;AAAA,EAEpD;AAAA,EAEA,IAAI,SAAS;AAET,UAAM,SAAS,KAAK,gBAAgB,aAAa,MAAM;AAEvD,WAAO;AAAA,EAEX;AAAA,EAMA,IAAI,2BAA2B,4BAAsD;AAEjF,SAAK,8BAA8B;AAEnC,SAAK,aAAa;AAAA,EAEtB;AAAA,EAEA,IAAI,6BAA6B;AAE7B,WAAO,KAAK;AAAA,EAEhB;AAAA,EAGA,8BAA8B;AAE1B,UAAM,SAAS,uBAAQ,aAAa,4CAA4C,CAAC,UAAU,CAAC;AAE5F,WAAO;AAAA,EAEX;AAAA,EAMA,yBAAyB,OAA6B;AAElD,UAAM,yBAAyB,KAAK;AAEpC,QAAI,MAAM,QAAQ,iCAAa,mBAAmB,gBAAgB;AAE9D,WAAK,aAAa;AAAA,IAEtB;AAAA,EAEJ;AAAA,EAMA,qBAAqB;AAEjB,UAAM,mBAAmB;AAEzB,SAAK,aAAa;AAAA,EAGtB;AAAA,EAMA,eAAe;AAEX,UAAM,QAAQ,KAAK,2BAA2B;AAE9C,QAAI,iBAAiB,wBAAS;AAE1B,WAAK,SAAS,MAAM;AAEpB;AAAA,IAEJ;AAEA,SAAK,SAAS;AAAA,EAElB;AAAA,EAMA,iBAAiB;AAEb,UAAM,eAAe;AAErB,UAAM,SAAS,KAAK;AAAA,EAExB;AAMJ;",
  "names": []
}
