{
  "version": 3,
  "sources": ["../scripts/UIImageView.ts"],
  "sourcesContent": ["import { UICoreValues } from \"./UICoreValues\"\nimport { IS_NOT, nil, NO, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UIImageView extends UIView {\n    \n    \n    //actionIndicator: UIActionIndicator;\n    _sourceKey: string\n    _defaultSource: string\n    \n    _fillMode: any\n    \n    _hiddenWhenEmpty = NO\n    \n    \n    constructor(elementID?, viewHTMLElement = null) {\n        \n        super(elementID, viewHTMLElement, \"img\")\n        \n        \n        //this.actionIndicator = new UIActionIndicator(elementID + \"ActionIndicator\");\n        \n        \n    }\n    \n    \n    \n    \n    static fillMode = {\n        \n        \"stretchToFill\": \"fill\",\n        \"aspectFit\": \"contain\",\n        \"aspectFill\": \"cover\",\n        \"center\": \"none\",\n        \"aspectFitIfLarger\": \"scale-down\"\n        \n    }\n    \n    \n    \n    \n    \n    get viewHTMLElement() {\n        \n        return super.viewHTMLElement as HTMLImageElement\n        \n    }\n    \n    \n    \n    \n    \n    static objectURLFromDataURL(dataURL: string) {\n        \n        // if (IS_NOT(dataURL)) {\n        \n        //     return nil;\n        \n        // }\n    \n        // @ts-ignore\n        const blob = dataURLtoBlob(dataURL)\n    \n        const objectURL = URL.createObjectURL(blob)\n    \n        return objectURL\n        \n    }\n    \n    \n    \n    \n    static dataURL(url, callback) {\n        const xhr = new XMLHttpRequest()\n        xhr.open(\"get\", url)\n        xhr.responseType = \"blob\"\n        xhr.onload = function () {\n            const fr = new FileReader()\n    \n            fr.onload = function () {\n                callback(this.result)\n            }\n            \n            fr.readAsDataURL(xhr.response) // async call\n        }\n        \n        xhr.send()\n    }\n    \n    \n    \n    static dataURLWithMaxSize(URLString: string, maxSize: number, completion: (resultURLString: string) => void) {\n    \n        const imageView = new UIImageView()\n        imageView.imageSource = URLString\n        \n        imageView.viewHTMLElement.onload = function () {\n    \n            const originalSize = imageView.intrinsicContentSize()\n    \n    \n            var multiplier = maxSize / Math.max(originalSize.height, originalSize.width)\n    \n            multiplier = Math.min(1, multiplier)\n    \n    \n            const result = imageView.getDataURL((originalSize.height * multiplier).integerValue, (originalSize.width *\n                multiplier).integerValue)\n    \n            completion(result)\n            \n        }\n        \n    }\n    \n    \n    static dataURLWithSizes(\n        URLString: string,\n        height: number,\n        width: number,\n        completion: (resultURLString: string) => void\n    ) {\n    \n        const imageView = new UIImageView()\n        imageView.imageSource = URLString\n        \n        imageView.viewHTMLElement.onload = function () {\n    \n            const result = imageView.getDataURL(height, width)\n            completion(result)\n            \n        }\n        \n    }\n    \n    \n    getDataURL(height?: number, width?: number) {\n    \n        const img = this.viewHTMLElement\n    \n        // Create an empty canvas element\n        const canvas = document.createElement(\"canvas\")\n        canvas.width = width\n        canvas.height = height\n        \n        // Copy the image contents to the canvas\n        const ctx = canvas.getContext(\"2d\")\n        ctx.drawImage(img, 0, 0, width, height)\n        \n        // Get the data-URL formatted image\n        // Firefox supports PNG and JPEG. You could check img.src to\n        // guess the original format, but be aware the using \"image/jpg\"\n        // will re-encode the image.\n        const dataURL = canvas.toDataURL(\"image/png\")\n    \n        return dataURL\n        \n        //return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n        \n    }\n    \n    \n    \n    \n    get imageSource() {\n        \n        return this.viewHTMLElement.src\n        \n    }\n    \n    set imageSource(sourceString: string) {\n        \n        if (IS_NOT(sourceString)) {\n            sourceString = \"\"\n        }\n        \n        this.viewHTMLElement.src = sourceString\n        \n        if (this.hiddenWhenEmpty) {\n            this.hidden = IS_NOT(this.imageSource)\n        }\n        \n        if (!sourceString || !sourceString.length) {\n            \n            //this.actionIndicator.stop();\n            this.hidden = YES\n            \n            return\n            \n        }\n        else {\n            \n            this.hidden = NO\n            \n        }\n        \n        // this.superview.addSubview(this.actionIndicator);\n        // this.actionIndicator.frame = this.frame;\n        // this.actionIndicator.start();\n        // this.actionIndicator.backgroundColor = UIColor.redColor\n        \n        // @ts-ignore\n        this.viewHTMLElement.onload = function (this: UIImageView, event: Event) {\n            \n            this.superview.setNeedsLayout()\n            \n            //this.actionIndicator.removeFromSuperview();\n            \n        }.bind(this)\n        \n    }\n    \n    \n    \n    setImageSource(key: string, defaultString: string) {\n    \n        const languageName = UICoreValues.languageService.currentLanguageKey\n        this.imageSource = UICoreValues.languageService.stringForKey(key, languageName, defaultString, nil)\n        \n    }\n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==\n            UIView.broadcastEventName.AddedToViewTree) {\n            \n            this._setImageSourceFromKeyIfPossible()\n            \n        }\n        \n    }\n    \n    \n    willMoveToSuperview(superview: UIView) {\n        \n        super.willMoveToSuperview(superview)\n        \n        this._setImageSourceFromKeyIfPossible()\n        \n    }\n    \n    _setImageSourceFromKeyIfPossible() {\n        \n        if (this._sourceKey && this._defaultSource) {\n            \n            this.setImageSource(this._sourceKey, this._defaultSource)\n            \n        }\n        \n    }\n    \n    \n    \n    get fillMode() {\n        \n        \n        return this._fillMode\n        \n    }\n    \n    set fillMode(fillMode) {\n        \n        this._fillMode = fillMode;\n        \n        (this.style as any).objectFit = fillMode\n        \n    }\n    \n    \n    get hiddenWhenEmpty() {\n        return this._hiddenWhenEmpty\n    }\n    \n    set hiddenWhenEmpty(hiddenWhenEmpty: boolean) {\n        this._hiddenWhenEmpty = hiddenWhenEmpty\n        if (hiddenWhenEmpty) {\n            this.hidden = IS_NOT(this.imageSource)\n        }\n    }\n    \n    \n    \n    \n    \n    didMoveToSuperview(superview: UIView) {\n        \n        super.didMoveToSuperview(superview)\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        \n        \n    }\n    \n    \n    \n    \n    intrinsicContentSize() {\n    \n    \n        const result = new UIRectangle(0, 0, this.viewHTMLElement.naturalHeight, this.viewHTMLElement.naturalWidth)\n    \n        return result\n        \n        \n    }\n    \n    intrinsicContentSizeWithConstraints(constrainingHeight = 0, constrainingWidth = 0) {\n    \n        const heightRatio = constrainingHeight / this.viewHTMLElement.naturalHeight\n    \n        const widthRatio = constrainingWidth / this.viewHTMLElement.naturalWidth\n    \n        const multiplier = Math.max(heightRatio, widthRatio)\n    \n        const result = new UIRectangle(0, 0, this.viewHTMLElement.naturalHeight *\n            multiplier, this.viewHTMLElement.naturalWidth * multiplier)\n    \n        return result\n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
