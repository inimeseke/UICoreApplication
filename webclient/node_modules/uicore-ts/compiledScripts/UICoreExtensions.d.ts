declare global {
    interface Array<T> {
        removeElementAtIndex(index: number): any;
        removeElement(element: T): any;
        insertElementAtIndex(index: number, element: T): any;
        replaceElementAtIndex(index: number, element: T): any;
        contains(element: T): boolean;
        findAsyncSequential(functionToCall: (value: any) => Promise<boolean>): Promise<any>;
        groupedBy(keyFunction: (item: T) => any): {
            [key: string]: Array<T>;
        } & Object;
        copy(): Array<T>;
        arrayByRepeating(numberOfRepetitions: number): Array<T>;
        arrayByTrimmingToLengthIfLonger(maxLength: number): Array<T>;
        anyMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean;
        noneMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean;
        allMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean;
        firstElement: T;
        lastElement: T;
        readonly summedValue: T;
        everyElement: UIEveryElementItem<T>;
        max(): number;
        min(): number;
        isEqualToArray(array: Array<T>, keyPath?: string): boolean;
    }
    interface String {
        contains(string: any): boolean;
        readonly numericalValue: number;
        isAString: boolean;
    }
    interface Number {
        isANumber: boolean;
        readonly integerValue: number;
    }
    interface Date {
        readonly dateString: string;
    }
    interface Object {
        forEach(callbackFunction: (value: any, key: string) => void): void;
        readonly allValues: Array<any>;
        readonly allKeys: string[];
    }
}
export {};
export declare type UIEveryElementItem<T> = {
    [P in keyof T]: UIEveryElementItem<T[P]>;
} & {
    UI_elementValues?: T[];
} & T;
export declare type Unpacked<T> = T extends (infer U)[] ? U : T extends (...args: any[]) => infer U ? U : T extends Promise<infer U> ? U : T;
export declare type UnpackedObject<T> = {
    [P in keyof T]: Unpacked<T[P]>;
};
export declare function promisedProperties<ObjectType extends object>(object: ObjectType): UnpackedObject<ObjectType>;
export declare class PrimitiveNumber {
    static [Symbol.hasInstance](x: any): void;
}
