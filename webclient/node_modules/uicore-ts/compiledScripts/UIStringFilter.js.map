{
  "version": 3,
  "sources": ["../scripts/UIStringFilter.ts"],
  "sourcesContent": ["import { IS, IS_NOT, MAKE_ID, NO, UIObject, YES } from \"./UIObject\"\n// @ts-ignore\nimport UIStringFilterWebWorker from \"./UIStringFilterWebWorker.worker.js\"\n\n\nexport class UIStringFilter extends UIObject {\n    \n    \n    \n    \n    \n    static _sharedWebWorkerHolder = { webWorker: new UIStringFilterWebWorker() }\n    \n    static _instanceNumber = -1\n    \n    \n    _instanceNumber: number\n    \n    _isThreadClosed = NO\n    \n    private readonly _webWorkerHolder = UIStringFilter._sharedWebWorkerHolder\n    \n    \n    \n    constructor(useSeparateWebWorkerHolder = NO) {\n        \n        super()\n        \n        if (useSeparateWebWorkerHolder) {\n            \n            this._webWorkerHolder = {\n                webWorker: new UIStringFilterWebWorker()\n            }\n            \n        }\n        \n        UIStringFilter._instanceNumber = UIStringFilter._instanceNumber + 1\n        this._instanceNumber = UIStringFilter._instanceNumber\n        \n        if (IS_NOT(this._webWorkerHolder.webWorker.onmessage)) {\n            \n            this._webWorkerHolder.webWorker.onmessage = message => {\n                \n                this.isWorkerBusy = NO\n                this.postNextMessageIfNeeded()\n                \n                const key = \"\" + message.data.identifier + message.data.instanceIdentifier\n                \n                const completionFunction = this.completionFunctions[key]\n                \n                if (IS(completionFunction)) {\n                    \n                    //console.log(\"Filtering took \" + (Date.now() - startTime) + \" ms\");\n                    \n                    completionFunction(message.data.filteredData, message.data.filteredIndexes, message.data.identifier)\n                    \n                }\n                \n                delete this.completionFunctions[key]\n                \n                var asd = 1\n                \n            }\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get instanceIdentifier() {\n        \n        return this._instanceNumber\n        \n    }\n    \n    \n    get completionFunctions() {\n        \n        const key = \"UICore_completionFunctions\"\n        var result: {\n            \n            [x: string]: (filteredData: string[], filteredIndexes: number[], identifier: any) => void;\n            \n        } = this._webWorkerHolder[key]\n        \n        if (IS_NOT(result)) {\n            \n            result = {}\n            this._webWorkerHolder[key] = result\n            \n        }\n        \n        return result\n        \n    }\n    \n    get messagesToPost() {\n        \n        const key = \"UICore_messagesToPost\"\n        var result: any[] = this._webWorkerHolder[key]\n        \n        if (IS_NOT(result)) {\n            \n            result = []\n            this._webWorkerHolder[key] = result\n            \n        }\n        \n        return result\n        \n    }\n    \n    \n    set isWorkerBusy(isWorkerBusy: boolean) {\n        \n        this._webWorkerHolder[\"UICore_isWorking\"] = isWorkerBusy\n        \n    }\n    \n    get isWorkerBusy() {\n        \n        return IS(this._webWorkerHolder[\"UICore_isWorking\"])\n        \n    }\n    \n    \n    \n    postNextMessageIfNeeded() {\n        \n        if (this.messagesToPost.length && IS_NOT(this.isWorkerBusy)) {\n            \n            this._webWorkerHolder.webWorker.postMessage(this.messagesToPost.firstElement)\n            this.messagesToPost.removeElementAtIndex(0)\n            \n            this.isWorkerBusy = YES\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    filterData(\n        filteringString: string,\n        data: string[],\n        excludedData: string[],\n        identifier: any,\n        completion: (filteredData: string[], filteredIndexes: number[], identifier: any) => void\n    ) {\n        \n        \n        if (this._isThreadClosed) {\n            \n            return\n            \n        }\n        \n        //var startTime = Date.now();\n        \n        const instanceIdentifier = this.instanceIdentifier\n        \n        const key = \"\" + identifier + instanceIdentifier\n        \n        this.completionFunctions[key] = completion\n        \n        this.messagesToPost.push({\n            \n            \"filteringString\": filteringString,\n            \"data\": data,\n            \"excludedData\": excludedData,\n            \"identifier\": identifier,\n            \"instanceIdentifier\": instanceIdentifier\n            \n        })\n        \n        this.postNextMessageIfNeeded()\n        \n        \n    }\n    \n    \n    filteredData(\n        filteringString: string,\n        data: string[],\n        excludedData: string[] = [],\n        identifier: any = MAKE_ID()\n    ) {\n        \n        \n        const result: Promise<{\n            \n            filteredData: string[],\n            filteredIndexes: number[],\n            identifier: any\n            \n        }> = new Promise((resolve, reject) => {\n            \n            this.filterData(filteringString, data, excludedData, identifier,\n                (filteredData, filteredIndexes, filteredIdentifier) => {\n                    \n                    if (filteredIdentifier == identifier) {\n                        \n                        resolve({\n                            \n                            filteredData: filteredData,\n                            filteredIndexes: filteredIndexes,\n                            identifier: filteredIdentifier\n                            \n                        })\n                        \n                    }\n                    \n                    \n                }\n            )\n            \n            \n        })\n        \n        return result\n        \n        \n    }\n    \n    \n    \n    \n    \n    closeThread() {\n        \n        this._isThreadClosed = YES\n        \n        if (this._webWorkerHolder != UIStringFilter._sharedWebWorkerHolder) {\n            \n            this._webWorkerHolder.webWorker.terminate()\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["UIStringFilterWebWorker"]
}
