{
  "version": 3,
  "sources": ["../scripts/UIObject.ts"],
  "sourcesContent": ["import { UICoreExtensionValueObject } from \"./UICoreExtensionValueObject\"\nimport { UITimer } from \"./UITimer\"\n\n\nexport function NilFunction() {\n    return nil\n}\n\n\n\nexport var nil: any = new Proxy(Object.assign(NilFunction, { \"class\": nil, \"className\": \"Nil\" }), {\n    \n    get(target, name) {\n        \n        if (name == Symbol.toPrimitive) {\n            \n            return function (hint) {\n                if (hint == \"number\") {\n                    return 0\n                }\n                if (hint == \"string\") {\n                    return \"\"\n                }\n                return false\n            }\n            \n        }\n        \n        if (name == \"toString\") {\n            \n            return function toString() {\n                return \"\"\n            }\n            \n        }\n        \n        return NilFunction()\n    },\n    \n    set(target, name, value) {\n        return NilFunction()\n    }\n    \n})\n\n\n\n\n\nexport function wrapInNil<T>(object?: T): T {\n    \n    \n    let result = FIRST_OR_NIL(object)\n    \n    if (object instanceof Object && !(object instanceof Function)) {\n        \n        result = new Proxy(object as Object & T, {\n            \n            get(target, name) {\n                \n                if (name == \"wrapped_nil_target\") {\n                    \n                    return target\n                    \n                }\n                \n                \n                const value = Reflect.get(target, name)\n                \n                if (typeof value === \"object\") {\n                    \n                    return wrapInNil(value)\n                    \n                }\n                \n                if (IS_NOT_LIKE_NULL(value)) {\n                    \n                    return value\n                    \n                }\n                \n                return nil\n                \n            },\n            \n            set(target, name, value) {\n                \n                if (IS(target)) {\n                    \n                    target[name] = value\n                    \n                }\n                \n                return YES\n                \n            }\n            \n        })\n        \n    }\n    \n    return result\n    \n}\n\n\nexport const YES = true\nexport const NO = false\n\nexport function IS(object) {\n    \n    if (object && object !== nil) {\n        \n        return YES\n        \n    }\n    \n    return NO\n    \n    //return (object != nil && object);\n    \n}\n\nexport function IS_NOT(object) {\n    \n    return !IS(object)\n    \n}\n\nexport function IS_DEFINED(object) {\n    \n    if (object != undefined) {\n        \n        return YES\n        \n    }\n    \n    return NO\n    \n}\n\nexport function IS_UNDEFINED(object) {\n    \n    return !IS_DEFINED(object)\n    \n}\n\nexport function IS_NIL(object) {\n    \n    if (object === nil) {\n        \n        return YES\n        \n    }\n    \n    return NO\n    \n}\n\nexport function IS_NOT_NIL(object) {\n    \n    return !IS_NIL(object)\n    \n}\n\n\nexport function IS_LIKE_NULL(object) {\n    \n    return (IS_UNDEFINED(object) || IS_NIL(object) || object == null)\n    \n}\n\nexport function IS_NOT_LIKE_NULL(object) {\n    \n    return !IS_LIKE_NULL(object)\n    \n}\n\n\nexport function IS_AN_EMAIL_ADDRESS(email: string) {\n    const re = /\\S+@\\S+\\.\\S+/\n    return re.test(email)\n}\n\n\nexport function FIRST_OR_NIL<T>(...objects: T[]): T {\n    \n    const result = objects.find(function (object, index, array) {\n        \n        return IS(object)\n        \n    })\n    \n    return result || nil\n    \n}\n\nexport function FIRST<T>(...objects: T[]): T {\n    \n    const result = objects.find(function (object, index, array) {\n        \n        return IS(object)\n        \n    })\n    \n    return result || IF(IS_DEFINED(objects.lastElement))(RETURNER(objects.lastElement))()\n    \n}\n\n\nexport function MAKE_ID(randomPartLength = 15) {\n    \n    let result = \"\"\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    \n    for (let i = 0; i < randomPartLength; i++) {\n        \n        result = result + characters.charAt(Math.floor(Math.random() * characters.length))\n        \n    }\n    \n    result = result + Date.now()\n    \n    return result\n    \n}\n\n\nexport function RETURNER<T>(value?: T) {\n    \n    return (...objects: any[]) => value\n    \n}\n\n\n\n\n\nexport type UIIFBlockReceiver<T> = (functionToCall: () => any) => UIIFEvaluator<T>;\n\nexport type UIIFEvaluatorBase<T> = () => T;\n\n\nexport interface UIIFEvaluator<T> extends UIIFEvaluatorBase<T> {\n    \n    ELSE_IF: (otherValue: any) => UIIFBlockReceiver<T>;\n    ELSE: (functionToCall: () => any) => T;\n    \n}\n\n\nexport function IF<T = any>(value: any): UIIFBlockReceiver<T> {\n    \n    let thenFunction = nil\n    let elseFunction = nil\n    \n    const result: any = function (functionToCall: () => T) {\n        thenFunction = functionToCall\n        return result.evaluateConditions\n    }\n    \n    \n    result.evaluateConditions = function () {\n        if (IS(value)) {\n            return thenFunction()\n        }\n        return elseFunction()\n    }\n    \n    \n    result.evaluateConditions.ELSE_IF = function (otherValue: any) {\n        \n        const functionResult = IF(otherValue) as (UIIFBlockReceiver<T> & { evaluateConditions: UIIFEvaluator<T> })\n        elseFunction = functionResult.evaluateConditions\n        \n        const functionResultEvaluateConditionsFunction: any = function () {\n            return result.evaluateConditions()\n        }\n        functionResultEvaluateConditionsFunction.ELSE_IF = functionResult.evaluateConditions.ELSE_IF\n        functionResultEvaluateConditionsFunction.ELSE = functionResult.evaluateConditions.ELSE\n        \n        functionResult.evaluateConditions = functionResultEvaluateConditionsFunction\n        \n        return functionResult\n        \n    }\n    \n    \n    result.evaluateConditions.ELSE = function (functionToCall: () => T) {\n        elseFunction = functionToCall\n        return result.evaluateConditions()\n    }\n    \n    \n    return result\n}\n\n\n\n\n\nexport class UIFunctionCall<T extends (...args: any) => any> {\n    \n    isAUIFunctionCallObject = YES\n    parameters: Parameters<T>[]\n    \n    constructor(...parameters: Parameters<T>) {\n        \n        this.parameters = parameters\n        \n    }\n    \n    callFunction(functionToCall: T) {\n        \n        const parameters = this.parameters\n        functionToCall(...parameters)\n        \n    }\n    \n    \n}\n\n\nexport function CALL<T extends (...args: any) => any>(...objects: Parameters<T>) {\n    \n    const result = new UIFunctionCall<T>(...objects)\n    return result\n    \n}\n\n\nexport class UIFunctionExtender<T extends (...args: any) => any> {\n    \n    isAUIFunctionExtenderObject = YES\n    extendingFunction: T\n    \n    constructor(extendingFunction: T) {\n        \n        this.extendingFunction = extendingFunction\n        \n    }\n    \n    extendedFunction(functionToExtend: T) {\n        \n        const extendingFunction = this.extendingFunction\n        \n        function extendedFunction(...objects: any[]) {\n            \n            const boundFunctionToExtend = functionToExtend.bind(this)\n            boundFunctionToExtend(...objects)\n            \n            const boundExtendingFunction = extendingFunction.bind(this)\n            boundExtendingFunction(...objects)\n            \n        }\n        \n        return extendedFunction\n        \n    }\n    \n    \n}\n\n\nexport function EXTEND<T extends (...args: any) => any>(extendingFunction: T) {\n    \n    const result = new UIFunctionExtender(extendingFunction)\n    return result\n    \n}\n\n\nexport class UILazyPropertyValue<T> {\n    \n    isAUILazyPropertyValueObject = YES\n    initFunction: () => T\n    \n    constructor(initFunction: () => T) {\n        \n        this.initFunction = initFunction\n        \n    }\n    \n    setLazyPropertyValue(key: string, target: object) {\n        \n        let isValueInitialized = NO\n        \n        // property value\n        let _value = nil\n        \n        const initValue = () => {\n            \n            _value = this.initFunction()\n            isValueInitialized = YES\n            this.initFunction = nil\n            \n        }\n        \n        if (delete target[key]) {\n            \n            // Create new property with getter and setter\n            Object.defineProperty(target, key, {\n                get: function () {\n                    \n                    if (IS_NOT(isValueInitialized)) {\n                        \n                        initValue()\n                        \n                    }\n                    \n                    return _value\n                    \n                },\n                set: function (newValue) {\n                    \n                    _value = newValue\n                    \n                },\n                enumerable: true,\n                configurable: true\n            })\n            \n        }\n        \n    }\n    \n    \n}\n\n\nexport function LAZY_VALUE<T>(initFunction: () => T) {\n    \n    const result = new UILazyPropertyValue(initFunction)\n    \n    return result\n    \n}\n\n\nexport type UIInitializerObject<T> = {\n    \n    [P in keyof T]?:\n    //T[P] extends (infer U)[] ? UIInitializerObject<U>[] :\n    T[P] extends (...args: any) => any ? UIFunctionCall<T[P]> | UIFunctionExtender<T[P]> | T[P] :\n        T[P] extends object ? UIInitializerObject<T[P]> | UILazyPropertyValue<T[P]> :\n            T[P];\n    \n}\n\n\nexport class UIObject {\n    \n    constructor() {\n        \n        // Do something here if needed\n        \n    }\n    \n    public get class(): any {\n        return Object.getPrototypeOf(this).constructor\n    }\n    \n    public get superclass(): any {\n        return Object.getPrototypeOf(Object.getPrototypeOf(this)).constructor\n    }\n    \n    \n    public static wrapObject<T>(object: T): UIObject & T {\n        \n        if (IS_NOT(object)) {\n            return nil\n        }\n        \n        if (object instanceof UIObject) {\n            return object\n        }\n        \n        return Object.assign(new UIObject(), object)\n        \n    }\n    \n    \n    isKindOfClass(classObject) {\n        if (this.isMemberOfClass(classObject)) {\n            return YES\n        }\n        for (let superclassObject = this.superclass; IS(superclassObject); superclassObject = superclassObject.superclass) {\n            if (superclassObject == classObject) {\n                return YES\n            }\n        }\n        return NO\n    }\n    \n    \n    isMemberOfClass(classObject: any) {\n        return (this.class == classObject)\n    }\n    \n    \n    \n    valueForKey(key: string) {\n        return this[key]\n    }\n    \n    valueForKeyPath(keyPath: string): any {\n        return UIObject.valueForKeyPath(keyPath, this)\n    }\n    \n    static valueForKeyPath(keyPath: string, object: any): any {\n        \n        if (IS_NOT(keyPath)) {\n            return object\n        }\n        \n        const keys = keyPath.split(\".\")\n        let currentObject = object\n        \n        for (let i = 0; i < keys.length; i++) {\n            \n            const key = keys[i]\n            \n            if (key.substring(0, 2) == \"[]\") {\n                \n                // This next object will be an array and the rest of the keys need to be run for each of the elements\n                currentObject = currentObject[key.substring(2)]\n                \n                // CurrentObject is now an array\n                \n                const remainingKeyPath = keys.slice(i + 1).join(\".\")\n                const currentArray = currentObject as unknown as any[]\n                currentObject = currentArray.map(function (subObject, index, array) {\n                    return UIObject.valueForKeyPath(remainingKeyPath, subObject)\n                })\n                \n                break\n                \n            }\n            \n            currentObject = currentObject[key]\n            if (IS_NOT(currentObject)) {\n                currentObject = nil\n            }\n            \n        }\n        \n        return currentObject\n        \n    }\n    \n    setValueForKeyPath(keyPath: string, value: any, createPath = YES) {\n        return UIObject.setValueForKeyPath(keyPath, value, this, createPath)\n    }\n    \n    static setValueForKeyPath(keyPath: string, value: any, currentObject: any, createPath) {\n        \n        const keys = keyPath.split(\".\")\n        let didSetValue = NO\n        \n        keys.forEach(function (key, index, array) {\n            if (index == array.length - 1 && IS_NOT_LIKE_NULL(currentObject)) {\n                currentObject[key] = value\n                didSetValue = YES\n                return\n            }\n            else if (IS_NOT(currentObject)) {\n                return\n            }\n            \n            const currentObjectValue = currentObject[key]\n            if (IS_LIKE_NULL(currentObjectValue) && createPath) {\n                currentObject[key] = {}\n            }\n            currentObject = currentObject[key]\n        })\n        \n        return didSetValue\n        \n    }\n    \n    \n    configureWithObject(object: UIInitializerObject<this>) {\n        this.configuredWithObject(object)\n    }\n    \n    configuredWithObject(object: UIInitializerObject<this>): this {\n        return UIObject.configureWithObject(this, object)\n    }\n    \n    \n    static configureWithObject<T extends object>(configurationTarget: T, object: UIInitializerObject<T>) {\n        \n        const isAnObject = (item: any) => (item && typeof item === \"object\" && !Array.isArray(item) &&\n            !(item instanceof UICoreExtensionValueObject))\n        \n        function isAClass(funcOrClass) {\n            const isFunction = functionToCheck => (functionToCheck && {}.toString.call(functionToCheck) ===\n                \"[object Function]\")\n            const propertyNames = Object.getOwnPropertyNames(funcOrClass)\n            return (isFunction(funcOrClass) && !propertyNames.includes(\"arguments\") &&\n                propertyNames.includes(\"prototype\"))\n        }\n        \n        let keyPathsAndValues = []\n        \n        function prepareKeyPathsAndValues(target: object, source: object, keyPath = \"\") {\n            \n            if ((isAnObject(target) || isAClass(target)) && isAnObject(source)) {\n                \n                source.forEach((sourceValue, key) => {\n                    \n                    const valueKeyPath = keyPath + \".\" + key\n                    function addValueAndKeyPath(sourceValue) {\n                        keyPathsAndValues.push({\n                            value: sourceValue,\n                            keyPath: valueKeyPath.replace(\".\", \"\")\n                        })\n                    }\n                    \n                    if (isAnObject(sourceValue) || isAClass(sourceValue)) {\n                        if (!(key in target) || target[key] instanceof Function) {\n                            addValueAndKeyPath(sourceValue)\n                        }\n                        else {\n                            prepareKeyPathsAndValues(target[key], sourceValue, valueKeyPath)\n                        }\n                    }\n                    else if (sourceValue instanceof UICoreExtensionValueObject) {\n                        addValueAndKeyPath(sourceValue.value)\n                    }\n                    else {\n                        addValueAndKeyPath(sourceValue)\n                    }\n                    \n                })\n                \n            }\n            \n        }\n        \n        prepareKeyPathsAndValues(configurationTarget, object)\n        \n        // Sort based on key paths\n        keyPathsAndValues = keyPathsAndValues.sort((a, b) => {\n            \n            const firstKeyPath = (a.keyPath as string).split(\".\").length\n            const secondKeyPath = (b.keyPath as string).split(\".\").length\n            \n            if (firstKeyPath < secondKeyPath) {\n                return -1\n            }\n            if (firstKeyPath > secondKeyPath) {\n                return 1\n            }\n            return 0\n            \n        })\n        \n        keyPathsAndValues.forEach((valueAndKeyPath) => {\n            \n            const keyPath: string = valueAndKeyPath.keyPath\n            let value = valueAndKeyPath.value\n            \n            const getTargetFunction = (bindThis = NO) => {\n                let result = (UIObject.valueForKeyPath(keyPath, configurationTarget) as Function)\n                if (bindThis) {\n                    const indexOfDot = keyPath.lastIndexOf(\".\")\n                    const thisObject = UIObject.valueForKeyPath(keyPath.substring(0, indexOfDot), configurationTarget)\n                    result = result.bind(thisObject)\n                }\n                return result\n            }\n            \n            if (value instanceof UILazyPropertyValue) {\n                const indexOfDot = keyPath.lastIndexOf(\".\")\n                const thisObject = UIObject.valueForKeyPath(keyPath.substring(0, indexOfDot), configurationTarget)\n                const key = keyPath.substring(indexOfDot + 1)\n                value.setLazyPropertyValue(key, thisObject)\n                return\n            }\n            \n            if (value instanceof UIFunctionCall) {\n                value.callFunction(getTargetFunction(YES))\n                return\n            }\n            \n            if (value instanceof UIFunctionExtender) {\n                value = value.extendedFunction(getTargetFunction())\n            }\n            \n            UIObject.setValueForKeyPath(keyPath, value, configurationTarget, YES)\n            \n        })\n        \n        \n        return configurationTarget\n        \n    }\n    \n    \n    performFunctionWithSelf<T>(functionToPerform: (self: this) => T): T {\n        return functionToPerform(this)\n    }\n    \n    performingFunctionWithSelf(functionToPerform: (self: this) => void): this {\n        functionToPerform(this)\n        return this;\n    }\n    \n    performFunctionWithDelay(delay: number, functionToCall: Function) {\n        \n        new UITimer(delay, NO, functionToCall)\n        \n    }\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["sourceValue"]
}
