{
  "version": 3,
  "sources": ["../scripts/UIKeyValueStringSorter.ts"],
  "sourcesContent": ["import { IS, IS_NOT, MAKE_ID, NO, UIObject, YES } from \"./UIObject\"\n// @ts-ignore\nimport UIKeyValueStringSorterWebWorker from \"./UIKeyValueStringSorterWebWorker.worker.js\"\n\n\nexport interface UIKeyValueStringSorterSortingInstruction {\n    \n    keyPath: string;\n    \n    dataType: string;\n    \n    direction: string;\n    \n    \n}\n\n\n\n\n\nexport class UIKeyValueStringSorter extends UIObject {\n    \n    \n    static _sharedWebWorkerHolder = { webWorker: new UIKeyValueStringSorterWebWorker() }\n    \n    static _instanceNumber = -1\n    \n    \n    _instanceNumber: number\n    \n    _isThreadClosed = NO\n    \n    private _webWorkerHolder = UIKeyValueStringSorter._sharedWebWorkerHolder\n    \n    \n    constructor(useSeparateWebWorkerHolder = NO) {\n        \n        \n        super()\n        \n        if (useSeparateWebWorkerHolder) {\n            \n            this._webWorkerHolder = { webWorker: new UIKeyValueStringSorterWebWorker() }\n            \n        }\n        \n        UIKeyValueStringSorter._instanceNumber = UIKeyValueStringSorter._instanceNumber + 1\n        this._instanceNumber = UIKeyValueStringSorter._instanceNumber\n        \n        if (IS_NOT(this._webWorkerHolder.webWorker.onmessage)) {\n            \n            this._webWorkerHolder.webWorker.onmessage = message => {\n    \n                this.isWorkerBusy = NO;\n                this.postNextMessageIfNeeded();\n                \n                const key = \"\" + message.data.identifier + message.data.instanceIdentifier\n        \n                const completionFunction = this.completionFunctions[key]\n        \n                if (IS(completionFunction)) {\n            \n                    //console.log(\"Filtering took \" + (Date.now() - startTime) + \" ms\");\n            \n                    completionFunction(message.data.sortedData, message.data.sortedIndexes, message.data.identifier)\n            \n                }\n                \n                delete this.completionFunctions[key];\n                \n                var asd = 1;\n                \n            }\n            \n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get instanceIdentifier() {\n        \n        return this._instanceNumber\n        \n    }\n    \n    \n    \n    \n    get completionFunctions() {\n        \n        const key = \"UICore_completionFunctions\";\n        var result: {\n        \n            [x: string]: (sortedData: any[], sortedIndexes: number[], identifier: any) => void\n            \n        } = this._webWorkerHolder[key];\n        \n        if (IS_NOT(result)) {\n            \n            result = {};\n            this._webWorkerHolder[key] = result;\n            \n        }\n        \n        return result;\n        \n    }\n    \n    get messagesToPost() {\n        \n        const key = \"UICore_messagesToPost\";\n        var result: any[] = this._webWorkerHolder[key];\n        \n        if (IS_NOT(result)) {\n            \n            result = [];\n            this._webWorkerHolder[key] = result;\n            \n        }\n        \n        return result;\n        \n    }\n    \n    \n    set isWorkerBusy(isWorkerBusy: boolean) {\n        \n        this._webWorkerHolder[\"UICore_isWorking\"] = isWorkerBusy;\n        \n    }\n    \n    get isWorkerBusy() {\n        \n        return IS(this._webWorkerHolder[\"UICore_isWorking\"]);\n        \n    }\n    \n    \n    postNextMessageIfNeeded() {\n        \n        if (this.messagesToPost.length && IS_NOT(this.isWorkerBusy)) {\n            \n            this._webWorkerHolder.webWorker.postMessage(this.messagesToPost.firstElement);\n            this.messagesToPost.removeElementAtIndex(0);\n            \n            this.isWorkerBusy = YES;\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    static dataType = {\n        \n        \"string\": \"string\"\n        \n    }\n    \n    \n    static direction = {\n        \n        \"descending\": \"descending\",\n        \"ascending\": \"ascending\"\n        \n    }\n    \n    \n    \n    \n    \n    sortData<T>(\n        data: T[],\n        sortingInstructions: UIKeyValueStringSorterSortingInstruction[],\n        identifier: any,\n        completion: (sortedData: T[], sortedIndexes: number[], identifier: any) => void\n    ) {\n        \n        \n        if (this._isThreadClosed) {\n            \n            return\n            \n        }\n    \n        \n        const instanceIdentifier = this.instanceIdentifier\n        \n        const key = \"\" + identifier + instanceIdentifier\n        \n        this.completionFunctions[key] = completion;\n        \n        \n        try {\n            \n            this.messagesToPost.push({\n                \n                \"data\": data,\n                \"sortingInstructions\": sortingInstructions,\n                \"identifier\": identifier,\n                \"instanceIdentifier\": instanceIdentifier\n                \n            });\n            \n            this.postNextMessageIfNeeded();\n            \n        } catch (exception) {\n            \n            completion([], [], identifier)\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    sortedData<T>(\n        data: T[],\n        sortingInstructions: UIKeyValueStringSorterSortingInstruction[],\n        identifier: any = MAKE_ID()\n    ) {\n    \n        const result: Promise<{\n        \n            sortedData: T[],\n            sortedIndexes: number[],\n            identifier: any\n        \n        }> = new Promise((resolve, reject) => {\n        \n            this.sortData(data, sortingInstructions, identifier, (sortedData, sortedIndexes, sortedIdentifier) => {\n    \n                if (sortedIdentifier == identifier) {\n    \n                    resolve({\n        \n                        sortedData: sortedData,\n                        sortedIndexes: sortedIndexes,\n                        identifier: sortedIdentifier\n        \n                    })\n        \n                }\n                \n                \n            \n            })\n        \n        \n        \n        })\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    closeThread() {\n        \n        this._isThreadClosed = YES\n        \n        if (this._webWorkerHolder != UIKeyValueStringSorter._sharedWebWorkerHolder) {\n            \n            this._webWorkerHolder.webWorker.terminate();\n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["UIKeyValueStringSorterWebWorker"]
}
