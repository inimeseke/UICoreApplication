{
  "version": 3,
  "sources": ["../scripts/UIBaseButton.ts"],
  "sourcesContent": ["import { UIColor } from \"./UIColor\"\nimport { IS, nil, NO, YES } from \"./UIObject\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UIBaseButton extends UIView {\n    \n    _selected: boolean = NO\n    _highlighted: boolean = NO\n    \n    _isPointerInside: boolean\n    \n    \n    _isToggleable: boolean = NO\n    _hovered: boolean\n    _focused: boolean\n    \n    \n    \n    \n    \n    constructor(elementID: string, elementType?: string, initViewData?: any) {\n        \n        super(elementID, nil, elementType, initViewData)\n        \n        this.initViewStateControl()\n        \n    }\n    \n    \n    \n    \n    \n    initViewStateControl() {\n        \n        this.class.superclass = UIView\n        \n        // Instance variables\n        \n        \n        this._isPointerInside = NO\n    \n    \n        const setHovered = function () {\n            this.hovered = YES\n        }.bind(this)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerHover, setHovered)\n    \n        const setNotHovered = function () {\n        \n            this.hovered = NO\n        \n        }.bind(this)\n    \n        this.addTargetForControlEvents([\n            UIView.controlEvent.PointerLeave, UIView.controlEvent.PointerCancel, UIView.controlEvent.MultipleTouches\n        ], setNotHovered)\n    \n    \n        var highlightingTime\n        const setHighlighted = function () {\n            this.highlighted = YES\n            highlightingTime = Date.now()\n        }.bind(this)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerDown, setHighlighted)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerEnter, setHighlighted)\n    \n        const setNotHighlighted = function () {\n            this.highlighted = NO\n        }.bind(this)\n        const setNotHighlightedWithMinimumDuration = function () {\n            const minimumDurationInMilliseconds = 50\n            const elapsedTime = Date.now() - highlightingTime\n            if (minimumDurationInMilliseconds < elapsedTime) {\n                this.highlighted = NO\n            }\n            else {\n                setTimeout(function () {\n                    this.highlighted = NO\n                }.bind(this), minimumDurationInMilliseconds - elapsedTime)\n            }\n        }.bind(this)\n        this.addTargetForControlEvents([\n            UIView.controlEvent.PointerLeave, UIView.controlEvent.PointerCancel, UIView.controlEvent.MultipleTouches\n        ], setNotHighlighted)\n        this.addTargetForControlEvent(UIView.controlEvent.PointerUp, setNotHighlightedWithMinimumDuration)\n        \n        // Handle enter key press\n        this.addTargetForControlEvent(UIView.controlEvent.EnterDown, function () {\n            \n            setHighlighted()\n            setNotHighlightedWithMinimumDuration()\n            \n        })\n        \n        \n        this.addTargetForControlEvent(\n            UIView.controlEvent.Focus,\n            function (this: UIBaseButton, sender: UIView, event: Event) {\n                \n                this.focused = YES\n                \n            }.bind(this)\n        )\n        \n        this.addTargetForControlEvent(\n            UIView.controlEvent.Blur,\n            function (this: UIBaseButton, sender: UIView, event: Event) {\n                \n                this.focused = NO\n                \n            }.bind(this)\n        )\n        \n        \n        this.updateContentForCurrentState()\n        \n        this.pausesPointerEvents = YES\n        this.tabIndex = 1\n        \n        this.style.cursor = \"pointer\"\n        \n        //this.style.outline = \"none\";\n        \n        \n        this.nativeSelectionEnabled = NO\n        \n        \n        this.addTargetForControlEvents([\n            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\n        ], function (this: UIBaseButton, sender, event) {\n            \n            if (this.isToggleable) {\n                \n                this.toggleSelectedState()\n                \n            }\n            \n        }.bind(this))\n        \n        \n    }\n    \n    \n    \n    \n    \n    public set hovered(hovered: boolean) {\n        this._hovered = hovered\n        this.updateContentForCurrentState()\n    }\n    \n    public get hovered(): boolean {\n        return this._hovered\n    }\n    \n    public set highlighted(highlighted: boolean) {\n        this._highlighted = highlighted\n        this.updateContentForCurrentState()\n    }\n    \n    public get highlighted(): boolean {\n        return this._highlighted\n    }\n    \n    public set focused(focused: boolean) {\n        this._focused = focused\n        if (focused) {\n            this.focus()\n        }\n        else {\n            this.blur()\n        }\n        this.updateContentForCurrentState()\n    }\n    \n    public get focused(): boolean {\n        return this._focused\n    }\n    \n    public set selected(selected: boolean) {\n        this._selected = selected\n        this.updateContentForCurrentState()\n    }\n    \n    public get selected(): boolean {\n        return this._selected\n    }\n    \n    \n    \n    \n    \n    updateContentForCurrentState() {\n    \n        var updateFunction: Function = this.updateContentForNormalState\n        if (this.selected && this.highlighted) {\n            updateFunction = this.updateContentForSelectedAndHighlightedState\n        }\n        else if (this.selected) {\n            updateFunction = this.updateContentForSelectedState\n        }\n        else if (this.focused) {\n            updateFunction = this.updateContentForFocusedState\n        }\n        else if (this.highlighted) {\n            updateFunction = this.updateContentForHighlightedState\n        }\n        else if (this.hovered) {\n            updateFunction = this.updateContentForHoveredState\n        }\n        \n        if (!IS(updateFunction)) {\n            this.backgroundColor = UIColor.nilColor\n        }\n        else {\n            updateFunction.call(this)\n        }\n        \n    }\n    \n    updateContentForNormalState() {\n        \n        \n        \n    }\n    \n    updateContentForHoveredState() {\n        \n        this.updateContentForNormalState()\n        \n    }\n    \n    updateContentForFocusedState() {\n        \n        this.updateContentForHoveredState()\n        \n    }\n    \n    updateContentForHighlightedState() {\n        \n        \n        \n    }\n    \n    updateContentForSelectedState() {\n        \n        \n        \n    }\n    \n    updateContentForSelectedAndHighlightedState() {\n        \n        this.updateContentForSelectedState()\n        \n    }\n    \n    \n    set enabled(enabled: boolean) {\n        \n        super.enabled = enabled\n        \n        this.updateContentForCurrentEnabledState()\n        \n    }\n    \n    get enabled() {\n        \n        return super.enabled\n        \n    }\n    \n    updateContentForCurrentEnabledState() {\n        \n        if (this.enabled) {\n            this.alpha = 1\n        }\n        else {\n            this.alpha = 0.5\n        }\n        \n        this.userInteractionEnabled = this.enabled\n        \n    }\n    \n    \n    \n    addStyleClass(styleClassName: string) {\n        \n        super.addStyleClass(styleClassName)\n        \n        if (this.styleClassName != styleClassName) {\n            \n            this.updateContentForCurrentState.call(this)\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.PageDidScroll || event.name ==\n            UIView.broadcastEventName.AddedToViewTree) {\n            \n            this.hovered = NO\n            \n            this.highlighted = NO\n            \n            \n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    toggleSelectedState() {\n        \n        \n        this.selected = !this.selected\n        \n        \n    }\n    \n    set isToggleable(isToggleable: boolean) {\n        \n        this._isToggleable = isToggleable\n        \n    }\n    \n    get isToggleable() {\n        \n        return this._isToggleable\n        \n    }\n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n    \n    \n    \n    }\n    \n    \n    \n    \n    \n    sendControlEventForKey(eventKey: string, nativeEvent: Event) {\n        \n        if (eventKey == UIView.controlEvent.PointerUpInside && !this.highlighted) {\n            \n            // Do not send the event in this case\n            //super.sendControlEventForKey(eventKey, nativeEvent);\n    \n            const asd = 1\n    \n        }\n        else {\n            \n            super.sendControlEventForKey(eventKey, nativeEvent)\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n    static getEventCoordinatesInDocument(touchOrMouseEvent) {\n        // http://www.quirksmode.org/js/events_properties.html\n        var posx = 0\n        var posy = 0\n        var e = touchOrMouseEvent\n        if (!e) {\n            e = window.event\n        }\n        if (e.pageX || e.pageY) {\n            posx = e.pageX\n            posy = e.pageY\n        }\n        else if (e.clientX || e.clientY) {\n            posx = e.clientX + document.body.scrollLeft\n                + document.documentElement.scrollLeft\n            posy = e.clientY + document.body.scrollTop\n                + document.documentElement.scrollTop\n        }\n        // posx and posy contain the mouse position relative to the document\n    \n        const coordinates = { \"x\": posx, \"y\": posy }\n    \n        return coordinates\n        \n    }\n    \n    \n    \n    static getElementPositionInDocument(el) {\n        //https://www.kirupa.com/html5/getting_mouse_click_position.htm\n        var xPosition = 0\n        var yPosition = 0\n    \n        while (el) {\n            if (el.tagName == \"BODY\") {\n                \n                // Coordinates in document are coordinates in body, therefore subtracting the scroll position of the body is not needed\n                \n                //      // deal with browser quirks with body/window/document and page scroll\n                //      var xScrollPos = el.scrollLeft || document.documentElement.scrollLeft;\n                //      var yScrollPos = el.scrollTop || document.documentElement.scrollTop;\n                //\n                //      xPosition += (el.offsetLeft - xScrollPos + el.clientLeft);\n                //      yPosition += (el.offsetTop - yScrollPos + el.clientTop);\n            }\n            else {\n                xPosition += (el.offsetLeft - el.scrollLeft + el.clientLeft)\n                yPosition += (el.offsetTop - el.scrollTop + el.clientTop)\n            }\n            \n            el = el.offsetParent\n        }\n        return {\n            x: xPosition,\n            y: yPosition\n        }\n    }\n    \n    static convertCoordinatesFromDocumentToElement(x, y, element) {\n        const elementPositionInDocument = this.getElementPositionInDocument(element)\n        const coordinatesInElement = { \"x\": x - elementPositionInDocument.x, \"y\": y - elementPositionInDocument.y }\n        return coordinatesInElement\n    }\n    \n    static getEventCoordinatesInElement(touchOrMouseEvent, element) {\n        const coordinatesInDocument = this.getEventCoordinatesInDocument(touchOrMouseEvent)\n        const coordinatesInElement = this.convertCoordinatesFromDocumentToElement(\n            coordinatesInDocument.x,\n            coordinatesInDocument.y,\n            element\n        )\n        return coordinatesInElement\n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
