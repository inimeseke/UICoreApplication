{
  "version": 3,
  "sources": ["../scripts/UIButton.ts"],
  "sourcesContent": ["\nimport { UIBaseButton } from \"./UIBaseButton\"\nimport { UIColor } from \"./UIColor\"\nimport { UIImageView } from \"./UIImageView\"\nimport { IS, IS_NOT, IS_NOT_NIL, nil, NO, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UITextView } from \"./UITextView\"\n\n\nexport interface UIButtonColorSpecifier {\n    \n    titleLabel: UIButtonElementColorSpecifier;\n    background: UIButtonElementColorSpecifier;\n    \n}\n\n\nexport interface UIButtonElementColorSpecifier {\n    \n    normal: UIColor;\n    hovered?: UIColor;\n    highlighted: UIColor;\n    focused?: UIColor;\n    selected: UIColor;\n    selectedAndHighlighted?: UIColor;\n    \n}\n\n\n\nexport class UIButton extends UIBaseButton {\n    \n    _contentPadding: any\n    _titleLabel: UITextView\n    _imageView: UIImageView\n    \n    usesAutomaticTitleFontSize = NO\n    minAutomaticFontSize: number = nil\n    maxAutomaticFontSize: number = 25\n    \n    colors: UIButtonColorSpecifier\n    \n    \n    constructor(elementID: string, elementType?: string, titleType = UITextView.type.span) {\n        \n        super(elementID, elementType, { \"titleType\": titleType })\n        \n    }\n    \n    \n    \n    \n    \n    initView(elementID, viewHTMLElement, initViewData: { titleType: string }) {\n        \n        this.class.superclass = UIBaseButton\n        \n        // Instance variables\n        \n        this.colors = {\n            \n            titleLabel: {\n                \n                normal: UIColor.whiteColor,\n                highlighted: UIColor.whiteColor,\n                selected: UIColor.whiteColor\n                \n            },\n            \n            background: {\n                \n                normal: UIColor.blueColor,\n                highlighted: UIColor.greenColor,\n                selected: UIColor.redColor\n                \n            }\n            \n        }\n        \n        \n        this._imageView = new UIImageView(elementID + \"ImageView\")\n        this._imageView.hidden = YES\n        this.addSubview(this.imageView)\n        \n        this.imageView.fillMode = UIImageView.fillMode.aspectFitIfLarger\n        \n        \n        if (IS_NOT_NIL(initViewData.titleType)) {\n            \n            this._titleLabel = new UITextView(elementID + \"TitleLabel\", initViewData.titleType)\n            this.titleLabel.style.whiteSpace = \"nowrap\"\n            this.addSubview(this.titleLabel)\n            \n            this.titleLabel.userInteractionEnabled = NO\n            \n        }\n        \n        this.contentPadding = 10\n        \n        this.imageView.userInteractionEnabled = NO\n        this.titleLabel.textAlignment = UITextView.textAlignment.center\n        this.titleLabel.nativeSelectionEnabled = NO\n        \n    }\n    \n    \n    \n    get contentPadding() {\n        \n        return this._contentPadding.integerValue\n        \n    }\n    \n    set contentPadding(contentPadding) {\n        \n        this._contentPadding = contentPadding\n        \n        this.setNeedsLayout()\n        \n    }\n    \n    \n    \n    \n    public set hovered(hovered: boolean) {\n        this._hovered = hovered\n        this.updateContentForCurrentState()\n    }\n    \n    public get hovered(): boolean {\n        return this._hovered\n    }\n    \n    public set highlighted(highlighted: boolean) {\n        this._highlighted = highlighted\n        this.updateContentForCurrentState()\n    }\n    \n    public get highlighted(): boolean {\n        return this._highlighted\n    }\n    \n    public set focused(focused: boolean) {\n        this._focused = focused\n        if (focused) {\n            this.focus()\n        }\n        else {\n            this.blur()\n        }\n        this.updateContentForCurrentState()\n    }\n    \n    public get focused(): boolean {\n        return this._focused\n    }\n    \n    public set selected(selected: boolean) {\n        this._selected = selected\n        this.updateContentForCurrentState()\n    }\n    \n    public get selected(): boolean {\n        return this._selected\n    }\n    \n    \n    \n    \n    \n    updateContentForCurrentState() {\n    \n        var updateFunction: Function = this.updateContentForNormalState\n        if (this.selected && this.highlighted) {\n            updateFunction = this.updateContentForSelectedAndHighlightedState\n        }\n        else if (this.selected) {\n            updateFunction = this.updateContentForSelectedState\n        }\n        else if (this.focused) {\n            updateFunction = this.updateContentForFocusedState\n        }\n        else if (this.highlighted) {\n            updateFunction = this.updateContentForHighlightedState\n        }\n        else if (this.hovered) {\n            updateFunction = this.updateContentForHoveredState\n        }\n        \n        if (!IS(updateFunction)) {\n            this.titleLabel.textColor = UIColor.nilColor\n            this.backgroundColor = UIColor.nilColor\n        }\n        else {\n            updateFunction.call(this)\n        }\n        \n        this.updateContentForCurrentEnabledState();\n        \n    }\n    \n    updateContentForNormalState() {\n        \n        this.backgroundColor = this.colors.background.normal\n        this.titleLabel.textColor = this.colors.titleLabel.normal\n        \n    }\n    \n    updateContentForHoveredState() {\n        \n        this.updateContentForNormalState()\n        \n        if (this.colors.background.hovered) {\n            this.backgroundColor = this.colors.background.hovered\n        }\n        \n        if (this.colors.titleLabel.hovered) {\n            this.titleLabel.textColor = this.colors.titleLabel.hovered\n        }\n        \n    }\n    \n    updateContentForFocusedState() {\n        \n        this.updateContentForHoveredState()\n        \n        if (this.colors.background.focused) {\n            this.backgroundColor = this.colors.background.focused\n        }\n        \n        if (this.colors.titleLabel.focused) {\n            this.titleLabel.textColor = this.colors.titleLabel.focused\n        }\n        \n    }\n    \n    updateContentForHighlightedState() {\n        \n        this.backgroundColor = this.colors.background.highlighted\n        this.titleLabel.textColor = this.colors.titleLabel.highlighted\n        \n    }\n    \n    updateContentForSelectedState() {\n        \n        this.backgroundColor = this.colors.background.selected\n        this.titleLabel.textColor = this.colors.titleLabel.selected\n        \n    }\n    \n    updateContentForSelectedAndHighlightedState() {\n        \n        this.updateContentForSelectedState()\n        \n        if (this.colors.background.selectedAndHighlighted) {\n            this.backgroundColor = this.colors.background.selectedAndHighlighted\n        }\n        \n        if (this.colors.titleLabel.selectedAndHighlighted) {\n            this.titleLabel.textColor = this.colors.titleLabel.selectedAndHighlighted\n        }\n        \n    }\n    \n    \n    set enabled(enabled: boolean) {\n        \n        // @ts-ignore\n        super.enabled = enabled\n        \n        this.updateContentForCurrentState()\n        \n    }\n    \n    get enabled() {\n        \n        // @ts-ignore\n        return super.enabled\n        \n    }\n    \n    updateContentForCurrentEnabledState() {\n        \n        if (this.enabled) {\n            this.alpha = 1\n        }\n        else {\n            this.alpha = 0.5\n        }\n        \n        this.userInteractionEnabled = this.enabled\n        \n    }\n    \n    \n    \n    addStyleClass(styleClassName: string) {\n        \n        super.addStyleClass(styleClassName)\n        \n        if (this.styleClassName != styleClassName) {\n            \n            this.updateContentForCurrentState.call(this)\n            \n        }\n        \n    }\n    \n    \n    get titleLabel() {\n        \n        return this._titleLabel\n        \n    }\n    \n    get imageView() {\n        \n        return this._imageView\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        var bounds = this.bounds\n    \n        this.hoverText = this.titleLabel.text\n        \n        // Image only if text is not present\n        if (IS_NOT(this.imageView.hidden) && !IS(this.titleLabel.text)) {\n            \n            \n            this.imageView.frame = bounds\n            \n            \n        }\n        \n        // Text only if image is not present\n        if (IS(this.imageView.hidden) && IS(this.titleLabel.text)) {\n            \n            var titleElement = this.titleLabel.viewHTMLElement\n            \n            \n            this.titleLabel.style.left = this.contentPadding\n            this.titleLabel.style.right = this.contentPadding\n            // this.titleLabel.style.marginLeft = \"\"\n            // this.titleLabel.style.right = this.contentPadding\n            this.titleLabel.style.top = \"50%\"\n            this.titleLabel.style.transform = \"translateY(-50%)\"\n            this.titleLabel.frame = new UIRectangle(nil, nil, nil, nil)\n            \n            if (this.usesAutomaticTitleFontSize) {\n                \n                var hidden = this.titleLabel.hidden\n                \n                this.titleLabel.hidden = YES\n                \n                this.titleLabel.fontSize = 15\n                \n                this.titleLabel.fontSize = UITextView.automaticallyCalculatedFontSize(\n                    new UIRectangle(\n                        0,\n                        0,\n                        this.bounds.height,\n                        1 *\n                        this.titleLabel.viewHTMLElement.offsetWidth\n                    ),\n                    this.titleLabel.intrinsicContentSize(),\n                    this.titleLabel.fontSize,\n                    this.minAutomaticFontSize,\n                    this.maxAutomaticFontSize\n                )\n                \n                this.titleLabel.hidden = hidden\n                \n            }\n            \n            \n        }\n        \n        // Image and text both present\n        if (IS_NOT(this.imageView.hidden) && IS(this.titleLabel.text)) {\n    \n            const imageShareOfWidth = 0.25\n    \n            bounds = bounds.rectangleWithInset(this.contentPadding)\n    \n            const imageFrame = bounds.copy()\n            imageFrame.width = bounds.height - this.contentPadding * 0.5\n            this.imageView.frame = imageFrame\n            \n            var titleElement = this.titleLabel.viewHTMLElement\n            \n            this.titleLabel.style.left = imageFrame.max.x + this.contentPadding\n            this.titleLabel.style.right = this.contentPadding\n            this.titleLabel.style.top = \"50%\"\n            this.titleLabel.style.transform = \"translateY(-50%)\"\n            \n            if (this.usesAutomaticTitleFontSize) {\n                \n                var hidden = this.titleLabel.hidden\n                \n                this.titleLabel.hidden = YES\n                \n                this.titleLabel.fontSize = 15\n                \n                this.titleLabel.fontSize = UITextView.automaticallyCalculatedFontSize(\n                    new UIRectangle(\n                        0,\n                        0,\n                        this.bounds.height,\n                        1 *\n                        this.titleLabel.viewHTMLElement.offsetWidth\n                    ),\n                    this.titleLabel.intrinsicContentSize(),\n                    this.titleLabel.fontSize,\n                    this.minAutomaticFontSize,\n                    this.maxAutomaticFontSize\n                )\n                \n                this.titleLabel.hidden = hidden\n                \n            }\n            \n        }\n        \n        this.applyClassesAndStyles()\n        \n    }\n    \n    initViewStyleSelectors() {\n        \n        this.initStyleSelector(\".\" + this.styleClassName, \"background-color: lightblue;\")\n        \n        // var selectorWithoutImage = \".\" + this.styleClassName + \" .\" + this.imageView.styleClassName + \" + .\" + this.titleLabel.styleClassName;\n        \n        // this.initStyleSelector(\n        //     selectorWithoutImage,\n        //     \"left: \" + this.contentPadding + \";\" +\n        //     \"right: \" + this.contentPadding + \";\" +\n        //     \"top: 50%;\" +\n        //     \"transform: translateY(-50%);\");\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
