var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var UILinkButton_exports = {};
__export(UILinkButton_exports, {
  UILinkButton: () => UILinkButton
});
module.exports = __toCommonJS(UILinkButton_exports);
var import_UIButton = require("./UIButton");
var import_UILink = require("./UILink");
class UILinkButton extends import_UILink.UILink {
  constructor(elementID, elementType, titleType) {
    super(elementID, { "elementType": elementType, "titleType": titleType });
    this.button.addTargetForControlEvents([
      import_UIButton.UIButton.controlEvent.EnterDown,
      import_UIButton.UIButton.controlEvent.PointerUpInside
    ], function(sender, event) {
      window.location = this.target;
    }.bind(this));
  }
  initView(elementID, viewHTMLElement, initViewData) {
    super.initView(elementID, viewHTMLElement, initViewData);
    this.class.superclass = import_UILink.UILink;
    this.button = new import_UIButton.UIButton(this.elementID + "Button", initViewData.elementType, initViewData.titleType);
    this.addSubview(this.button);
    this.style.position = "absolute";
  }
  get titleLabel() {
    return this.button.titleLabel;
  }
  get imageView() {
    return this.button.imageView;
  }
  set colors(colors) {
    this.button.colors = colors;
  }
  get colors() {
    return this.button.colors;
  }
  get viewHTMLElement() {
    return super.viewHTMLElement;
  }
  set target(target) {
    this.viewHTMLElement.setAttribute("href", target);
  }
  get target() {
    const result = this.viewHTMLElement.getAttribute("href");
    return result;
  }
  layoutSubviews() {
    super.layoutSubviews();
    const bounds = this.bounds;
    this.button.frame = bounds;
    this.button.layoutSubviews();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  UILinkButton
});
//# sourceMappingURL=UILinkButton.js.map
