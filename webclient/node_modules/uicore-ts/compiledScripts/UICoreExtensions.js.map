{
  "version": 3,
  "sources": ["../scripts/UICoreExtensions.ts"],
  "sourcesContent": ["import { UICoreExtensionValueObject } from \"./UICoreExtensionValueObject\"\nimport { UIObject } from \"./UIObject\"\n\n\n\n\n\ndeclare global {\n    \n    \n    interface Array<T> {\n        \n        removeElementAtIndex(index: number);\n        \n        removeElement(element: T);\n        \n        insertElementAtIndex(index: number, element: T);\n        \n        replaceElementAtIndex(index: number, element: T);\n        \n        \n        contains(element: T): boolean;\n        \n        findAsyncSequential(functionToCall: (value: any) => Promise<boolean>): Promise<any>;\n        \n        groupedBy(keyFunction: (item: T) => any): { [key: string]: Array<T> } & Object;\n        \n        copy(): Array<T>;\n        \n        arrayByRepeating(numberOfRepetitions: number): Array<T>;\n        \n        arrayByTrimmingToLengthIfLonger(maxLength: number): Array<T>;\n        \n        anyMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n        \n        noneMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n        \n        allMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n        \n        firstElement: T;\n        lastElement: T;\n        readonly summedValue: T;\n        \n        everyElement: UIEveryElementItem<T>;\n        \n        max(): number;\n        \n        min(): number;\n        \n        isEqualToArray(array: Array<T>, keyPath?: string): boolean;\n        \n    }\n    \n    \n    \n    interface String {\n        \n        contains(string): boolean;\n        \n        readonly numericalValue: number;\n        isAString: boolean;\n        \n    }\n    \n    \n    \n    interface Number {\n        \n        isANumber: boolean;\n        \n        readonly integerValue: number;\n        \n    }\n    \n    \n    \n    interface Date {\n        \n        readonly dateString: string;\n        \n    }\n    \n    \n    interface Object {\n        \n        forEach(callbackFunction: (value: any, key: string) => void): void;\n        \n        readonly allValues: Array<any>;\n        \n        readonly allKeys: string[];\n        \n    }\n    \n    \n}\n\nexport {}\n\nconst YES = true\nconst NO = false\n\nif (\"removeElementAtIndex\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).removeElementAtIndex = function (this: Array<any>, index: number) {\n        \n        // @ts-ignore\n        if (index >= 0 && index < this.length) {\n            \n            this.splice(index, 1)\n            \n        }\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     removeElementAtIndex(index: number);\n//\n// }\n\n\nif (\"removeElement\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).removeElement = function (this: Array<any>, element) {\n        \n        this.removeElementAtIndex(this.indexOf(element))\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     removeElement(element: T);\n//\n// }\n\n\nif (\"insertElementAtIndex\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).insertElementAtIndex = function (this: Array<any>, index: number, element: any) {\n        \n        if (index >= 0 && index <= this.length) {\n            \n            this.splice(index, 0, element)\n            \n        }\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     insertElementAtIndex(index: number, element: T);\n//\n// }\n\n\nif (\"replaceElementAtIndex\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).replaceElementAtIndex = function (this: Array<any>, index: number, element: any) {\n        \n        this.removeElementAtIndex(index)\n        this.insertElementAtIndex(index, element)\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     replaceElementAtIndex(index: number, element: T);\n//\n// }\n\n\nif (\"contains\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).contains = function (this: Array<any>, element) {\n        \n        const result = (this.indexOf(element) != -1)\n        return result\n        \n    }\n    \n}\n\nif (\"containsAny\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).containsAny = function (this: Array<any>, elements: any[]) {\n        \n        const result = this.anyMatch(function (element, index, array) {\n            return elements.contains(element)\n        })\n        \n        return result\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     contains(element: T): boolean;\n//\n//     containsAny(element: T[]): boolean;\n//\n// }\n\n\nif (\"anyMatch\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).anyMatch = function (\n        this: Array<any>,\n        functionToCall: (value: any, index: number, array: any[]) => boolean\n    ) {\n        \n        // @ts-ignore\n        const result = (this.findIndex(functionToCall) > -1)\n        \n        return result\n        \n    }\n    \n}\n\nif (\"noneMatch\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).noneMatch = function (\n        this: Array<any>,\n        functionToCall: (value: any, index: number, array: any[]) => boolean\n    ) {\n        \n        // @ts-ignore\n        const result = (this.findIndex(functionToCall) == -1)\n        \n        return result\n        \n    }\n    \n}\n\nif (\"allMatch\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).allMatch = function (\n        this: Array<any>,\n        functionToCall: (value: any, index: number, array: any[]) => boolean\n    ) {\n        \n        function reversedFunction(value: any, index: number, array: any[]) {\n            return !functionToCall(value, index, array)\n        }\n        \n        // @ts-ignore\n        const result = (this.findIndex(reversedFunction) == -1)\n        \n        return result\n        \n    }\n    \n}\n\nif (\"findAsyncSequential\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).findAsyncSequential = function (\n        this: Array<any>,\n        functionToCall: (value: any) => Promise<boolean>\n    ) {\n    \n        // https://stackoverflow.com/questions/55601062/using-an-async-function-in-array-find\n        async function findAsyncSequential<T>(\n            array: T[],\n            predicate: (t: T) => Promise<boolean>,\n        ): Promise<T | undefined> {\n            for (const t of array) {\n                if (await predicate(t)) {\n                    return t;\n                }\n            }\n            return undefined;\n        }\n        \n        const result = findAsyncSequential(this, functionToCall);\n        \n        return result\n        \n    }\n    \n}\n\n\n\n// interface Array<T> {\n//\n//     anyMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n//\n//     noneMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n//\n//     allMatch(predicate: (value: T, index: number, obj: T[]) => boolean): boolean\n//\n// }\n\n\nif (\"groupedBy\" in Array.prototype == NO) {\n    \n    Array.prototype.groupedBy = function (this: Array<any>, funcProp) {\n        return this.reduce(function (acc, val) {\n            (acc[funcProp(val)] = acc[funcProp(val)] || []).push(val)\n            return acc\n        }, {})\n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     groupedBy(keyFunction: (item: T) => any): { [key: string]: Array<T> };\n//\n// }\n\n\nif (\"firstElement\" in Array.prototype == NO) {\n    Object.defineProperty(Array.prototype, \"firstElement\", {\n        get: function firstElement(this: Array<any>) {\n            const result = this[0]\n            return result\n        },\n        set: function (this: Array<any>, element: any) {\n            if (this.length == 0) {\n                this.push(element)\n                return\n            }\n            this[0] = element\n        }\n    })\n}\n\nif (\"lastElement\" in Array.prototype == NO) {\n    Object.defineProperty(Array.prototype, \"lastElement\", {\n        get: function lastElement(this: Array<any>) {\n            const result = this[this.length - 1]\n            return result\n        },\n        set: function (this: Array<any>, element: any) {\n            if (this.length == 0) {\n                this.push(element)\n                return\n            }\n            this[this.length - 1] = element\n        }\n    })\n}\n\nif (\"everyElement\" in Array.prototype == NO) {\n    \n    Object.defineProperty(Array.prototype, \"everyElement\", {\n        \n        get: function everyElement(this: Array<any>) {\n            \n            var valueKeys = []\n            \n            const targetFunction = (objects) => {\n                \n                return this.map((element, index, array) => {\n                    \n                    var elementFunction = (UIObject.valueForKeyPath(valueKeys.join(\".\"), element) as Function).bind(\n                        element,\n                        objects\n                    )\n                    \n                    return elementFunction()\n                    \n                })\n                \n            }\n            \n            const result = new Proxy(\n                targetFunction,\n                {\n                    \n                    get: (target, key, receiver) => {\n                        \n                        if (key == \"UI_elementValues\") {\n                            \n                            return this.map((element, index, array) => UIObject.valueForKeyPath(\n                                valueKeys.join(\".\"),\n                                element\n                            ))\n                            \n                        }\n                        \n                        valueKeys.push(key)\n                        \n                        return result\n                        \n                    },\n                    set: (target, key, value, receiver) => {\n                        \n                        valueKeys.push(key)\n                        \n                        this.forEach((element, index, array) => {\n                            \n                            UIObject.setValueForKeyPath(valueKeys.join(\".\"), value, element, YES)\n                            \n                        })\n                        \n                        return true\n                        \n                    }\n                    \n                }\n            )\n            \n            return result\n            \n        },\n        set: function (this: Array<any>, element: any) {\n            \n            for (var i = 0; i < this.length; ++i) {\n                \n                this[i] = element\n                \n            }\n            \n        }\n        \n    })\n    \n}\n\n\nexport type UIEveryElementItem<T> = {\n    \n    [P in keyof T]: UIEveryElementItem<T[P]>\n    \n} & {\n    \n    UI_elementValues?: T[];\n    \n} & T\n\n// interface Array<T> {\n//\n//     firstElement: T;\n//     lastElement: T;\n//\n//     everyElement: UIEveryElementItem<T>;\n//\n// }\n\n\nif (\"copy\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).copy = function (this: Array<any>) {\n        \n        const result = this.slice(0)\n        return result\n        \n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     copy(): Array<T>;\n//\n// }\n\n\nif (\"arrayByRepeating\" in Array.prototype == NO) {\n    \n    (Array.prototype as any).arrayByRepeating = function (this: Array<any>, numberOfRepetitions: number) {\n        const result = []\n        for (var i = 0; i < numberOfRepetitions; i++) {\n            this.forEach(function (element, index, array) {\n                result.push(element)\n            })\n        }\n        return result\n    }\n    \n}\n\n\n// interface Array<T> {\n//\n//     arrayByRepeating(numberOfRepetitions: number): Array<T>;\n//\n// }\n\n\nif (\"arrayByTrimmingToLengthIfLonger\" in Array.prototype == NO) {\n    (Array.prototype as any).arrayByTrimmingToLengthIfLonger = function (this: Array<any>, maxLength: number) {\n        const result = []\n        for (var i = 0; i < maxLength && i < this.length; i++) {\n            result.push(this[i])\n        }\n        return result\n    }\n}\n\n\n// interface Array<T> {\n//\n//     arrayByTrimmingToLengthIfLonger(maxLength: number): Array<T>;\n//\n// }\n\n\nif (\"summedValue\" in Array.prototype == NO) {\n    \n    Object.defineProperty(Array.prototype, \"summedValue\", {\n        get: function summedValue(this: Array<any>) {\n            const result = this.reduce(function (a, b) {\n                return a + b\n            }, 0)\n            return result\n        }\n    })\n    \n}\n\n\n// interface Array<T> {\n//\n//     readonly summedValue: T;\n//\n//     max(): number;\n//     min(): number;\n//\n//\n// }\n\nArray.prototype.max = function () {\n    return Math.max.apply(null, this)\n}\n\nArray.prototype.min = function () {\n    return Math.min.apply(null, this)\n}\n\n\n// interface Array<T> {\n//\n//     isEqualToArray(array: Array<T>, keyPath?: string): boolean;\n//\n// }\n\n// Warn if overriding existing method\nif (\"isEqualToArray\" in Array.prototype == YES) {\n    console.warn(\n        \"Overriding existing Array.prototype.isEqualToArray. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\")\n}\n// attach the .equals method to Array's prototype to call it on any array\nArray.prototype.isEqualToArray = function (array: any[], keyPath?: string) {\n    \n    // if the other array is a falsy value, return\n    if (!array) {\n        return false\n    }\n    \n    // compare lengths - can save a lot of time \n    if (this.length != array.length) {\n        return false\n    }\n    \n    var i = 0\n    const l = this.length\n    for (; i < l; i++) {\n        \n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array && !keyPath) {\n            \n            // recurse into the nested arrays\n            if (!this[i].isEqualToArray(array[i])) {\n                return false\n            }\n            \n        }\n        else if (keyPath && UIObject.valueForKeyPath(keyPath, this[i]) != UIObject.valueForKeyPath(keyPath, array[i])) {\n            \n            return false\n            \n        }\n        else if (this[i] != array[i]) {\n            \n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false\n            \n        }\n        \n    }\n    \n    return true\n    \n}\n\n// Hide method from for-in loops\nObject.defineProperty(Array.prototype, \"isEqualToArray\", { enumerable: false })\n\n\n\n\n\nif (\"forEach\" in Object.prototype == NO) {\n    \n    (Object.prototype as any).forEach = function (this: Object, callbackFunction: (value: any, key: string) => void) {\n        const keys = Object.keys(this)\n        keys.forEach(function (key, index, array) {\n            callbackFunction(this[key], key)\n        }.bind(this))\n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"forEach\", { enumerable: false })\n    \n}\n\n\n// interface Object {\n//\n//     forEach(callbackFunction: (value: any, key: string) => void): void;\n//\n// }\n\n\nif (\"allValues\" in Object.prototype == NO) {\n    Object.defineProperty(Object.prototype, \"allValues\", {\n        get: function (this: Object) {\n            const values = []\n            this.forEach(function (value: any) {\n                values.push(value)\n            })\n            return values\n        }\n    })\n}\n\n\n// interface Object {\n//\n//     readonly allValues: Array<any>;\n//\n// }\n\n\nif (\"allKeys\" in Object.prototype == NO) {\n    Object.defineProperty(Object.prototype, \"allKeys\", {\n        get: function (this: Object) {\n            const values = Object.keys(this)\n            return values\n        }\n    })\n}\n\n\n// interface Object {\n//\n//     readonly allKeys: string[];\n//\n// }\n\n\nif (\"objectByCopyingValuesRecursivelyFromObject\" in Object.prototype == NO) {\n    \n    (Object.prototype as any).objectByCopyingValuesRecursivelyFromObject = function (this: Object, object: any) {\n        \n        \n        function isAnObject(item: any) {\n            return (item && typeof item === \"object\" && !Array.isArray(item))\n        }\n        \n        function mergeRecursively(target: any, source: any) {\n            \n            const output = Object.assign({}, target)\n            \n            if (isAnObject(target) && isAnObject(source)) {\n                \n                Object.keys(source).forEach(function (key) {\n                    \n                    if (isAnObject(source[key])) {\n                        \n                        // if (!(key in target)) {\n                        \n                        //     Object.assign(output, { [key]: source[key] });\n                        \n                        // }\n                        // else {\n                        \n                        output[key] = mergeRecursively(target[key], source[key])\n                        \n                        //}\n                        \n                    }\n                    else {\n                        \n                        Object.assign(output, { [key]: source[key] })\n                        \n                    }\n                    \n                })\n                \n            }\n            \n            return output\n            \n        }\n        \n        const result = mergeRecursively(this, object)\n        \n        return result\n        \n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"objectByCopyingValuesRecursivelyFromObject\", { enumerable: false })\n    \n}\n\n\nif (\"asValueObject\" in Object.prototype == NO) {\n    \n    (Object.prototype as any).asValueObject = function () {\n        \n        const result = new UICoreExtensionValueObject(this)\n        \n        return result\n        \n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"asValueObject\", { enumerable: false })\n    \n}\n\n\n// interface Object {\n//\n//     objectByCopyingValuesRecursivelyFromObject<T>(object: T): this & T;\n//\n//     asValueObject(): this;\n//\n// }\n\nexport type Unpacked<T> =\n    T extends (infer U)[]\n        ? U\n        : T extends (...args: any[]) => infer U\n            ? U\n            : T extends Promise<infer U>\n                ? U\n                : T\n\nexport type UnpackedObject<T> = {\n    [P in keyof T]: Unpacked<T[P]>\n}\n\nexport function promisedProperties<ObjectType extends object>(object: ObjectType): UnpackedObject<ObjectType> {\n    \n    let promisedProperties = []\n    const objectKeys = Object.keys(object)\n    \n    objectKeys.forEach((key) => promisedProperties.push(object[key]))\n    \n    // @ts-ignore\n    return Promise.all(promisedProperties)\n        .then((resolvedValues) => {\n            return resolvedValues.reduce((resolvedObject, property, index) => {\n                resolvedObject[objectKeys[index]] = property\n                return resolvedObject\n            }, object)\n        })\n    \n}\n\n// if (\"promisedProperties\" in Object.prototype == NO) {\n//\n//     (Object.prototype as any).promisedProperties = function () {\n//\n//         const result = promisedProperties(this);\n//\n//         return result\n//\n//     }\n//\n//     // Hide method from for-in loops\n//     Object.defineProperty(Object.prototype, \"promisedProperties\", { enumerable: false });\n//\n// }\n//\n//\n// interface Object {\n//\n//     readonly promisedProperties: UnpackedObject<this>;\n//\n// }\n\n\nif (\"contains\" in String.prototype == NO) {\n    \n    (String.prototype as any).contains = function (this: String, string) {\n        \n        const result = (this.indexOf(string) != -1)\n        return result\n        \n    }\n    \n    // Hide method from for-in loops\n    Object.defineProperty(Object.prototype, \"contains\", { enumerable: false })\n    \n}\n\n\n// interface String {\n//\n//     contains(string): boolean;\n//\n// }\n\n\nif (\"capitalizedString\" in String.prototype == NO) {\n    Object.defineProperty(Object.prototype, \"capitalizedString\", {\n        get: function (this: String) {\n            const result = this.charAt(0).toUpperCase() + this.slice(1).toLowerCase()\n            return result\n        }\n    })\n}\n\n\n// interface String {\n//\n//     readonly capitalizedString: string;\n//\n// }\n\n\nif (\"numericalValue\" in String.prototype == NO) {\n    Object.defineProperty(String.prototype, \"numericalValue\", {\n        get: function numericalValue(this: string) {\n            const result = Number(this)\n            return result\n        }\n    })\n}\n\n\n// interface String {\n//\n//     readonly numericalValue: number;\n//\n// }\n\n\nif (\"isAString\" in String.prototype == NO) {\n    \n    (String.prototype as any).isAString = YES\n    \n}\n\n\n// interface String {\n//\n//     isAString: boolean;\n//\n// }\n\n\nif (\"isANumber\" in Number.prototype == NO) {\n    \n    (Number.prototype as any).isANumber = YES\n    \n}\n\n\n// interface Number {\n//\n//     isANumber: boolean;\n//\n// }\n\n\n\n\n\nif (\"integerValue\" in Number.prototype == NO) {\n    Object.defineProperty(Number.prototype, \"integerValue\", {\n        get: function (this: number) {\n            const result = parseInt(\"\" + (Math.round(this) + 0.5))\n            return result\n        }\n    })\n}\n\n\n// interface Number {\n//\n//     readonly integerValue: number;\n//\n// }\n\n\n\nexport class PrimitiveNumber {\n    \n    // @ts-ignore\n    static [Symbol.hasInstance](x) {\n        return\n    }\n    \n}\n\n\nif (\"integerValue\" in Boolean.prototype == NO) {\n    \n    Object.defineProperty(Boolean.prototype, \"integerValue\", {\n        get: function (this: boolean) {\n            \n            if (this == true) {\n                \n                return 1\n                \n            }\n            \n            return 0\n            \n        }\n    })\n    \n}\n\n\n// interface Boolean {\n//\n//     readonly integerValue: number;\n//\n// }\n\n\nif (\"dateString\" in Date.prototype == NO) {\n    \n    Object.defineProperty(Date.prototype, \"dateString\", {\n        get: function dateString(this: Date) {\n            \n            const result = (\"0\" + this.getDate()).slice(-2) + \"-\" + (\"0\" + (this.getMonth() + 1)).slice(-2) + \"-\" +\n                this.getFullYear() + \" \" + (\"0\" + this.getHours()).slice(-2) + \":\" +\n                (\"0\" + this.getMinutes()).slice(-2)\n            \n            return result\n            \n        }\n    })\n    \n    \n    \n}\n\n\n// interface Date {\n//\n//     readonly dateString: string;\n//\n// }\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["promisedProperties"]
}
