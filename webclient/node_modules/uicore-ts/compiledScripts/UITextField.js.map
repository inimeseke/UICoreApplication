{
  "version": 3,
  "sources": ["../scripts/UITextField.ts"],
  "sourcesContent": ["import { UIColor } from \"./UIColor\"\nimport { UICore } from \"./UICore\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { nil, NO, YES } from \"./UIObject\"\nimport { UITextView } from \"./UITextView\"\nimport { UIView, UIViewAddControlEventTargetObject, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UITextField extends UITextView {\n    \n    \n    _placeholderTextKey: string\n    _defaultPlaceholderText: string\n    \n    _viewHTMLElement: HTMLInputElement\n    \n    constructor(elementID?: string, viewHTMLElement = null, type = UITextView.type.textField) {\n        \n        super(elementID, type, viewHTMLElement)\n        \n        this.viewHTMLElement.setAttribute(\"type\", \"text\")\n        \n        this.backgroundColor = UIColor.whiteColor\n        \n        this.addTargetForControlEvent(\n            UIView.controlEvent.PointerUpInside,\n            (sender, event) => sender.focus()\n        )\n        \n        this.viewHTMLElement.oninput = (event) => {\n            this.sendControlEventForKey(UITextField.controlEvent.TextChange, event)\n        }\n        \n        \n        this.style.webkitUserSelect = \"text\"\n        \n        this.nativeSelectionEnabled = YES\n        \n        this.pausesPointerEvents = NO\n        \n        \n    }\n    \n    \n    \n    \n    static controlEvent = Object.assign({}, UIView.controlEvent, {\n        \n        \n        \"TextChange\": \"TextChange\"\n        \n        \n    })\n    \n    \n    \n    \n    \n    get addControlEventTarget(): UIViewAddControlEventTargetObject<typeof UITextField.controlEvent> {\n        \n        // @ts-ignore\n        return super.addControlEventTarget as any;\n        \n    }\n    \n    public get viewHTMLElement() {\n        return this._viewHTMLElement\n    }\n    \n    \n    \n    public set text(text: string) {\n        \n        this.viewHTMLElement.value = text\n        \n    }\n    \n    \n    public get text(): string {\n        \n        return this.viewHTMLElement.value\n        \n    }\n    \n    \n    public set placeholderText(text: string) {\n        \n        this.viewHTMLElement.placeholder = text\n        \n    }\n    \n    \n    public get placeholderText(): string {\n        \n        return this.viewHTMLElement.placeholder\n        \n    }\n    \n    \n    setPlaceholderText(key: string, defaultString: string) {\n        \n        this._placeholderTextKey = key\n        this._defaultPlaceholderText = defaultString\n        \n        const languageName = UICoreValues.languageService.currentLanguageKey\n        this.placeholderText = UICoreValues.languageService.stringForKey(key, languageName, defaultString, nil)\n        \n    }\n    \n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==\n            UIView.broadcastEventName.AddedToViewTree) {\n            \n            this._setPlaceholderFromKeyIfPossible()\n            \n        }\n        \n    }\n    \n    \n    willMoveToSuperview(superview: UIView) {\n        \n        super.willMoveToSuperview(superview)\n        \n        this._setPlaceholderFromKeyIfPossible()\n        \n    }\n    \n    _setPlaceholderFromKeyIfPossible() {\n        \n        if (this._placeholderTextKey && this._defaultPlaceholderText) {\n            \n            this.setPlaceholderText(this._placeholderTextKey, this._defaultPlaceholderText)\n            \n        }\n        \n    }\n    \n    \n    public get isSecure(): boolean {\n        \n        const result = (this.viewHTMLElement.type == \"password\")\n        \n        return result\n        \n    }\n    \n    \n    \n    public set isSecure(secure: boolean) {\n        \n        var type = \"text\"\n        \n        if (secure) {\n            \n            type = \"password\"\n            \n        }\n        \n        this.viewHTMLElement.type = type\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAwB;AAExB,0BAA6B;AAC7B,sBAA6B;AAC7B,wBAA2B;AAC3B,oBAAgF;AAMzE,MAAM,eAAN,cAA0B,6BAAW;AAAA,EAQxC,YAAY,WAAoB,kBAAkB,MAAM,OAAO,6BAAW,KAAK,WAAW;AAEtF,UAAM,WAAW,MAAM,eAAe;AAEtC,SAAK,gBAAgB,aAAa,QAAQ,MAAM;AAEhD,SAAK,kBAAkB,uBAAQ;AAE/B,SAAK;AAAA,MACD,qBAAO,aAAa;AAAA,MACpB,CAAC,QAAQ,UAAU,OAAO,MAAM;AAAA,IACpC;AAEA,SAAK,gBAAgB,UAAU,CAAC,UAAU;AACtC,WAAK,uBAAuB,aAAY,aAAa,YAAY,KAAK;AAAA,IAC1E;AAGA,SAAK,MAAM,mBAAmB;AAE9B,SAAK,yBAAyB;AAE9B,SAAK,sBAAsB;AAAA,EAG/B;AAAA,EAiBA,IAAI,wBAA4F;AAG5F,WAAO,MAAM;AAAA,EAEjB;AAAA,EAEA,IAAW,kBAAkB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EAIA,IAAW,KAAK,MAAc;AAE1B,SAAK,gBAAgB,QAAQ;AAAA,EAEjC;AAAA,EAGA,IAAW,OAAe;AAEtB,WAAO,KAAK,gBAAgB;AAAA,EAEhC;AAAA,EAGA,IAAW,gBAAgB,MAAc;AAErC,SAAK,gBAAgB,cAAc;AAAA,EAEvC;AAAA,EAGA,IAAW,kBAA0B;AAEjC,WAAO,KAAK,gBAAgB;AAAA,EAEhC;AAAA,EAGA,mBAAmB,KAAa,eAAuB;AAEnD,SAAK,sBAAsB;AAC3B,SAAK,0BAA0B;AAE/B,UAAM,eAAe,iCAAa,gBAAgB;AAClD,SAAK,kBAAkB,iCAAa,gBAAgB,aAAa,KAAK,cAAc,eAAe,mBAAG;AAAA,EAE1G;AAAA,EAIA,yBAAyB,OAA6B;AAElD,UAAM,yBAAyB,KAAK;AAEpC,QAAI,MAAM,QAAQ,qBAAO,mBAAmB,mBAAmB,MAAM,QACjE,qBAAO,mBAAmB,iBAAiB;AAE3C,WAAK,iCAAiC;AAAA,IAE1C;AAAA,EAEJ;AAAA,EAGA,oBAAoB,WAAmB;AAEnC,UAAM,oBAAoB,SAAS;AAEnC,SAAK,iCAAiC;AAAA,EAE1C;AAAA,EAEA,mCAAmC;AAE/B,QAAI,KAAK,uBAAuB,KAAK,yBAAyB;AAE1D,WAAK,mBAAmB,KAAK,qBAAqB,KAAK,uBAAuB;AAAA,IAElF;AAAA,EAEJ;AAAA,EAGA,IAAW,WAAoB;AAE3B,UAAM,SAAU,KAAK,gBAAgB,QAAQ;AAE7C,WAAO;AAAA,EAEX;AAAA,EAIA,IAAW,SAAS,QAAiB;AAEjC,QAAI,OAAO;AAEX,QAAI,QAAQ;AAER,aAAO;AAAA,IAEX;AAEA,SAAK,gBAAgB,OAAO;AAAA,EAEhC;AAMJ;AApKO,IAAM,cAAN;AAAM,YAsCF,eAAe,OAAO,OAAO,CAAC,GAAG,qBAAO,cAAc;AAAA,EAGzD,cAAc;AAGlB,CAAC;",
  "names": []
}
