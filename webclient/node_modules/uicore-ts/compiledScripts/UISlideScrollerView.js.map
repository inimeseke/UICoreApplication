{
  "version": 3,
  "sources": ["../scripts/UISlideScrollerView.ts"],
  "sourcesContent": ["import { UIButton } from \"./UIButton\"\nimport { UIColor } from \"./UIColor\"\nimport { UICore } from \"./UICore\"\nimport { UICoreValues } from \"./UICoreValues\"\nimport { IS, nil, NO, YES } from \"./UIObject\"\nimport { UIRectangle } from \"./UIRectangle\"\nimport { UIScrollView } from \"./UIScrollView\"\nimport { UITimer } from \"./UITimer\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\nexport class UISlideScrollerView extends UIView {\n    \n    \n    \n    _previousLayoutBounds: UIRectangle\n    _targetIndex: number = 0\n    pageIndicatorsView: UIView\n    _isAnimating: boolean = NO\n    _isAnimationOngoing: boolean = NO\n    _animationTimer: UITimer = nil\n    _scrollView: UIScrollView\n    _slideViews: UIView[] = []\n    \n    wrapAround: boolean = YES\n    \n    animationDuration: number = 0.35\n    animationDelay: number = 2\n    \n    _currentPageIndex: number = 0\n    \n    constructor(elementID: string, viewHTMLElement?: HTMLElement) {\n        \n        super(elementID, viewHTMLElement)\n        \n        this._scrollView = new UIScrollView(elementID + \"ScrollView\")\n        \n        this.addSubview(this._scrollView)\n        \n        \n        this._scrollView._scrollEnabled = NO\n        \n        this._scrollView.addTargetForControlEvent(\n            UIView.controlEvent.PointerMove,\n            function (sender: UIView, event: Event) {\n                \n                if (event instanceof MouseEvent) {\n                    this._animationTimer.invalidate()\n                }\n                \n            }.bind(this)\n        )\n        \n        this._scrollView.addTargetForControlEvent(UIView.controlEvent.PointerLeave, function () {\n            \n            if (this._isAnimating && event instanceof MouseEvent) {\n                this.startAnimating()\n            }\n            \n        }.bind(this))\n        \n        // Touch events\n        this._scrollView.addTargetForControlEvent(UIView.controlEvent.PointerDown, function (sender, event) {\n            \n            if (event instanceof TouchEvent) {\n                this._animationTimer.invalidate()\n            }\n            \n        }.bind(this))\n        \n        this._scrollView.addTargetForControlEvents([\n            UIView.controlEvent.PointerUp, UIView.controlEvent.PointerCancel\n        ], function (sender, event) {\n            \n            if (event instanceof TouchEvent && this._isAnimating) {\n                \n                this.startAnimating()\n                \n            }\n            \n        }.bind(this))\n        \n        \n        // Page indicator\n        \n        this.pageIndicatorsView = new UIView(elementID + \"PageIndicatorsView\")\n        this.addSubview(this.pageIndicatorsView)\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    buttonForPageIndicatorWithIndex(index: number): UIButton {\n    \n        const result = new UIButton(this.viewHTMLElement.id + \"PageIndicatorButton\" + index)\n    \n        result.addTargetForControlEvents([\n            UIView.controlEvent.PointerUpInside, UIView.controlEvent.EnterUp\n        ], function (sender, event) {\n            \n            this.scrollToPageWithIndex(index, YES)\n            \n            if (this._isAnimating) {\n                \n                this.startAnimating()\n                \n            }\n            \n            \n            \n        }.bind(this))\n        \n        result.addTargetForControlEvent(UIView.controlEvent.PointerMove, function () {\n            \n            this._animationTimer.invalidate()\n            \n        }.bind(this))\n        \n        \n        result.updateContentForNormalState = function () {\n            \n            result.backgroundColor = UIColor.blueColor\n            result.titleLabel.textColor = UIColor.whiteColor\n            \n        }\n        \n        \n        result.frame = new UIRectangle(nil, nil, 20, 50)\n        \n        // result.style.height = \"20px\";\n        // result.style.width = \"50px\";\n        result.style.display = \"table-cell\"\n        result.style.position = \"relative\"\n        \n        \n        // var resultContent = new UIView(result.viewHTMLElement.id + \"Content\");\n        // resultContent.backgroundColor = UIColor.whiteColor;\n        // resultContent.centerYInContainer();\n        // resultContent.style.height = \"10px\";\n        // resultContent.style.height = \"100%\";\n        // resultContent.style.borderRadius = \"5px\";\n        \n        // result.addSubview(resultContent);\n        \n        \n        return result\n        \n    }\n    \n    \n    \n    addSlideView(view: UIView) {\n        \n        this.slideViews.push(view)\n        \n        this.updateSlideViews()\n        \n    }\n    \n    set slideViews(views: UIView[]) {\n        \n        this._slideViews = views\n        \n        this.updateSlideViews()\n        \n    }\n    \n    get slideViews() {\n        return this._slideViews\n    }\n    \n    \n    \n    get currentPageIndex() {\n    \n        const result = this._currentPageIndex\n    \n        return result\n        \n    }\n    \n    set currentPageIndex(index: number) {\n        \n        this._currentPageIndex = index\n        \n        this._slideViews[index].willAppear()\n        \n        //this._scrollView.contentOffset.x = -this._slideViews[index].frame.min.x; //-this.bounds.width * index;\n        //this._scrollView.contentOffset.x = Math.round(this._scrollView.contentOffset.x);\n        \n        this._scrollView.contentOffset = this._scrollView.contentOffset.pointWithX(-this._slideViews[index].frame.min.x)\n        \n        \n        this.pageIndicatorsView.subviews.forEach(function (button: UIButton, index, array) {\n            \n            button.selected = NO\n            \n        });\n        \n        \n        \n        (this.pageIndicatorsView.subviews[index] as UIButton).selected = YES\n        \n        \n        \n    }\n    \n    \n    \n    scrollToPreviousPage(animated: boolean) {\n        \n        if (this.slideViews.length == 0) {\n            return\n        }\n    \n        var targetIndex = this.currentPageIndex\n    \n        if (this.wrapAround) {\n            targetIndex = (this.currentPageIndex - 1) % (this.slideViews.length)\n        }\n        else if (this.currentPageIndex - 1 < this.slideViews.length) {\n            targetIndex = this.currentPageIndex - 1\n        }\n        else {\n            return\n        }\n        \n        this.scrollToPageWithIndex(targetIndex, animated)\n        \n    }\n    \n    scrollToNextPage(animated: boolean) {\n        \n        if (this.slideViews.length == 0) {\n            return\n        }\n    \n        var targetIndex = this.currentPageIndex\n    \n        if (this.wrapAround) {\n            targetIndex = (this.currentPageIndex + 1) % (this.slideViews.length)\n        }\n        else if (this.currentPageIndex + 1 < this.slideViews.length) {\n            targetIndex = this.currentPageIndex + 1\n        }\n        else {\n            return\n        }\n        \n        this.scrollToPageWithIndex(targetIndex, animated)\n        \n    }\n    \n    \n    \n    scrollToPageWithIndex(targetIndex: number, animated: boolean = YES) {\n        \n        this._targetIndex = targetIndex\n        \n        // this._slideViews[this.currentPageIndex]._shouldLayout = NO;\n        // this._slideViews[this._targetIndex]._shouldLayout = YES;\n        \n        //this._slideViews[this._targetIndex].hidden = NO;\n        \n        this.willScrollToPageWithIndex(targetIndex)\n        \n        this._isAnimationOngoing = YES\n        \n        //var previousView = this._slideViews[this.currentPageIndex];\n        \n        if (animated) {\n            \n            \n            \n            UIView.animateViewOrViewsWithDurationDelayAndFunction(\n                this._scrollView.containerView,\n                this.animationDuration,\n                0,\n                undefined,\n                function (this: UISlideScrollerView) {\n                    \n                    \n                    this.currentPageIndex = targetIndex\n                    \n                    \n                    \n                }.bind(this),\n                function (this: UISlideScrollerView) {\n                    \n                    this.didScrollToPageWithIndex(targetIndex)\n                    \n                    this._isAnimationOngoing = NO\n                    \n                    //previousView.hidden = YES;\n                    \n                }.bind(this)\n            )\n            \n        }\n        else {\n            \n            \n            this.currentPageIndex = targetIndex\n            this.didScrollToPageWithIndex(targetIndex)\n            \n            //previousView.hidden = YES;\n            \n        }\n        \n    }\n    \n    \n    \n    willScrollToPageWithIndex(index: number) {\n    \n        const targetView = this.slideViews[index]\n    \n        if (IS(targetView) && (targetView as any).willAppear && (targetView as any).willAppear instanceof Function) {\n            \n            (targetView as any).willAppear()\n            \n        }\n        \n    }\n    \n    didScrollToPageWithIndex(index: number) {\n        \n        \n        \n    }\n    \n    \n    \n    startAnimating() {\n        \n        this._isAnimating = YES\n        \n        this._animationTimer.invalidate()\n        \n        this._animationTimer = new UITimer(this.animationDelay + this.animationDuration, YES, function () {\n            \n            this.scrollToNextPage(YES)\n            \n        }.bind(this))\n        \n    }\n    \n    stopAnimating() {\n        \n        this._isAnimating = NO\n        this._animationTimer.invalidate()\n        \n    }\n    \n    \n    \n    \n    \n    updateSlideViews() {\n        \n        this._scrollView.containerView.subviews.slice().forEach(function (subview, index, array) {\n            \n            subview.removeFromSuperview()\n            \n        })\n        \n        this.pageIndicatorsView.subviews.slice().forEach(function (subview, index, array) {\n            \n            subview.removeFromSuperview()\n            \n        })\n        \n        this._slideViews.forEach(function (view, index, array) {\n            \n            this._scrollView.addSubview(view)\n            \n            this.pageIndicatorsView.addSubview(this.buttonForPageIndicatorWithIndex(index))\n            \n        }.bind(this))\n        \n    }\n    \n    \n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        super.didReceiveBroadcastEvent(event)\n        \n        if (event.name == UICoreValues.broadcastEventName.WindowDidResize) {\n            \n            this.currentPageIndex = this.currentPageIndex\n            \n            \n        }\n        \n        \n    }\n    \n    \n    set frame(frame: UIRectangle) {\n        \n        super.frame = frame\n        \n        this.currentPageIndex = this.currentPageIndex\n        \n    }\n    \n    get frame() {\n        \n        return super.frame\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n        \n        if (this.bounds.isEqualTo(this._previousLayoutBounds)) {\n            return\n        }\n    \n        const bounds = this.bounds\n    \n        this._previousLayoutBounds = bounds\n        \n        this._scrollView.frame = bounds\n        \n        \n        \n        this._scrollView.containerView.frame = bounds.rectangleWithWidth(bounds.width *\n            this.slideViews.length).performFunctionWithSelf(function (this: UISlideScrollerView, self: UIRectangle) {\n            \n            self.offsetByPoint(this._scrollView.contentOffset)\n            \n            return self\n            \n        }.bind(this))\n        \n        this._slideViews.forEach(function (view, index, array) {\n            \n            view.frame = bounds.rectangleWithX((this.bounds.width + 1) * index)\n            \n        }.bind(this))\n        \n        \n        this.layoutPageIndicators()\n        \n        \n    }\n    \n    \n    layoutPageIndicators() {\n        \n        this.pageIndicatorsView.centerXInContainer()\n        this.pageIndicatorsView.style.bottom = \"20px\"\n        this.pageIndicatorsView.style.height = \"20px\"\n        this.pageIndicatorsView.style.display = \"table-row\"\n        \n    }\n    \n    \n    \n    \n    removeFromSuperview() {\n        \n        \n        super.removeFromSuperview()\n        \n        this.stopAnimating()\n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["event", "index"]
}
