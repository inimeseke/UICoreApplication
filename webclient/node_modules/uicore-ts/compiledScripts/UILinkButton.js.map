{
  "version": 3,
  "sources": ["../scripts/UILinkButton.ts"],
  "sourcesContent": ["import { UIButton, UIButtonColorSpecifier } from \"./UIButton\"\nimport { UILink } from \"./UILink\"\n\n\n\n\nexport class UILinkButton extends UILink {\n    \n    \n    button: UIButton\n    \n    //link = new UILink(this.elementID + \"Link\");\n    \n    \n    \n    \n    \n    constructor(elementID: string, elementType?: string, titleType?: string) {\n        \n        super(elementID, { \"elementType\": elementType, \"titleType\": titleType })\n        \n        this.button.addTargetForControlEvents([\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\n        ], function (this: UILinkButton, sender: UIButton, event: Event) {\n    \n            window.location = this.target as any\n            \n        }.bind(this))\n        \n        // this.link.hidden = YES;\n        \n        // this.addSubview(this.link);\n        \n        \n    }\n    \n    \n    \n    \n    \n    initView(elementID, viewHTMLElement, initViewData: { titleType: string, elementType: string }) {\n        \n        super.initView(elementID, viewHTMLElement, initViewData)\n        \n        this.class.superclass = UILink\n        \n        // Instance variables\n        \n        this.button = new UIButton(this.elementID + \"Button\", initViewData.elementType, initViewData.titleType)\n        \n        this.addSubview(this.button)\n        \n        this.style.position = \"absolute\"\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n    \n    \n    get titleLabel() {\n        \n        return this.button.titleLabel\n        \n    }\n    \n    get imageView() {\n        \n        return this.button.imageView\n        \n    }\n    \n    \n    set colors(colors: UIButtonColorSpecifier) {\n        \n        this.button.colors = colors\n        \n    }\n    \n    \n    get colors() {\n        \n        return this.button.colors\n        \n    }\n    \n    \n    \n    \n    \n    get viewHTMLElement() {\n        \n        // @ts-ignore\n        return super.viewHTMLElement as HTMLLinkElement\n        \n    }\n    \n    \n    set target(target: string) {\n        \n        this.viewHTMLElement.setAttribute(\"href\", target)\n        \n    }\n    \n    get target() {\n    \n        const result = this.viewHTMLElement.getAttribute(\"href\")\n    \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    layoutSubviews() {\n        \n        super.layoutSubviews()\n    \n        const bounds = this.bounds\n    \n        this.button.frame = bounds\n        \n        this.button.layoutSubviews()\n        \n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiD;AACjD,oBAAuB;AAKhB,MAAM,qBAAqB,qBAAO;AAAA,EAWrC,YAAY,WAAmB,aAAsB,WAAoB;AAErE,UAAM,WAAW,EAAE,eAAe,aAAa,aAAa,UAAU,CAAC;AAEvE,SAAK,OAAO,0BAA0B;AAAA,MAClC,yBAAS,aAAa;AAAA,MAAW,yBAAS,aAAa;AAAA,IAC3D,GAAG,SAA8B,QAAkB,OAAc;AAE7D,aAAO,WAAW,KAAK;AAAA,IAE3B,EAAE,KAAK,IAAI,CAAC;AAAA,EAOhB;AAAA,EAMA,SAAS,WAAW,iBAAiB,cAA0D;AAE3F,UAAM,SAAS,WAAW,iBAAiB,YAAY;AAEvD,SAAK,MAAM,aAAa;AAIxB,SAAK,SAAS,IAAI,yBAAS,KAAK,YAAY,UAAU,aAAa,aAAa,aAAa,SAAS;AAEtG,SAAK,WAAW,KAAK,MAAM;AAE3B,SAAK,MAAM,WAAW;AAAA,EAM1B;AAAA,EAMA,IAAI,aAAa;AAEb,WAAO,KAAK,OAAO;AAAA,EAEvB;AAAA,EAEA,IAAI,YAAY;AAEZ,WAAO,KAAK,OAAO;AAAA,EAEvB;AAAA,EAGA,IAAI,OAAO,QAAgC;AAEvC,SAAK,OAAO,SAAS;AAAA,EAEzB;AAAA,EAGA,IAAI,SAAS;AAET,WAAO,KAAK,OAAO;AAAA,EAEvB;AAAA,EAMA,IAAI,kBAAkB;AAGlB,WAAO,MAAM;AAAA,EAEjB;AAAA,EAGA,IAAI,OAAO,QAAgB;AAEvB,SAAK,gBAAgB,aAAa,QAAQ,MAAM;AAAA,EAEpD;AAAA,EAEA,IAAI,SAAS;AAET,UAAM,SAAS,KAAK,gBAAgB,aAAa,MAAM;AAEvD,WAAO;AAAA,EAEX;AAAA,EAMA,iBAAiB;AAEb,UAAM,eAAe;AAErB,UAAM,SAAS,KAAK;AAEpB,SAAK,OAAO,QAAQ;AAEpB,SAAK,OAAO,eAAe;AAAA,EAG/B;AAMJ;",
  "names": []
}
