{
  "version": 3,
  "sources": ["../scripts/UIRectangle.ts"],
  "sourcesContent": ["import { FIRST_OR_NIL, IS, IS_NIL, IS_NOT_NIL, nil, NO, UIObject, YES } from \"./UIObject\"\nimport { UIPoint } from \"./UIPoint\"\nimport { UIView } from \"./UIView\"\n\n\n\n\n\nexport class UIRectangle extends UIObject {\n    \n    _isBeingUpdated: boolean\n    rectanglePointDidChange: (b: any) => void\n    max: UIPoint\n    min: UIPoint\n    \n    \n    constructor(x: number = 0, y: number = 0, height: number = 0, width: number = 0) {\n        \n        super()\n        \n        this.min = new UIPoint(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY)\n        this.max = new UIPoint(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY)\n        \n        this.min.didChange = this.rectanglePointDidChange\n        this.max.didChange = this.rectanglePointDidChange\n        \n        this._isBeingUpdated = NO\n        \n        this.min = new UIPoint(x, y)\n        this.max = new UIPoint(x + width, y + height)\n        \n        if (IS_NIL(height)) {\n            this.max.y = height\n        }\n        \n        if (IS_NIL(width)) {\n            this.max.x = width\n        }\n        \n        \n    }\n    \n    \n    \n    \n    \n    copy() {\n        const result = new UIRectangle(this.x, this.y, this.height, this.width)\n        return result\n    }\n    \n    isEqualTo(rectangle: UIRectangle) {\n    \n    \n        const result = (IS(rectangle) && this.min.isEqualTo(rectangle.min) && this.max.isEqualTo(rectangle.max))\n    \n        return result\n        \n    }\n    \n    static zero() {\n    \n        const result = new UIRectangle(0, 0, 0, 0)\n    \n        return result\n        \n    }\n    \n    containsPoint(point: UIPoint) {\n        return this.min.x <= point.x && this.min.y <= point.y &&\n            point.x <= this.max.x && point.y <= this.max.y\n    }\n    \n    updateByAddingPoint(point: UIPoint) {\n        \n        if (!point) {\n            point = new UIPoint(0, 0)\n        }\n        \n        this.beginUpdates()\n    \n        const min = this.min.copy()\n        if (min.x === nil) {\n            min.x = this.max.x\n        }\n        if (min.y === nil) {\n            min.y = this.max.y\n        }\n    \n        const max = this.max.copy()\n        if (max.x === nil) {\n            max.x = this.min.x\n        }\n        if (max.y === nil) {\n            max.y = this.min.y\n        }\n        \n        this.min.x = Math.min(min.x, point.x)\n        this.min.y = Math.min(min.y, point.y)\n        this.max.x = Math.max(max.x, point.x)\n        this.max.y = Math.max(max.y, point.y)\n        \n        this.finishUpdates()\n        \n    }\n    \n    get height() {\n        if (this.max.y === nil) {\n            return nil\n        }\n        return this.max.y - this.min.y\n    }\n    \n    set height(height: number) {\n        this.max.y = this.min.y + height\n    }\n    \n    \n    \n    get width() {\n        if (this.max.x === nil) {\n            return nil\n        }\n        return this.max.x - this.min.x\n    }\n    \n    set width(width: number) {\n        this.max.x = this.min.x + width\n    }\n    \n    \n    \n    get x() {\n        return this.min.x\n    }\n    \n    set x(x: number) {\n        \n        this.beginUpdates()\n    \n        const width = this.width\n        this.min.x = x\n        this.max.x = this.min.x + width\n        \n        this.finishUpdates()\n        \n    }\n    \n    \n    get y() {\n        return this.min.y\n    }\n    \n    \n    set y(y: number) {\n        \n        this.beginUpdates()\n    \n        const height = this.height\n        this.min.y = y\n        this.max.y = this.min.y + height\n        \n        this.finishUpdates()\n        \n    }\n    \n    \n    \n    \n    get topLeft() {\n        \n        return this.min.copy()\n        \n    }\n    \n    get topRight() {\n        return new UIPoint(this.max.x, this.y)\n    }\n    \n    get bottomLeft() {\n        return new UIPoint(this.x, this.max.y)\n    }\n    \n    get bottomRight() {\n        \n        return this.max.copy()\n        \n    }\n    \n    \n    get center() {\n    \n        const result = this.min.copy().add(this.min.to(this.max).scale(0.5))\n    \n        return result\n        \n    }\n    \n    set center(center: UIPoint) {\n    \n        const offset = this.center.to(center)\n        this.offsetByPoint(offset)\n        \n    }\n    \n    offsetByPoint(offset: UIPoint) {\n        \n        this.min.add(offset)\n        this.max.add(offset)\n        \n        return this\n        \n    }\n    \n    \n    \n    concatenateWithRectangle(rectangle: UIRectangle) {\n        \n        this.updateByAddingPoint(rectangle.bottomRight)\n        this.updateByAddingPoint(rectangle.topLeft)\n        \n        return this\n        \n    }\n    \n    \n    \n    \n    \n    intersectionRectangleWithRectangle(rectangle: UIRectangle): UIRectangle {\n    \n    \n        const result = this.copy()\n    \n        result.beginUpdates()\n    \n        const min = result.min\n        if (min.x === nil) {\n            min.x = rectangle.max.x - Math.min(result.width, rectangle.width)\n        }\n        if (min.y === nil) {\n            min.y = rectangle.max.y - Math.min(result.height, rectangle.height)\n        }\n    \n        const max = result.max\n        if (max.x === nil) {\n            max.x = rectangle.min.x + Math.min(result.width, rectangle.width)\n        }\n        if (max.y === nil) {\n            max.y = rectangle.min.y + Math.min(result.height, rectangle.height)\n        }\n        \n        result.min.x = Math.max(result.min.x, rectangle.min.x)\n        result.min.y = Math.max(result.min.y, rectangle.min.y)\n        result.max.x = Math.min(result.max.x, rectangle.max.x)\n        result.max.y = Math.min(result.max.y, rectangle.max.y)\n        \n        \n        if (result.height < 0) {\n    \n            const averageY = (this.center.y + rectangle.center.y) * 0.5\n            result.min.y = averageY\n            result.max.y = averageY\n            \n        }\n        \n        if (result.width < 0) {\n    \n            const averageX = (this.center.x + rectangle.center.x) * 0.5\n            result.min.x = averageX\n            result.max.x = averageX\n            \n        }\n        \n        result.finishUpdates()\n        \n        return result\n        \n    }\n    \n    \n    \n    get area() {\n        const result = this.height * this.width\n        return result\n    }\n    \n    \n    intersectsWithRectangle(rectangle: UIRectangle) {\n        \n        return (this.intersectionRectangleWithRectangle(rectangle).area != 0)\n        \n    }\n    \n    \n    \n    \n    \n    // add some space around the rectangle\n    rectangleWithInsets(left: number, right: number, bottom: number, top: number) {\n        const result = this.copy()\n        result.min.x = this.min.x + left\n        result.max.x = this.max.x - right\n        result.min.y = this.min.y + top\n        result.max.y = this.max.y - bottom\n        return result\n    }\n    \n    rectangleWithInset(inset: number) {\n        const result = this.rectangleWithInsets(inset, inset, inset, inset)\n        return result\n    }\n    \n    rectangleWithHeight(height: number, centeredOnPosition: number = nil) {\n        \n        if (isNaN(centeredOnPosition)) {\n            centeredOnPosition = nil\n        }\n    \n        const result = this.copy()\n        result.height = height\n        \n        if (centeredOnPosition != nil) {\n            const change = height - this.height\n            result.offsetByPoint(new UIPoint(0, change * centeredOnPosition).scale(-1))\n        }\n        \n        return result\n        \n    }\n    \n    rectangleWithWidth(width: number, centeredOnPosition: number = nil) {\n        \n        if (isNaN(centeredOnPosition)) {\n            centeredOnPosition = nil\n        }\n    \n        const result = this.copy()\n        result.width = width\n        \n        if (centeredOnPosition != nil) {\n            const change = width - this.width\n            result.offsetByPoint(new UIPoint(change * centeredOnPosition, 0).scale(-1))\n        }\n        \n        return result\n        \n    }\n    \n    rectangleWithHeightRelativeToWidth(heightRatio: number = 1, centeredOnPosition: number = nil) {\n    \n        const result = this.rectangleWithHeight(this.width * heightRatio, centeredOnPosition)\n    \n        return result\n        \n    }\n    \n    rectangleWithWidthRelativeToHeight(widthRatio: number = 1, centeredOnPosition: number = nil) {\n    \n        const result = this.rectangleWithWidth(this.height * widthRatio, centeredOnPosition)\n    \n        return result\n        \n    }\n    \n    rectangleWithX(x: number, centeredOnPosition: number = 0) {\n    \n        const result = this.copy()\n        result.x = x - result.width * centeredOnPosition\n        \n        return result\n        \n    }\n    \n    rectangleWithY(y: number, centeredOnPosition: number = 0) {\n    \n        const result = this.copy()\n        result.y = y - result.height * centeredOnPosition\n        \n        return result\n        \n    }\n    \n    \n    \n    rectangleByAddingX(x: number) {\n    \n        const result = this.copy()\n        result.x = this.x + x\n        \n        return result\n        \n    }\n    \n    rectangleByAddingY(y: number) {\n    \n        const result = this.copy()\n        result.y = this.y + y\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    rectanglesBySplittingWidth(\n        weights: number[],\n        paddings: number | number[] = 0,\n        absoluteWidths: number | number[] = nil\n    ) {\n        \n        if (IS_NIL(paddings)) {\n            \n            paddings = 1\n            \n        }\n        \n        if (!(paddings instanceof Array)) {\n            \n            paddings = [paddings].arrayByRepeating(weights.length - 1)\n            \n        }\n        \n        paddings = paddings.arrayByTrimmingToLengthIfLonger(weights.length - 1)\n        \n        if (!(absoluteWidths instanceof Array) && IS_NOT_NIL(absoluteWidths)) {\n            absoluteWidths = [absoluteWidths].arrayByRepeating(weights.length)\n        }\n    \n        const result: UIRectangle[] = []\n        const sumOfWeights = weights.reduce(function (a, b, index) {\n            if (IS_NOT_NIL(absoluteWidths[index])) {\n                b = 0\n            }\n            return a + b\n        }, 0)\n        const sumOfPaddings = paddings.summedValue\n        const sumOfAbsoluteWidths = (absoluteWidths as number[]).summedValue\n        const totalRelativeWidth = this.width - sumOfPaddings - sumOfAbsoluteWidths\n        var previousCellMaxX = this.x\n    \n        for (var i = 0; i < weights.length; i++) {\n    \n            var resultWidth: number\n            if (IS_NOT_NIL(absoluteWidths[i])) {\n                \n                resultWidth = absoluteWidths[i] || 0\n                \n            }\n            else {\n                \n                resultWidth = totalRelativeWidth * (weights[i] / sumOfWeights)\n                \n            }\n    \n            const rectangle = this.rectangleWithWidth(resultWidth)\n    \n            var padding = 0\n            if (paddings.length > i && paddings[i]) {\n                padding = paddings[i]\n            }\n            \n            rectangle.x = previousCellMaxX\n            previousCellMaxX = rectangle.max.x + padding\n            //rectangle = rectangle.rectangleWithInsets(0, padding, 0, 0);\n            result.push(rectangle)\n            \n        }\n        \n        return result\n        \n    }\n    \n    rectanglesBySplittingHeight(\n        weights: number[],\n        paddings: number | number[] = 0,\n        absoluteHeights: number | number[] = nil\n    ) {\n        \n        if (IS_NIL(paddings)) {\n            \n            paddings = 1\n            \n        }\n        \n        if (!(paddings instanceof Array)) {\n            \n            paddings = [paddings].arrayByRepeating(weights.length - 1)\n            \n        }\n        \n        paddings = paddings.arrayByTrimmingToLengthIfLonger(weights.length - 1)\n        \n        if (!(absoluteHeights instanceof Array) && IS_NOT_NIL(absoluteHeights)) {\n            absoluteHeights = [absoluteHeights].arrayByRepeating(weights.length)\n        }\n    \n        const result: UIRectangle[] = []\n        const sumOfWeights = weights.reduce(function (a, b, index) {\n            if (IS_NOT_NIL(absoluteHeights[index])) {\n                b = 0\n            }\n            return a + b\n        }, 0)\n        const sumOfPaddings = paddings.summedValue\n        const sumOfAbsoluteHeights = (absoluteHeights as number[]).summedValue\n        const totalRelativeHeight = this.height - sumOfPaddings - sumOfAbsoluteHeights\n        var previousCellMaxY = this.y\n    \n        for (var i = 0; i < weights.length; i++) {\n            var resultHeight: number\n            if (IS_NOT_NIL(absoluteHeights[i])) {\n                \n                resultHeight = absoluteHeights[i] || 0\n                \n            }\n            else {\n                \n                resultHeight = totalRelativeHeight * (weights[i] / sumOfWeights)\n                \n            }\n    \n            const rectangle = this.rectangleWithHeight(resultHeight)\n    \n            var padding = 0\n            if (paddings.length > i && paddings[i]) {\n                padding = paddings[i]\n            }\n            \n            rectangle.y = previousCellMaxY\n            previousCellMaxY = rectangle.max.y + padding\n            //rectangle = rectangle.rectangleWithInsets(0, 0, padding, 0);\n            result.push(rectangle)\n        }\n        \n        return result\n        \n    }\n    \n    \n    \n    \n    \n    rectanglesByEquallySplittingWidth(numberOfFrames: number, padding: number = 0) {\n        const result: UIRectangle[] = []\n        const totalPadding = padding * (numberOfFrames - 1)\n        const resultWidth = (this.width - totalPadding) / numberOfFrames\n        for (var i = 0; i < numberOfFrames; i++) {\n            const rectangle = this.rectangleWithWidth(resultWidth, i / (numberOfFrames - 1))\n            result.push(rectangle)\n        }\n        return result\n    }\n    \n    rectanglesByEquallySplittingHeight(numberOfFrames: number, padding: number = 0) {\n        const result: UIRectangle[] = []\n        const totalPadding = padding * (numberOfFrames - 1)\n        const resultHeight = (this.height - totalPadding) / numberOfFrames\n        for (var i = 0; i < numberOfFrames; i++) {\n            const rectangle = this.rectangleWithHeight(resultHeight, i / (numberOfFrames - 1))\n            result.push(rectangle)\n        }\n        return result\n    }\n    \n    \n    \n    distributeViewsAlongWidth(\n        views: UIView[],\n        weights: number | number[] = 1,\n        paddings?: number | number[],\n        absoluteWidths?: number | number[]\n    ) {\n        \n        if (!(weights instanceof Array)) {\n            weights = [weights].arrayByRepeating(views.length)\n        }\n    \n        const frames = this.rectanglesBySplittingWidth(weights, paddings, absoluteWidths)\n    \n        frames.forEach((frame, index, array) => FIRST_OR_NIL(views[index]).frame = frame)\n        \n        return this\n        \n    }\n    \n    distributeViewsAlongHeight(\n        views: UIView[],\n        weights: number | number[] = 1,\n        paddings?: number | number[],\n        absoluteHeights?: number | number[]\n    ) {\n        \n        if (!(weights instanceof Array)) {\n            weights = [weights].arrayByRepeating(views.length)\n        }\n    \n        const frames = this.rectanglesBySplittingHeight(weights, paddings, absoluteHeights)\n    \n        frames.forEach((frame, index, array) => FIRST_OR_NIL(views[index]).frame = frame)\n        \n        return this\n        \n    }\n    \n    \n    distributeViewsEquallyAlongWidth(views: UIView[], padding: number) {\n    \n        const frames = this.rectanglesByEquallySplittingWidth(views.length, padding)\n    \n        frames.forEach(function (frame, index, array) {\n            views[index].frame = frame\n        })\n        \n        return this\n        \n    }\n    \n    distributeViewsEquallyAlongHeight(views: UIView[], padding: number) {\n    \n        const frames = this.rectanglesByEquallySplittingHeight(views.length, padding)\n    \n        frames.forEach(function (frame, index, array) {\n            views[index].frame = frame\n        })\n        \n        return this\n        \n    }\n    \n    \n    \n    rectangleForNextRow(padding: number = 0, height = this.height) {\n        const result = this.rectangleWithY(this.max.y + padding)\n        if (height != this.height) {\n            result.height = height\n        }\n        return result\n    }\n    \n    rectangleForNextColumn(padding: number = 0, width = this.width) {\n        const result = this.rectangleWithX(this.max.x + padding)\n        if (width != this.width) {\n            result.width = width\n        }\n        return result\n    }\n    \n    rectangleForPreviousRow(padding: number = 0) {\n        const result = this.rectangleWithY(this.min.y - this.height - padding)\n        return result\n    }\n    \n    rectangleForPreviousColumn(padding: number = 0) {\n        const result = this.rectangleWithX(this.min.x - this.width - padding)\n        return result\n    }\n    \n    \n    \n    // Bounding box\n    static boundingBoxForPoints(points) {\n        const result = new UIRectangle()\n        for (var i = 0; i < points.length; i++) {\n            result.updateByAddingPoint(points[i])\n        }\n        return result\n    }\n    \n    \n    beginUpdates() {\n        this._isBeingUpdated = YES\n    }\n    \n    finishUpdates() {\n        this._isBeingUpdated = NO\n        this.didChange()\n    }\n    \n    \n    didChange() {\n        \n        // Callback to be set by delegate\n        \n    }\n    \n    _rectanglePointDidChange() {\n        \n        if (!this._isBeingUpdated) {\n            \n            this.didChange()\n            \n        }\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA6E;AAC7E,qBAAwB;AAOjB,MAAM,oBAAoB,yBAAS;AAAA,EAQtC,YAAY,IAAY,GAAG,IAAY,GAAG,SAAiB,GAAG,QAAgB,GAAG;AAE7E,UAAM;AAEN,SAAK,MAAM,IAAI,uBAAQ,OAAO,mBAAmB,OAAO,iBAAiB;AACzE,SAAK,MAAM,IAAI,uBAAQ,OAAO,mBAAmB,OAAO,iBAAiB;AAEzE,SAAK,IAAI,YAAY,KAAK;AAC1B,SAAK,IAAI,YAAY,KAAK;AAE1B,SAAK,kBAAkB;AAEvB,SAAK,MAAM,IAAI,uBAAQ,GAAG,CAAC;AAC3B,SAAK,MAAM,IAAI,uBAAQ,IAAI,OAAO,IAAI,MAAM;AAE5C,YAAI,wBAAO,MAAM,GAAG;AAChB,WAAK,IAAI,IAAI;AAAA,IACjB;AAEA,YAAI,wBAAO,KAAK,GAAG;AACf,WAAK,IAAI,IAAI;AAAA,IACjB;AAAA,EAGJ;AAAA,EAMA,OAAO;AACH,UAAM,SAAS,IAAI,YAAY,KAAK,GAAG,KAAK,GAAG,KAAK,QAAQ,KAAK,KAAK;AACtE,WAAO;AAAA,EACX;AAAA,EAEA,UAAU,WAAwB;AAG9B,UAAM,aAAU,oBAAG,SAAS,KAAK,KAAK,IAAI,UAAU,UAAU,GAAG,KAAK,KAAK,IAAI,UAAU,UAAU,GAAG;AAEtG,WAAO;AAAA,EAEX;AAAA,EAEA,OAAO,OAAO;AAEV,UAAM,SAAS,IAAI,YAAY,GAAG,GAAG,GAAG,CAAC;AAEzC,WAAO;AAAA,EAEX;AAAA,EAEA,cAAc,OAAgB;AAC1B,WAAO,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,KAAK,MAAM,KAChD,MAAM,KAAK,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI;AAAA,EACrD;AAAA,EAEA,oBAAoB,OAAgB;AAEhC,QAAI,CAAC,OAAO;AACR,cAAQ,IAAI,uBAAQ,GAAG,CAAC;AAAA,IAC5B;AAEA,SAAK,aAAa;AAElB,UAAM,MAAM,KAAK,IAAI,KAAK;AAC1B,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,KAAK,IAAI;AAAA,IACrB;AACA,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,KAAK,IAAI;AAAA,IACrB;AAEA,UAAM,MAAM,KAAK,IAAI,KAAK;AAC1B,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,KAAK,IAAI;AAAA,IACrB;AACA,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,KAAK,IAAI;AAAA,IACrB;AAEA,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,MAAM,CAAC;AACpC,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,MAAM,CAAC;AACpC,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,MAAM,CAAC;AACpC,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,MAAM,CAAC;AAEpC,SAAK,cAAc;AAAA,EAEvB;AAAA,EAEA,IAAI,SAAS;AACT,QAAI,KAAK,IAAI,MAAM,qBAAK;AACpB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,IAAI,IAAI,KAAK,IAAI;AAAA,EACjC;AAAA,EAEA,IAAI,OAAO,QAAgB;AACvB,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI;AAAA,EAC9B;AAAA,EAIA,IAAI,QAAQ;AACR,QAAI,KAAK,IAAI,MAAM,qBAAK;AACpB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,IAAI,IAAI,KAAK,IAAI;AAAA,EACjC;AAAA,EAEA,IAAI,MAAM,OAAe;AACrB,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI;AAAA,EAC9B;AAAA,EAIA,IAAI,IAAI;AACJ,WAAO,KAAK,IAAI;AAAA,EACpB;AAAA,EAEA,IAAI,EAAE,GAAW;AAEb,SAAK,aAAa;AAElB,UAAM,QAAQ,KAAK;AACnB,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI;AAE1B,SAAK,cAAc;AAAA,EAEvB;AAAA,EAGA,IAAI,IAAI;AACJ,WAAO,KAAK,IAAI;AAAA,EACpB;AAAA,EAGA,IAAI,EAAE,GAAW;AAEb,SAAK,aAAa;AAElB,UAAM,SAAS,KAAK;AACpB,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI,KAAK,IAAI,IAAI;AAE1B,SAAK,cAAc;AAAA,EAEvB;AAAA,EAKA,IAAI,UAAU;AAEV,WAAO,KAAK,IAAI,KAAK;AAAA,EAEzB;AAAA,EAEA,IAAI,WAAW;AACX,WAAO,IAAI,uBAAQ,KAAK,IAAI,GAAG,KAAK,CAAC;AAAA,EACzC;AAAA,EAEA,IAAI,aAAa;AACb,WAAO,IAAI,uBAAQ,KAAK,GAAG,KAAK,IAAI,CAAC;AAAA,EACzC;AAAA,EAEA,IAAI,cAAc;AAEd,WAAO,KAAK,IAAI,KAAK;AAAA,EAEzB;AAAA,EAGA,IAAI,SAAS;AAET,UAAM,SAAS,KAAK,IAAI,KAAK,EAAE,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG,EAAE,MAAM,GAAG,CAAC;AAEnE,WAAO;AAAA,EAEX;AAAA,EAEA,IAAI,OAAO,QAAiB;AAExB,UAAM,SAAS,KAAK,OAAO,GAAG,MAAM;AACpC,SAAK,cAAc,MAAM;AAAA,EAE7B;AAAA,EAEA,cAAc,QAAiB;AAE3B,SAAK,IAAI,IAAI,MAAM;AACnB,SAAK,IAAI,IAAI,MAAM;AAEnB,WAAO;AAAA,EAEX;AAAA,EAIA,yBAAyB,WAAwB;AAE7C,SAAK,oBAAoB,UAAU,WAAW;AAC9C,SAAK,oBAAoB,UAAU,OAAO;AAE1C,WAAO;AAAA,EAEX;AAAA,EAMA,mCAAmC,WAAqC;AAGpE,UAAM,SAAS,KAAK,KAAK;AAEzB,WAAO,aAAa;AAEpB,UAAM,MAAM,OAAO;AACnB,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,UAAU,IAAI,IAAI,KAAK,IAAI,OAAO,OAAO,UAAU,KAAK;AAAA,IACpE;AACA,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,UAAU,IAAI,IAAI,KAAK,IAAI,OAAO,QAAQ,UAAU,MAAM;AAAA,IACtE;AAEA,UAAM,MAAM,OAAO;AACnB,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,UAAU,IAAI,IAAI,KAAK,IAAI,OAAO,OAAO,UAAU,KAAK;AAAA,IACpE;AACA,QAAI,IAAI,MAAM,qBAAK;AACf,UAAI,IAAI,UAAU,IAAI,IAAI,KAAK,IAAI,OAAO,QAAQ,UAAU,MAAM;AAAA,IACtE;AAEA,WAAO,IAAI,IAAI,KAAK,IAAI,OAAO,IAAI,GAAG,UAAU,IAAI,CAAC;AACrD,WAAO,IAAI,IAAI,KAAK,IAAI,OAAO,IAAI,GAAG,UAAU,IAAI,CAAC;AACrD,WAAO,IAAI,IAAI,KAAK,IAAI,OAAO,IAAI,GAAG,UAAU,IAAI,CAAC;AACrD,WAAO,IAAI,IAAI,KAAK,IAAI,OAAO,IAAI,GAAG,UAAU,IAAI,CAAC;AAGrD,QAAI,OAAO,SAAS,GAAG;AAEnB,YAAM,YAAY,KAAK,OAAO,IAAI,UAAU,OAAO,KAAK;AACxD,aAAO,IAAI,IAAI;AACf,aAAO,IAAI,IAAI;AAAA,IAEnB;AAEA,QAAI,OAAO,QAAQ,GAAG;AAElB,YAAM,YAAY,KAAK,OAAO,IAAI,UAAU,OAAO,KAAK;AACxD,aAAO,IAAI,IAAI;AACf,aAAO,IAAI,IAAI;AAAA,IAEnB;AAEA,WAAO,cAAc;AAErB,WAAO;AAAA,EAEX;AAAA,EAIA,IAAI,OAAO;AACP,UAAM,SAAS,KAAK,SAAS,KAAK;AAClC,WAAO;AAAA,EACX;AAAA,EAGA,wBAAwB,WAAwB;AAE5C,WAAQ,KAAK,mCAAmC,SAAS,EAAE,QAAQ;AAAA,EAEvE;AAAA,EAOA,oBAAoB,MAAc,OAAe,QAAgB,KAAa;AAC1E,UAAM,SAAS,KAAK,KAAK;AACzB,WAAO,IAAI,IAAI,KAAK,IAAI,IAAI;AAC5B,WAAO,IAAI,IAAI,KAAK,IAAI,IAAI;AAC5B,WAAO,IAAI,IAAI,KAAK,IAAI,IAAI;AAC5B,WAAO,IAAI,IAAI,KAAK,IAAI,IAAI;AAC5B,WAAO;AAAA,EACX;AAAA,EAEA,mBAAmB,OAAe;AAC9B,UAAM,SAAS,KAAK,oBAAoB,OAAO,OAAO,OAAO,KAAK;AAClE,WAAO;AAAA,EACX;AAAA,EAEA,oBAAoB,QAAgB,qBAA6B,qBAAK;AAElE,QAAI,MAAM,kBAAkB,GAAG;AAC3B,2BAAqB;AAAA,IACzB;AAEA,UAAM,SAAS,KAAK,KAAK;AACzB,WAAO,SAAS;AAEhB,QAAI,sBAAsB,qBAAK;AAC3B,YAAM,SAAS,SAAS,KAAK;AAC7B,aAAO,cAAc,IAAI,uBAAQ,GAAG,SAAS,kBAAkB,EAAE,MAAM,EAAE,CAAC;AAAA,IAC9E;AAEA,WAAO;AAAA,EAEX;AAAA,EAEA,mBAAmB,OAAe,qBAA6B,qBAAK;AAEhE,QAAI,MAAM,kBAAkB,GAAG;AAC3B,2BAAqB;AAAA,IACzB;AAEA,UAAM,SAAS,KAAK,KAAK;AACzB,WAAO,QAAQ;AAEf,QAAI,sBAAsB,qBAAK;AAC3B,YAAM,SAAS,QAAQ,KAAK;AAC5B,aAAO,cAAc,IAAI,uBAAQ,SAAS,oBAAoB,CAAC,EAAE,MAAM,EAAE,CAAC;AAAA,IAC9E;AAEA,WAAO;AAAA,EAEX;AAAA,EAEA,mCAAmC,cAAsB,GAAG,qBAA6B,qBAAK;AAE1F,UAAM,SAAS,KAAK,oBAAoB,KAAK,QAAQ,aAAa,kBAAkB;AAEpF,WAAO;AAAA,EAEX;AAAA,EAEA,mCAAmC,aAAqB,GAAG,qBAA6B,qBAAK;AAEzF,UAAM,SAAS,KAAK,mBAAmB,KAAK,SAAS,YAAY,kBAAkB;AAEnF,WAAO;AAAA,EAEX;AAAA,EAEA,eAAe,GAAW,qBAA6B,GAAG;AAEtD,UAAM,SAAS,KAAK,KAAK;AACzB,WAAO,IAAI,IAAI,OAAO,QAAQ;AAE9B,WAAO;AAAA,EAEX;AAAA,EAEA,eAAe,GAAW,qBAA6B,GAAG;AAEtD,UAAM,SAAS,KAAK,KAAK;AACzB,WAAO,IAAI,IAAI,OAAO,SAAS;AAE/B,WAAO;AAAA,EAEX;AAAA,EAIA,mBAAmB,GAAW;AAE1B,UAAM,SAAS,KAAK,KAAK;AACzB,WAAO,IAAI,KAAK,IAAI;AAEpB,WAAO;AAAA,EAEX;AAAA,EAEA,mBAAmB,GAAW;AAE1B,UAAM,SAAS,KAAK,KAAK;AACzB,WAAO,IAAI,KAAK,IAAI;AAEpB,WAAO;AAAA,EAEX;AAAA,EAMA,2BACI,SACA,WAA8B,GAC9B,iBAAoC,qBACtC;AAEE,YAAI,wBAAO,QAAQ,GAAG;AAElB,iBAAW;AAAA,IAEf;AAEA,QAAI,EAAE,oBAAoB,QAAQ;AAE9B,iBAAW,CAAC,QAAQ,EAAE,iBAAiB,QAAQ,SAAS,CAAC;AAAA,IAE7D;AAEA,eAAW,SAAS,gCAAgC,QAAQ,SAAS,CAAC;AAEtE,QAAI,EAAE,0BAA0B,cAAU,4BAAW,cAAc,GAAG;AAClE,uBAAiB,CAAC,cAAc,EAAE,iBAAiB,QAAQ,MAAM;AAAA,IACrE;AAEA,UAAM,SAAwB,CAAC;AAC/B,UAAM,eAAe,QAAQ,OAAO,SAAU,GAAG,GAAG,OAAO;AACvD,cAAI,4BAAW,eAAe,MAAM,GAAG;AACnC,YAAI;AAAA,MACR;AACA,aAAO,IAAI;AAAA,IACf,GAAG,CAAC;AACJ,UAAM,gBAAgB,SAAS;AAC/B,UAAM,sBAAuB,eAA4B;AACzD,UAAM,qBAAqB,KAAK,QAAQ,gBAAgB;AACxD,QAAI,mBAAmB,KAAK;AAE5B,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAErC,UAAI;AACJ,cAAI,4BAAW,eAAe,EAAE,GAAG;AAE/B,sBAAc,eAAe,MAAM;AAAA,MAEvC,OACK;AAED,sBAAc,sBAAsB,QAAQ,KAAK;AAAA,MAErD;AAEA,YAAM,YAAY,KAAK,mBAAmB,WAAW;AAErD,UAAI,UAAU;AACd,UAAI,SAAS,SAAS,KAAK,SAAS,IAAI;AACpC,kBAAU,SAAS;AAAA,MACvB;AAEA,gBAAU,IAAI;AACd,yBAAmB,UAAU,IAAI,IAAI;AAErC,aAAO,KAAK,SAAS;AAAA,IAEzB;AAEA,WAAO;AAAA,EAEX;AAAA,EAEA,4BACI,SACA,WAA8B,GAC9B,kBAAqC,qBACvC;AAEE,YAAI,wBAAO,QAAQ,GAAG;AAElB,iBAAW;AAAA,IAEf;AAEA,QAAI,EAAE,oBAAoB,QAAQ;AAE9B,iBAAW,CAAC,QAAQ,EAAE,iBAAiB,QAAQ,SAAS,CAAC;AAAA,IAE7D;AAEA,eAAW,SAAS,gCAAgC,QAAQ,SAAS,CAAC;AAEtE,QAAI,EAAE,2BAA2B,cAAU,4BAAW,eAAe,GAAG;AACpE,wBAAkB,CAAC,eAAe,EAAE,iBAAiB,QAAQ,MAAM;AAAA,IACvE;AAEA,UAAM,SAAwB,CAAC;AAC/B,UAAM,eAAe,QAAQ,OAAO,SAAU,GAAG,GAAG,OAAO;AACvD,cAAI,4BAAW,gBAAgB,MAAM,GAAG;AACpC,YAAI;AAAA,MACR;AACA,aAAO,IAAI;AAAA,IACf,GAAG,CAAC;AACJ,UAAM,gBAAgB,SAAS;AAC/B,UAAM,uBAAwB,gBAA6B;AAC3D,UAAM,sBAAsB,KAAK,SAAS,gBAAgB;AAC1D,QAAI,mBAAmB,KAAK;AAE5B,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,UAAI;AACJ,cAAI,4BAAW,gBAAgB,EAAE,GAAG;AAEhC,uBAAe,gBAAgB,MAAM;AAAA,MAEzC,OACK;AAED,uBAAe,uBAAuB,QAAQ,KAAK;AAAA,MAEvD;AAEA,YAAM,YAAY,KAAK,oBAAoB,YAAY;AAEvD,UAAI,UAAU;AACd,UAAI,SAAS,SAAS,KAAK,SAAS,IAAI;AACpC,kBAAU,SAAS;AAAA,MACvB;AAEA,gBAAU,IAAI;AACd,yBAAmB,UAAU,IAAI,IAAI;AAErC,aAAO,KAAK,SAAS;AAAA,IACzB;AAEA,WAAO;AAAA,EAEX;AAAA,EAMA,kCAAkC,gBAAwB,UAAkB,GAAG;AAC3E,UAAM,SAAwB,CAAC;AAC/B,UAAM,eAAe,WAAW,iBAAiB;AACjD,UAAM,eAAe,KAAK,QAAQ,gBAAgB;AAClD,aAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACrC,YAAM,YAAY,KAAK,mBAAmB,aAAa,KAAK,iBAAiB,EAAE;AAC/E,aAAO,KAAK,SAAS;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,mCAAmC,gBAAwB,UAAkB,GAAG;AAC5E,UAAM,SAAwB,CAAC;AAC/B,UAAM,eAAe,WAAW,iBAAiB;AACjD,UAAM,gBAAgB,KAAK,SAAS,gBAAgB;AACpD,aAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACrC,YAAM,YAAY,KAAK,oBAAoB,cAAc,KAAK,iBAAiB,EAAE;AACjF,aAAO,KAAK,SAAS;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EAIA,0BACI,OACA,UAA6B,GAC7B,UACA,gBACF;AAEE,QAAI,EAAE,mBAAmB,QAAQ;AAC7B,gBAAU,CAAC,OAAO,EAAE,iBAAiB,MAAM,MAAM;AAAA,IACrD;AAEA,UAAM,SAAS,KAAK,2BAA2B,SAAS,UAAU,cAAc;AAEhF,WAAO,QAAQ,CAAC,OAAO,OAAO,cAAU,8BAAa,MAAM,MAAM,EAAE,QAAQ,KAAK;AAEhF,WAAO;AAAA,EAEX;AAAA,EAEA,2BACI,OACA,UAA6B,GAC7B,UACA,iBACF;AAEE,QAAI,EAAE,mBAAmB,QAAQ;AAC7B,gBAAU,CAAC,OAAO,EAAE,iBAAiB,MAAM,MAAM;AAAA,IACrD;AAEA,UAAM,SAAS,KAAK,4BAA4B,SAAS,UAAU,eAAe;AAElF,WAAO,QAAQ,CAAC,OAAO,OAAO,cAAU,8BAAa,MAAM,MAAM,EAAE,QAAQ,KAAK;AAEhF,WAAO;AAAA,EAEX;AAAA,EAGA,iCAAiC,OAAiB,SAAiB;AAE/D,UAAM,SAAS,KAAK,kCAAkC,MAAM,QAAQ,OAAO;AAE3E,WAAO,QAAQ,SAAU,OAAO,OAAO,OAAO;AAC1C,YAAM,OAAO,QAAQ;AAAA,IACzB,CAAC;AAED,WAAO;AAAA,EAEX;AAAA,EAEA,kCAAkC,OAAiB,SAAiB;AAEhE,UAAM,SAAS,KAAK,mCAAmC,MAAM,QAAQ,OAAO;AAE5E,WAAO,QAAQ,SAAU,OAAO,OAAO,OAAO;AAC1C,YAAM,OAAO,QAAQ;AAAA,IACzB,CAAC;AAED,WAAO;AAAA,EAEX;AAAA,EAIA,oBAAoB,UAAkB,GAAG,SAAS,KAAK,QAAQ;AAC3D,UAAM,SAAS,KAAK,eAAe,KAAK,IAAI,IAAI,OAAO;AACvD,QAAI,UAAU,KAAK,QAAQ;AACvB,aAAO,SAAS;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,uBAAuB,UAAkB,GAAG,QAAQ,KAAK,OAAO;AAC5D,UAAM,SAAS,KAAK,eAAe,KAAK,IAAI,IAAI,OAAO;AACvD,QAAI,SAAS,KAAK,OAAO;AACrB,aAAO,QAAQ;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,wBAAwB,UAAkB,GAAG;AACzC,UAAM,SAAS,KAAK,eAAe,KAAK,IAAI,IAAI,KAAK,SAAS,OAAO;AACrE,WAAO;AAAA,EACX;AAAA,EAEA,2BAA2B,UAAkB,GAAG;AAC5C,UAAM,SAAS,KAAK,eAAe,KAAK,IAAI,IAAI,KAAK,QAAQ,OAAO;AACpE,WAAO;AAAA,EACX;AAAA,EAKA,OAAO,qBAAqB,QAAQ;AAChC,UAAM,SAAS,IAAI,YAAY;AAC/B,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,aAAO,oBAAoB,OAAO,EAAE;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AAAA,EAGA,eAAe;AACX,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEA,gBAAgB;AACZ,SAAK,kBAAkB;AACvB,SAAK,UAAU;AAAA,EACnB;AAAA,EAGA,YAAY;AAAA,EAIZ;AAAA,EAEA,2BAA2B;AAEvB,QAAI,CAAC,KAAK,iBAAiB;AAEvB,WAAK,UAAU;AAAA,IAEnB;AAAA,EAEJ;AAMJ;",
  "names": []
}
