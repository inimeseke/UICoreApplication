import { UIColor } from "./UIColor";
import { UILocalizedTextObject } from "./UIInterfaces";
import { UIObject } from "./UIObject";
import { UIPoint } from "./UIPoint";
import { UIRectangle } from "./UIRectangle";
import "./UICoreExtensions";
declare module AutoLayout {
    class Constraint {
        [key: string]: any;
    }
    class View {
        [key: string]: any;
    }
    class VisualFormat {
        static parse(arg0: any, arg1: any): any;
        [key: string]: any;
    }
    enum Attribute {
        LEFT,
        RIGHT,
        BOTTOM,
        TOP,
        CENTERX,
        CENTERY,
        WIDTH,
        HEIGHT,
        ZINDEX,
        VARIABLE,
        NOTANATTRIBUTE
    }
    enum Relation {
        EQU,
        LEQ,
        GEQ
    }
}
interface LooseObject {
    [key: string]: any;
}
export interface ControlEventTargetsObject {
    [key: string]: Function[];
}
export interface UIViewBroadcastEvent {
    name: string;
    parameters: {
        [key: string]: string | string[];
    };
}
export declare type UIViewAddControlEventTargetObject<T extends typeof UIView.controlEvent> = {
    [K in keyof T]: ((sender: UIView, event: Event) => void) & Partial<UIViewAddControlEventTargetObject<T>>;
};
export declare class UIView extends UIObject {
    _nativeSelectionEnabled: boolean;
    _shouldLayout: boolean;
    _UITableViewRowIndex: number;
    _UITableViewReusabilityIdentifier: any;
    _UIViewIntrinsicTemporaryWidth: string;
    _UIViewIntrinsicTemporaryHeight: string;
    _enabled: boolean;
    _frame: any;
    _backgroundColor: UIColor;
    _viewHTMLElement: HTMLElement & LooseObject;
    _innerHTMLKey: string;
    _defaultInnerHTML: string;
    _parameters: {
        [x: string]: (string | UILocalizedTextObject);
    };
    _localizedTextObject: UILocalizedTextObject;
    _controlEventTargets: ControlEventTargetsObject;
    _frameTransform: string;
    _viewControllerLayoutFunction: () => void;
    _willLayoutSubviewsDelegateFunction: () => void;
    _didLayoutSubviewsDelegateFunction: () => void;
    _didReceiveBroadcastEventDelegateFunction: (event: UIViewBroadcastEvent) => void;
    _updateLayoutFunction: any;
    _constraints: any[];
    superview: UIView;
    subviews: UIView[];
    _styleClasses: any[];
    _isHidden: boolean;
    pausesPointerEvents: boolean;
    stopsPointerEventPropagation: boolean;
    _isPointerInside: boolean;
    _isPointerValid: boolean;
    _initialPointerPosition: UIPoint;
    _hasPointerDragged: boolean;
    _pointerDragThreshold: number;
    ignoresTouches: boolean;
    ignoresMouse: boolean;
    static _UIViewIndex: number;
    _UIViewIndex: number;
    static _viewsToLayout: UIView[];
    forceIntrinsicSizeZero: boolean;
    _touchEventTime: number;
    static _pageScale: number;
    constructor(elementID?: string, viewHTMLElement?: HTMLElement & LooseObject, elementType?: string, initViewData?: any);
    static get nextIndex(): number;
    static get pageHeight(): number;
    static get pageWidth(): number;
    initView(elementID: string, viewHTMLElement: HTMLElement, initViewData?: any): void;
    centerInContainer(): void;
    centerXInContainer(): void;
    centerYInContainer(): void;
    _initViewHTMLElement(elementID: any, viewHTMLElement: any, elementType?: string): void;
    set nativeSelectionEnabled(selectable: boolean);
    get nativeSelectionEnabled(): boolean;
    get styleClassName(): string;
    _initViewCSSSelectorsIfNeeded(): void;
    initViewStyleSelectors(): void;
    initStyleSelector(selector: any, style: any): void;
    createElement(elementID: any, elementType: any): HTMLElement;
    get viewHTMLElement(): HTMLElement & LooseObject;
    get elementID(): string;
    setInnerHTML(key: string, defaultString: string, parameters?: {
        [x: string]: string | UILocalizedTextObject;
    }): void;
    _setInnerHTMLFromKeyIfPossible(): void;
    _setInnerHTMLFromLocalizedTextObjectIfPossible(): void;
    get localizedTextObject(): UILocalizedTextObject;
    set localizedTextObject(localizedTextObject: UILocalizedTextObject);
    get innerHTML(): string;
    set innerHTML(innerHTML: string);
    set hoverText(hoverText: string);
    get hoverText(): string;
    get scrollSize(): UIRectangle;
    get dialogView(): UIDialogView;
    get rootView(): UIView;
    set enabled(enabled: boolean);
    get enabled(): boolean;
    updateContentForCurrentEnabledState(): void;
    get tabIndex(): number;
    set tabIndex(index: number);
    get styleClasses(): any[];
    set styleClasses(styleClasses: any[]);
    hasStyleClass(styleClass: any): boolean;
    addStyleClass(styleClass: string): void;
    removeStyleClass(styleClass: string): void;
    static findViewWithElementID(elementID: string): UIView;
    static createStyleSelector(selector: any, style: any): void;
    static getStyleRules(selector: any): any;
    get style(): CSSStyleDeclaration;
    get computedStyle(): CSSStyleDeclaration;
    get hidden(): boolean;
    set hidden(v: boolean);
    static set pageScale(scale: number);
    static get pageScale(): number;
    calculateAndSetViewFrame(): void;
    get frame(): UIRectangle;
    set frame(rectangle: UIRectangle);
    setFrame(rectangle: any, zIndex?: number, performUncheckedLayout?: boolean): void;
    get bounds(): UIRectangle;
    set bounds(rectangle: UIRectangle);
    boundsDidChange(): void;
    setPosition(left?: number | string, right?: number | string, bottom?: number | string, top?: number | string, height?: number | string, width?: number | string): void;
    setSizes(height?: number | string, width?: number | string): void;
    setMinSizes(height?: number | string, width?: number | string): void;
    setMaxSizes(height?: number | string, width?: number | string): void;
    setMargin(margin?: number | string): void;
    setMargins(left?: number | string, right?: number | string, bottom?: number | string, top?: number | string): void;
    setPadding(padding?: number | string): void;
    setPaddings(left?: number | string, right?: number | string, bottom?: number | string, top?: number | string): void;
    setBorder(radius?: number | string, width?: number | string, color?: UIColor, style?: string): void;
    setStyleProperty(propertyName: string, value?: number | string): void;
    get userInteractionEnabled(): boolean;
    set userInteractionEnabled(userInteractionEnabled: boolean);
    get backgroundColor(): UIColor;
    set backgroundColor(backgroundColor: UIColor);
    get alpha(): number;
    set alpha(alpha: number);
    static animateViewOrViewsWithDurationDelayAndFunction(viewOrViews: UIView | HTMLElement | UIView[] | HTMLElement[], duration: number, delay: number, timingStyle: string, transformFunction: Function, transitioncompletionFunction: Function): {
        finishImmediately: () => void;
        didFinish: () => void;
        views: HTMLElement | UIView | UIView[] | HTMLElement[];
        registrationTime: number;
    };
    animationDidFinish(): void;
    static _transformAttribute: string;
    static _setAbsoluteSizeAndPosition(element: any, left: any, top: any, width: any, height: any, zIndex?: number): void;
    static performAutoLayout(parentElement: any, visualFormatArray: any, constraintsArray: any): () => void;
    static runFunctionBeforeNextFrame(step: () => void): void;
    static scheduleLayoutViewsIfNeeded(): void;
    static layoutViewsIfNeeded(): void;
    setNeedsLayout(): void;
    get needsLayout(): boolean;
    layoutIfNeeded(): void;
    layoutSubviews(): void;
    applyClassesAndStyles(): void;
    willLayoutSubviews(): void;
    didLayoutSubviews(): void;
    get constraints(): any[];
    set constraints(constraints: any[]);
    addConstraint(constraint: any): void;
    addConstraintsWithVisualFormat(visualFormatArray: any): void;
    static constraintWithView(view: any, attribute: any, relation: any, toView: any, toAttribute: any, multiplier: any, constant: any, priority: any): {
        view1: any;
        attr1: any;
        relation: any;
        view2: any;
        attr2: any;
        multiplier: any;
        constant: any;
        priority: any;
    };
    static constraintAttribute: {
        left: AutoLayout.Attribute;
        right: AutoLayout.Attribute;
        bottom: AutoLayout.Attribute;
        top: AutoLayout.Attribute;
        centerX: AutoLayout.Attribute;
        centerY: AutoLayout.Attribute;
        height: AutoLayout.Attribute;
        width: AutoLayout.Attribute;
        zIndex: AutoLayout.Attribute;
        constant: AutoLayout.Attribute;
        variable: AutoLayout.Attribute;
    };
    static constraintRelation: {
        equal: AutoLayout.Relation;
        lessThanOrEqual: AutoLayout.Relation;
        greaterThanOrEqual: AutoLayout.Relation;
    };
    subviewWithID(viewID: any): any;
    rectangleContainingSubviews(): UIRectangle;
    hasSubview(view: UIView): boolean;
    get viewBelowThisView(): UIView;
    get viewAboveThisView(): UIView;
    addSubview(view: UIView, aboveView?: UIView): void;
    addSubviews(views: UIView[]): void;
    moveToBottomOfSuperview(): void;
    moveToTopOfSuperview(): void;
    removeFromSuperview(): void;
    willAppear(): void;
    willMoveToSuperview(superview: UIView): void;
    didMoveToSuperview(superview: UIView): void;
    wasAddedToViewTree(): void;
    wasRemovedFromViewTree(): void;
    get isMemberOfViewTree(): boolean;
    get allSuperviews(): any[];
    setNeedsLayoutOnAllSuperviews(): void;
    setNeedsLayoutUpToRootView(): void;
    focus(): void;
    blur(): void;
    _loadUIEvents(): void;
    static controlEvent: {
        PointerDown: string;
        PointerMove: string;
        PointerLeave: string;
        PointerEnter: string;
        PointerUpInside: string;
        PointerTap: string;
        PointerUp: string;
        MultipleTouches: string;
        PointerCancel: string;
        PointerHover: string;
        EnterDown: string;
        EnterUp: string;
        EscDown: string;
        TabDown: string;
        LeftArrowDown: string;
        RightArrowDown: string;
        DownArrowDown: string;
        UpArrowDown: string;
        Focus: string;
        Blur: string;
    };
    controlEvent: {
        PointerDown: string;
        PointerMove: string;
        PointerLeave: string;
        PointerEnter: string;
        PointerUpInside: string;
        PointerTap: string;
        PointerUp: string;
        MultipleTouches: string;
        PointerCancel: string;
        PointerHover: string;
        EnterDown: string;
        EnterUp: string;
        EscDown: string;
        TabDown: string;
        LeftArrowDown: string;
        RightArrowDown: string;
        DownArrowDown: string;
        UpArrowDown: string;
        Focus: string;
        Blur: string;
    };
    get addControlEventTarget(): UIViewAddControlEventTargetObject<{
        PointerDown: string;
        PointerMove: string;
        PointerLeave: string;
        PointerEnter: string;
        PointerUpInside: string;
        PointerTap: string;
        PointerUp: string;
        MultipleTouches: string;
        PointerCancel: string;
        PointerHover: string;
        EnterDown: string;
        EnterUp: string;
        EscDown: string;
        TabDown: string;
        LeftArrowDown: string;
        RightArrowDown: string;
        DownArrowDown: string;
        UpArrowDown: string;
        Focus: string;
        Blur: string;
    }>;
    addTargetForControlEvents(eventKeys: string[], targetFunction: (sender: UIView, event: Event) => void): void;
    addTargetForControlEvent(eventKey: string, targetFunction: (sender: UIView, event: Event) => void): void;
    removeTargetForControlEvent(eventKey: string, targetFunction: (sender: UIView, event: Event) => void): void;
    removeTargetForControlEvents(eventKeys: string[], targetFunction: (sender: UIView, event: Event) => void): void;
    sendControlEventForKey(eventKey: string, nativeEvent: Event): void;
    static broadcastEventName: {
        LanguageChanged: string;
        RemovedFromViewTree: string;
        AddedToViewTree: string;
        PageDidScroll: string;
    };
    broadcastEventInSubtree(event: UIViewBroadcastEvent): void;
    didReceiveBroadcastEvent(event: UIViewBroadcastEvent): void;
    forEachViewInSubtree(functionToCall: (view: UIView) => void): void;
    rectangleInView(rectangle: UIRectangle, view: UIView): any;
    rectangleFromView(rectangle: UIRectangle, view: UIView): any;
    intrinsicContentSizeWithConstraints(constrainingHeight?: number, constrainingWidth?: number): UIRectangle;
    intrinsicContentWidth(constrainingHeight?: number): number;
    intrinsicContentHeight(constrainingWidth?: number): number;
    intrinsicContentSize(): UIRectangle;
}
declare class UIDialogView<ViewType extends UIView = UIView> extends UIView {
    _view: ViewType;
    _appearedAnimated: boolean;
    animationDuration: number;
    _zIndex: number;
    isVisible: boolean;
    dismissesOnTapOutside: boolean;
    constructor(elementID?: string, viewHTMLElement?: HTMLElement);
    didDetectTapOutside(sender: UIView, event: Event): void;
    set zIndex(zIndex: number);
    get zIndex(): number;
    set view(view: ViewType);
    get view(): ViewType;
    willAppear(animated?: boolean): void;
    animateAppearing(): void;
    animateDisappearing(): void;
    showInView(containerView: UIView, animated: boolean): void;
    showInRootView(animated: boolean): void;
    dismiss(animated?: boolean): void;
    didReceiveBroadcastEvent(event: UIViewBroadcastEvent): void;
    layoutSubviews(): void;
}
export {};
