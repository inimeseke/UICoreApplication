{
  "version": 3,
  "sources": ["../scripts/UIViewController.ts"],
  "sourcesContent": ["import { UIDialogView } from \"./UIDialogView\"\nimport { FIRST_OR_NIL, IS, nil, NO, UIObject, YES } from \"./UIObject\"\nimport { UIRoute } from \"./UIRoute\"\nimport { UIView, UIViewBroadcastEvent } from \"./UIView\"\n\n\n\n\n\nexport class UIViewController extends UIObject {\n    \n    parentViewController: UIViewController = nil\n    childViewControllers: UIViewController[] = []\n    static readonly routeComponentName: string\n    static readonly ParameterIdentifierName: any\n    \n    constructor(public view: UIView) {\n        \n        super()\n        \n        this.view._viewControllerLayoutFunction = this.layoutViewSubviews.bind(this)\n        this.view._willLayoutSubviewsDelegateFunction = this.viewWillLayoutSubviews.bind(this)\n        this.view._didLayoutSubviewsDelegateFunction = this.viewDidLayoutSubviews.bind(this)\n        this.view._didReceiveBroadcastEventDelegateFunction = this.viewDidReceiveBroadcastEvent.bind(this)\n        \n    }\n    \n    \n    handleRouteRecursively(route: UIRoute) {\n        \n        this.handleRoute(route)\n        \n        this.childViewControllers.forEach(controller => {\n            \n            if (!route.isHandled) {\n                controller.handleRouteRecursively(route)\n            }\n            \n        })\n        \n    }\n    \n    async handleRoute(route: UIRoute) {\n        \n    \n        \n    }\n    \n    \n    async viewWillAppear() {\n    \n    \n    \n    }\n    \n    \n    async viewDidAppear() {\n    \n    \n    \n    }\n    \n    \n    async viewWillDisappear() {\n    \n    \n    \n    }\n    \n    async viewDidDisappear() {\n    \n    \n    \n    }\n    \n    \n    updateViewConstraints() {\n    \n    \n    \n    \n    \n    }\n    \n    updateViewStyles() {\n    \n    \n    \n    }\n    \n    layoutViewSubviews() {\n        \n        \n        \n    }\n    \n    _triggerLayoutViewSubviews() {\n        \n        this.view.layoutSubviews()\n        \n        this.viewDidLayoutSubviews()\n        \n    }\n    \n    viewWillLayoutSubviews() {\n        \n        this.updateViewConstraints()\n        this.updateViewStyles()\n        \n    }\n    \n    viewDidLayoutSubviews() {\n        \n        // this.childViewControllers.forEach(function (controller, index, controllers) {\n        \n        //     controller._layoutViewSubviews();\n        \n        // })\n        \n        \n        \n    }\n    \n    \n    \n    viewDidReceiveBroadcastEvent(event: UIViewBroadcastEvent) {\n        \n        \n        \n    }\n    \n    \n    \n    \n    hasChildViewController(viewController: UIViewController) {\n        \n        // This is for performance reasons\n        if (!IS(viewController)) {\n            return NO\n        }\n        \n        for (let i = 0; i < this.childViewControllers.length; i++) {\n            \n            const childViewController = this.childViewControllers[i]\n            \n            if (childViewController == viewController) {\n                return YES\n            }\n            \n        }\n        \n        return NO\n        \n    }\n    \n    addChildViewController(viewController: UIViewController) {\n        if (!this.hasChildViewController(viewController)) {\n            viewController.willMoveToParentViewController(this)\n            this.childViewControllers.push(viewController)\n            //this.view.addSubview(viewController.view);\n            //viewController.didMoveToParentViewController(this);\n        }\n    }\n    \n    \n    removeFromParentViewController() {\n        const index = this.parentViewController.childViewControllers.indexOf(this)\n        if (index > -1) {\n            this.parentViewController.childViewControllers.splice(index, 1)\n            //this.view.removeFromSuperview();\n            this.parentViewController = nil\n        }\n    }\n    \n    willMoveToParentViewController(parentViewController) {\n    \n    }\n    \n    \n    didMoveToParentViewController(parentViewController: UIViewController) {\n        \n        this.parentViewController = parentViewController\n        \n    }\n    \n    removeChildViewController(controller: UIViewController) {\n        \n        controller = FIRST_OR_NIL(controller)\n        controller.viewWillDisappear()\n        if (IS(controller.parentViewController)) {\n            controller.removeFromParentViewController()\n        }\n        if (IS(controller.view)) {\n            controller.view.removeFromSuperview()\n        }\n        controller.viewDidDisappear()\n        \n    }\n    \n    \n    addChildViewControllerInContainer(controller: UIViewController, containerView: UIView) {\n        \n        controller = FIRST_OR_NIL(controller)\n        containerView = FIRST_OR_NIL(containerView)\n        controller.viewWillAppear()\n        this.addChildViewController(controller)\n        containerView.addSubview(controller.view)\n        controller.didMoveToParentViewController(this)\n        controller.viewDidAppear()\n        \n        controller.handleRouteRecursively(UIRoute.currentRoute)\n        \n    }\n    \n    addChildViewControllerInDialogView(controller: UIViewController, dialogView: UIDialogView) {\n        \n        controller = FIRST_OR_NIL(controller)\n        dialogView = FIRST_OR_NIL(dialogView)\n        controller.viewWillAppear()\n        this.addChildViewController(controller)\n        dialogView.view = controller.view\n        \n        const originalDismissFunction = dialogView.dismiss.bind(dialogView)\n        \n        dialogView.dismiss = animated => {\n            \n            originalDismissFunction(animated)\n            \n            this.removeChildViewController(controller)\n            \n        }\n        \n        controller.didMoveToParentViewController(this)\n        controller.viewDidAppear()\n        \n        controller.handleRouteRecursively(UIRoute.currentRoute)\n        \n    }\n    \n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
