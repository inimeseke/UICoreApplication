{
  "version": 3,
  "sources": ["../scripts/UIRoute.ts"],
  "sourcesContent": ["import { IS_NIL, IS_NOT, nil, NO } from \"./UIObject\"\nimport { UIViewController } from \"./UIViewController\"\n\n\nexport type ValueOf<T> = T[keyof T];\nexport type PropType<TObj, TProp extends keyof TObj> = TObj[TProp];\n\nexport type UIRouteParameters<T = any> = {\n    \n    [key: string]: string;\n    \n} | T;\n\n\nexport interface UIRouteComponent<T = any> {\n    \n    name: string;\n    parameters: UIRouteParameters<T>;\n    \n}\n\n\n// @ts-ignore\nexport class UIRoute extends Array<UIRouteComponent> {\n    \n    constructor(hash?: string) {\n        \n        super()\n        \n        if (!hash || !hash.startsWith) {\n            \n            return\n            \n        }\n        \n        if (hash.startsWith(\"#\")) {\n            hash = hash.slice(1)\n        }\n        \n        hash = decodeURIComponent(hash)\n        \n        const components = hash.split(\"]\")\n        components.forEach(function (this: UIRoute, component: string, index: number, array: string[]) {\n            \n            const componentName = component.split(\"[\")[0]\n            const parameters = {}\n            \n            if (!componentName) {\n                \n                return\n                \n            }\n            \n            const parametersString = component.split(\"[\")[1] || \"\"\n            const parameterPairStrings = parametersString.split(\",\") || []\n            \n            parameterPairStrings.forEach(function (pairString, index, array) {\n                \n                const keyAndValueArray = pairString.split(\":\")\n                const key = decodeURIComponent(keyAndValueArray[0])\n                const value = decodeURIComponent(keyAndValueArray[1])\n                \n                if (key) {\n                    \n                    parameters[key] = value\n                    \n                }\n                \n                \n                \n            })\n            \n            \n            \n            this.push({\n                name: componentName,\n                parameters: parameters\n            })\n            \n            \n            \n            \n            \n        }, this)\n        \n        \n    }\n    \n    \n    \n    static get currentRoute() {\n        \n        return new UIRoute(window.location.hash)\n        \n    }\n    \n    \n    \n    \n    \n    apply() {\n        \n        window.location.hash = this.stringRepresentation\n        \n    }\n    \n    \n    applyByReplacingCurrentRouteInHistory() {\n        \n        window.location.replace(this.linkRepresentation)\n        \n    }\n    \n    \n    \n    copy() {\n        var result = new UIRoute()\n        result = Object.assign(result, this)\n        return result\n    }\n    \n    \n    routeByRemovingComponentsOtherThanOnesNamed(componentNames: string[]) {\n        const result = this.copy()\n        const indexesToRemove: number[] = []\n        result.forEach(function (component, index, array) {\n            if (!componentNames.contains(component.name)) {\n                indexesToRemove.push(index)\n            }\n        })\n        indexesToRemove.forEach(function (indexToRemove, index, array) {\n            result.removeElementAtIndex(indexToRemove)\n        })\n        return result\n    }\n    \n    \n    routeByRemovingComponentNamed(componentName: string) {\n        const result = this.copy()\n        const componentIndex = result.findIndex(function (component, index) {\n            return (component.name == componentName)\n        })\n        if (componentIndex != -1) {\n            result.splice(componentIndex, 1)\n        }\n        return result\n    }\n    \n    \n    routeByRemovingParameterInComponent(componentName: string, parameterName: string, removeComponentIfEmpty = NO) {\n        var result = this.copy()\n        var parameters = result.componentWithName(componentName).parameters\n        if (IS_NOT(parameters)) {\n            parameters = {}\n        }\n        delete parameters[parameterName]\n        result = result.routeWithComponent(componentName, parameters)\n        if (removeComponentIfEmpty && Object.keys(parameters).length == 0) {\n            result = result.routeByRemovingComponentNamed(componentName)\n        }\n        return result\n    }\n    \n    routeBySettingParameterInComponent(componentName: string, parameterName: string, valueToSet: string) {\n        var result = this.copy()\n        if (IS_NIL(valueToSet) || IS_NIL(parameterName)) {\n            return result\n        }\n        var parameters = result.componentWithName(componentName).parameters\n        if (IS_NOT(parameters)) {\n            parameters = {}\n        }\n        parameters[parameterName] = valueToSet\n        result = result.routeWithComponent(componentName, parameters)\n        return result\n    }\n    \n    \n    routeWithViewControllerComponent<T extends typeof UIViewController>(\n        viewController: T,\n        parameters: UIRouteParameters<{ [P in keyof T[\"ParameterIdentifierName\"]]: string }>,\n        extendParameters: boolean = NO\n    ) {\n        \n        return this.routeWithComponent(viewController.routeComponentName, parameters, extendParameters)\n        \n    }\n    \n    routeWithComponent(name: string, parameters: UIRouteParameters, extendParameters: boolean = NO) {\n        \n        const result = this.copy()\n        var component = result.componentWithName(name)\n        if (IS_NOT(component)) {\n            component = {\n                name: name,\n                parameters: {}\n            }\n            result.push(component)\n        }\n        \n        if (IS_NOT(parameters)) {\n            \n            parameters = {}\n            \n        }\n        \n        if (extendParameters) {\n            component.parameters = Object.assign(component.parameters, parameters)\n        }\n        else {\n            component.parameters = parameters\n        }\n        \n        return result\n        \n    }\n    \n    navigateBySettingComponent(name: string, parameters: UIRouteParameters, extendParameters: boolean = NO) {\n        \n        this.routeWithComponent(name, parameters, extendParameters).apply()\n        \n    }\n    \n    \n    componentWithViewController<T extends typeof UIViewController>(viewController: T): UIRouteComponent<{ [P in keyof T[\"ParameterIdentifierName\"]]: string }> {\n        \n        return this.componentWithName(viewController.routeComponentName)\n        \n    }\n    \n    componentWithName(name: string): UIRouteComponent {\n        var result = nil\n        this.forEach(function (component, index, self) {\n            if (component.name == name) {\n                result = component\n            }\n        })\n        return result\n    }\n    \n    \n    get linkRepresentation() {\n        return \"#\" + this.stringRepresentation\n    }\n    \n    \n    get stringRepresentation() {\n        \n        var result = \"\"\n        this.forEach(function (component, index, self) {\n            result = result + component.name\n            const parameters = component.parameters\n            result = result + \"[\"\n            Object.keys(parameters).forEach(function (key, index, keys) {\n                if (index) {\n                    result = result + \",\"\n                }\n                result = result + encodeURIComponent(key) + \":\" + encodeURIComponent(parameters[key])\n            })\n            result = result + \"]\"\n        })\n        \n        return result\n        \n    }\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["index", "array"]
}
