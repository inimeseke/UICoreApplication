onmessage=function(e){var a=g(e.data.data,e.data.sortingInstructions);a.identifier=e.data.identifier,a.instanceIdentifier=e.data.instanceIdentifier,postMessage(a)};function v(e,a){for(var i=e.split("."),r=a,n=0;n<i.length;n++){var u=i[n];if(u.substring(0,2)=="[]"){r=r[u.substring(2)];var t=i.slice(n+1).join("."),o=r;r=o.map(function(d,s,f){var c=v(t,d);return c});break}r=(r||{})[u]}return r}function l(e,a,i){if(i.length==0)return 0;var r=i[0],n=1;r.direction=="descending"&&(n=-1);var u=e[r.keyPath],t=a[r.keyPath];if(u<t)return-1*n;if(u>t)return 1*n;if(i.length>1){var o=i.slice(1);return l(e,a,o)}return 0}function g(e,a){var i=e.map(function(t,o,d){var s={_UIKeyValueStringSorterWebWorkerSortingObjectIndex:o};return a.forEach(function(f,c,y){s[f.keyPath]=JSON.stringify(v(f.keyPath,t)||{}).toLowerCase()}),s}),r=i.sort(function(t,o){return l(t,o,a)}),n=r.map(function(t,o,d){var s=t._UIKeyValueStringSorterWebWorkerSortingObjectIndex;return s}),u={sortedData:n.map(function(t,o,d){return e[t]}),sortedIndexes:n};return u}
//# sourceMappingURL=data:application/json;base64,
