{"code":"import { FIRST_OR_NIL, IF, IS, IS_NOT, nil, NO, RETURNER, UIButton, UIColor, UITextView, UIView, YES } from \"uicore-ts\";\r\nimport { RootViewParameters } from \"../RootViewParameters\";\r\nimport { CBFlatButton } from \"./CBFlatButton\";\r\nimport { LanguageService } from \"./LanguageService\";\r\nimport { RowView } from \"./RowView\";\r\nexport class CBDialogView extends UIView {\r\n    constructor(elementID) {\r\n        super(elementID);\r\n        this.titleLabel = nil;\r\n        this.titleRow = nil;\r\n        this.placeholderLabel = nil;\r\n        this._view = nil;\r\n        this.questionLabel = nil;\r\n        this.yesButton = nil;\r\n        this.noButton = nil;\r\n        this.cancelButton = nil;\r\n        this.noButtonDismissesDialog = YES;\r\n        this._class = CBDialogView;\r\n        this.superclass = UIView;\r\n        this.updateContent();\r\n    }\r\n    initView(elementID, viewHTMLElement) {\r\n        super.initView(elementID, viewHTMLElement);\r\n        // this.initPlaceholderLabelIfNeeded()\r\n        // this.initTitleLabelIfNeeded()\r\n        // this.initTitleRow()\r\n        // this.titleRow.cellWeights = [1, 0.75, 1.2, 1]\r\n        // var cells = this.titleRow.cells as CellView[];\r\n        // var cellTitles = [\"TIME:\", \"COMPANY:\", \"COMMENTS:\", \"PRICE:\"]\r\n        // cells.forEach(function (cell, index, array) {\r\n        //     cell.titleLabel.text = cellTitles[index];\r\n        //     cell.titleLabel.useSairaFont()\r\n        // })\r\n        // this.initQuestionLabelIfNeeded()\r\n        // this.initYesNoButtonsIfNeeded()\r\n        this.style.borderRadius = \"5px\";\r\n    }\r\n    set view(view) {\r\n        this.view.removeFromSuperview();\r\n        this._view = view;\r\n        this.addSubview(view);\r\n    }\r\n    get view() {\r\n        return this._view;\r\n    }\r\n    initCancelButtonIfNeeded() {\r\n        if (IS_NOT(this.cancelButton)) {\r\n            this.cancelButton = new CBFlatButton(this.elementID + \"CancelButton\");\r\n            this.cancelButton.titleLabel.text = \"OK\";\r\n            this.cancelButton.titleLabelColor = UIColor.greenColor;\r\n            this.cancelButton.titleLabel.style.fontWeight = \"600\";\r\n            this.addSubview(this.cancelButton);\r\n            this.cancelButton.addTargetForControlEvents([\r\n                UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\r\n            ], function (sender, event) {\r\n                this.dialogView.dismiss();\r\n            }.bind(this));\r\n        }\r\n    }\r\n    initYesNoButtonsIfNeeded() {\r\n        if (IS_NOT(this.yesButton)) {\r\n            this.yesButton = new CBFlatButton(this.elementID + \"YesButton\");\r\n            this.yesButton.titleLabel.setText(\"cBDDialogViewYES\", \"YES\");\r\n            this.yesButton.titleLabelColor = UIColor.greenColor;\r\n            this.yesButton.titleLabel.style.fontWeight = \"600\";\r\n            this.addSubview(this.yesButton);\r\n            this.noButton = new CBFlatButton(this.elementID + \"NoButton\");\r\n            this.noButton.titleLabel.setText(\"cBDDialogViewNO\", \"NO\");\r\n            this.noButton.titleLabelColor = UIColor.redColor;\r\n            this.noButton.titleLabel.style.fontWeight = \"600\";\r\n            this.addSubview(this.noButton);\r\n            // this.yesButton.addTargetForControlEvents([UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown], function (this: CBDialogView, sender: UIButton, event: Event) {\r\n            //     this.dialogView.dismiss()\r\n            // }.bind(this))\r\n            this.noButton.addTargetForControlEvents([\r\n                UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\r\n            ], function (sender, event) {\r\n                if (this.noButtonDismissesDialog) {\r\n                    this.dialogView.dismiss();\r\n                }\r\n            }.bind(this));\r\n        }\r\n    }\r\n    initQuestionLabelIfNeeded() {\r\n        if (IS_NOT(this.questionLabel)) {\r\n            this.questionLabel = new UITextView(this.elementID + \"QuestionLabel\", UITextView.type.header3);\r\n            this.questionLabel.text = LanguageService.stringForKey(\"cBDDialogViewAreYouSure\", LanguageService.currentLanguageKey, \"Are you sure?\");\r\n            this.questionLabel.textAlignment = UITextView.textAlignment.center;\r\n            this.addSubview(this.questionLabel);\r\n        }\r\n    }\r\n    initTitleRow() {\r\n        if (IS_NOT(this.titleRow)) {\r\n            this.titleRow = new RowView(this.elementID + \"TitleRow\");\r\n            this.addSubview(this.titleRow);\r\n        }\r\n    }\r\n    initTitleLabelIfNeeded() {\r\n        if (IS_NOT(this.titleLabel)) {\r\n            this.titleLabel = new UITextView(this.elementID + \"TitleLabel\", UITextView.type.header4);\r\n            this.titleLabel.text = \"Accept offer\";\r\n            this.titleLabel.style.fontSize = \"24\";\r\n            this.addSubview(this.titleLabel);\r\n        }\r\n    }\r\n    initPlaceholderLabelIfNeeded() {\r\n        if (IS_NOT(this.placeholderLabel)) {\r\n            this.placeholderLabel = new UITextView(this.elementID + \"PlaceholderLabel\", UITextView.type.header4);\r\n            this.placeholderLabel.text = \"No offers have been made yet.\";\r\n            this.addSubview(this.placeholderLabel);\r\n        }\r\n    }\r\n    updateContent() {\r\n        function stringFromValue(value) {\r\n            if (IS(value)) {\r\n                return value;\r\n            }\r\n            return \"-\";\r\n        }\r\n        this.layoutSubviews();\r\n    }\r\n    layoutSubviews() {\r\n        super.layoutSubviews();\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding * 0.75;\r\n        const bounds = this.bounds.rectangleWithInsets(padding * 0.5, padding * 0.5, 0, 0);\r\n        const topObject = { frame: bounds.rectangleWithHeight(0) };\r\n        this.titleLabel.frame = bounds.rectangleWithHeight(this.titleLabel.intrinsicContentHeight(bounds.width)).rectangleWithY(bounds.y +\r\n            padding * 0.5);\r\n        this.titleLabel.style.marginLeft = \"\" + (padding * 0.5) + \"px\";\r\n        this.titleRow.frame = FIRST_OR_NIL(this.titleLabel, topObject).frame.rectangleForNextRow(0, this.titleRow.intrinsicContentHeight(bounds.width));\r\n        this.view.frame = FIRST_OR_NIL(this.titleRow, this.titleLabel, topObject).frame.rectangleForNextRow(padding, this.view.intrinsicContentHeight(bounds.width)).rectangleWithWidth(bounds.width).rectangleWithX(bounds.x);\r\n        this.questionLabel.frame = FIRST_OR_NIL(this.view, this.titleRow, this.titleLabel, topObject).frame.rectangleForNextRow(padding, this.questionLabel.intrinsicContentHeight(bounds.width)).rectangleWithWidth(bounds.width).rectangleWithX(bounds.x);\r\n        const buttons = [this.yesButton, this.noButton];\r\n        const buttonsFrame = FIRST_OR_NIL(this.questionLabel, this.view, this.titleRow, this.titleLabel, topObject).frame.rectangleForNextRow(padding, labelHeight *\r\n            2)\r\n            .rectangleWithWidth([buttons.everyElement.titleLabel.intrinsicContentWidth().max(), 120].max() * 2 + padding * 3, 0.5);\r\n        buttonsFrame.distributeViewsAlongWidth(buttons);\r\n        this.cancelButton.frame = buttonsFrame.rectangleWithWidth(150, 0.5);\r\n        this.placeholderLabel.frame = bounds.rectangleWithInsets(padding * 0.5, padding * 0.5, 0, 0);\r\n        if (IS(this.view)) {\r\n            this.placeholderLabel.hidden = YES;\r\n            // this.titleLabel.hidden = NO\r\n            // this.titleRow.hidden = NO\r\n        }\r\n        else {\r\n            this.placeholderLabel.hidden = NO;\r\n            // this.titleLabel.hidden = YES\r\n            // this.titleRow.hidden = YES\r\n        }\r\n    }\r\n    intrinsicContentHeight(constrainingWidth = 0) {\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding * 0.75;\r\n        function addPaddingIfNeeded(value) {\r\n            return IF(value)(function () {\r\n                return value + padding;\r\n            })();\r\n        }\r\n        var result = padding;\r\n        result = result + addPaddingIfNeeded(this.titleLabel.intrinsicContentHeight(constrainingWidth));\r\n        result = result + addPaddingIfNeeded(this.titleRow.intrinsicContentHeight(constrainingWidth));\r\n        result = result + addPaddingIfNeeded(this.view.intrinsicContentHeight(constrainingWidth) + padding);\r\n        result = result + addPaddingIfNeeded(this.questionLabel.intrinsicContentHeight(constrainingWidth));\r\n        result = result + IF(FIRST_OR_NIL(this.yesButton, this.cancelButton))(RETURNER(labelHeight))();\r\n        return result;\r\n    }\r\n}\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/RootViewParameters.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBFlatButton.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/RowView.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/Custom components/CBDialogView.d.ts","writeByteOrderMark":false,"text":"import { UITextView, UIView } from \"uicore-ts\";\r\nimport { CBFlatButton } from \"./CBFlatButton\";\r\nimport { RowView } from \"./RowView\";\r\nexport declare class CBDialogView extends UIView {\r\n    titleLabel: UITextView;\r\n    titleRow: RowView;\r\n    placeholderLabel: UITextView;\r\n    _view: UIView;\r\n    questionLabel: UITextView;\r\n    yesButton: CBFlatButton;\r\n    noButton: CBFlatButton;\r\n    cancelButton: CBFlatButton;\r\n    noButtonDismissesDialog: boolean;\r\n    constructor(elementID?: string);\r\n    initView(elementID: string, viewHTMLElement: HTMLElement): void;\r\n    set view(view: UIView);\r\n    get view(): UIView;\r\n    initCancelButtonIfNeeded(): void;\r\n    initYesNoButtonsIfNeeded(): void;\r\n    initQuestionLabelIfNeeded(): void;\r\n    initTitleRow(): void;\r\n    initTitleLabelIfNeeded(): void;\r\n    initPlaceholderLabelIfNeeded(): void;\r\n    updateContent(): void;\r\n    layoutSubviews(): void;\r\n    intrinsicContentHeight(constrainingWidth?: number): number;\r\n}\r\n"}}
