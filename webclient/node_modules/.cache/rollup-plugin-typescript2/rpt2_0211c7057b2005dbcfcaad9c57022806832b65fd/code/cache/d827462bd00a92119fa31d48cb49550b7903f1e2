{"code":"import { IS, IS_NOT, IS_UNDEFINED, MAKE_ID, nil, NO, UIButton, UIColor, UIDialogView, UIImageView, UIKeyValueStringFilter, UITableView, UITextField, UITextView, UIView, YES } from \"uicore-ts\";\r\nimport { CBColor } from \"../CBCore/CBColor\";\r\nimport { CBCore } from \"../CBCore/CBCore\";\r\nimport { CBSocketClient } from \"../CBCore/CBSocketClient\";\r\nimport { RootViewParameters } from \"../RootViewParameters\";\r\nimport { LanguageService } from \"./LanguageService\";\r\nimport { SearchableDropdownRow } from \"./SearchableDropdownRow\";\r\nimport { SearchTextField } from \"./SearchTextField\";\r\nexport class SearchableDropdown extends UIButton {\r\n    constructor(elementID) {\r\n        super(elementID);\r\n        this._data = [];\r\n        this._filteredData = [];\r\n        this._excludedData = [];\r\n        this.tintColor = CBColor.primaryTintColor;\r\n        this.selectedIndices = [];\r\n        this._selectedData = [];\r\n        this._drawingData = [];\r\n        this._isDrawingDataValid = NO;\r\n        this.isSingleSelection = NO;\r\n        this.showsSelectedSectionInMultipleSelectionMode = NO;\r\n        this.allowsCustomItem = NO;\r\n        this.keepFocusedRowVisible = YES;\r\n        this._class = SearchableDropdown;\r\n        this.superclass = UIButton;\r\n    }\r\n    initView(elementID, viewHTMLElement, initViewData) {\r\n        super.initView(elementID, viewHTMLElement, initViewData);\r\n        //this.style.borderRadius = \"2px\";\r\n        this._titleLabel.text = \"Current value\";\r\n        this._titleLabel.textAlignment = UITextView.textAlignment.left;\r\n        this.overflowLabel = new UITextView(elementID + \"OverflowLabel\");\r\n        this.overflowLabel.textColor = CBColor.primaryContentColor;\r\n        this.overflowLabel.textAlignment = UITextView.textAlignment.right;\r\n        this.addSubview(this.overflowLabel);\r\n        this._rightImageView = new UIImageView(this.elementID + \"RightImageView\");\r\n        this._rightImageView.imageSource = \"images/baseline-arrow_drop_down-24px.svg\";\r\n        this._rightImageView.userInteractionEnabled = NO;\r\n        this.addSubview(this._rightImageView);\r\n        this.setNeedsLayout();\r\n        this._containerView = new UIView(elementID + \"ContainerView\");\r\n        this._containerView.style.boxShadow = \"0 9px 13px 0 rgba(0,0,0,0.26)\";\r\n        this._containerView.style.borderRadius = \"2px\";\r\n        this._searchTextField = new SearchTextField(elementID + \"SearchTextField\");\r\n        this._searchTextField.placeholderText = LanguageService.stringForKey(\"searchableDropdownSearch\", LanguageService.currentLanguageKey, \"Search\");\r\n        this._containerView.addSubview(this._searchTextField);\r\n        this._searchTextField._textField.addTargetForControlEvent(UITextField.controlEvent.TextChange, function (sender, event) {\r\n            this.updateFilteredData(this._searchTextField.text);\r\n        }.bind(this));\r\n        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.EscDown, function (sender, event) {\r\n            if (IS(this._searchTextField.text)) {\r\n                this._searchTextField.text = \"\";\r\n                this.updateFilteredData(\"\");\r\n            }\r\n            else {\r\n                this._dialogView.dismiss(YES);\r\n            }\r\n        }.bind(this));\r\n        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.DownArrowDown, function (sender, event) {\r\n            if (this.focusedRowIndex < (this.drawingData.length - 1)) {\r\n                this.focusedRowIndex = this.focusedRowIndex + 1;\r\n            }\r\n        }.bind(this));\r\n        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.UpArrowDown, function (sender, event) {\r\n            if (this.focusedRowIndex > 0) {\r\n                this.focusedRowIndex = this.focusedRowIndex - 1;\r\n            }\r\n        }.bind(this));\r\n        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.EnterDown, function (sender, event) {\r\n            const isTouchDevice = \"ontouchstart\" in document.documentElement;\r\n            if (isTouchDevice) {\r\n                this._searchTextField.blur();\r\n                return;\r\n            }\r\n            const datapoint = this.drawingData[this.focusedRowIndex];\r\n            const alreadySelected = this.selectedDataContains(datapoint);\r\n            if (alreadySelected) {\r\n                this.selectedData.removeElement(datapoint);\r\n            }\r\n            else if (this.isSingleSelection) {\r\n                this.selectedIndices = [this.focusedRowIndex];\r\n                this.selectedData = [datapoint];\r\n                // view.selected = YES;\r\n                this.selectionDidChange(this.selectedData);\r\n                this.updateContentForCurrentSelection();\r\n                this._dialogView.dismiss();\r\n            }\r\n            else {\r\n                this.selectedData.push(datapoint);\r\n            }\r\n        }.bind(this));\r\n        this._tableView = new UITableView(elementID + \"TableView\");\r\n        this._containerView.addSubview(this._tableView);\r\n        this._tableView.backgroundColor = UIColor.whiteColor;\r\n        this._dialogView = new UIDialogView(elementID + \"DialogView\");\r\n        this._dialogView.view = this._containerView;\r\n        this._dialogView.backgroundColor = UIColor.transparentColor;\r\n        this.addTargetForControlEvents([\r\n            UIView.controlEvent.PointerUpInside, UIView.controlEvent.EnterDown\r\n        ], function (sender, event) {\r\n            if (this._dialogView.isVisible) {\r\n                this.closeDropdown();\r\n            }\r\n            else {\r\n                this.openDropdown();\r\n            }\r\n        }.bind(this));\r\n        this._dialogView.addTargetForControlEvent(UIView.controlEvent.PointerDown, function (sender, event) {\r\n            if (sender.viewHTMLElement == event.target) {\r\n                sender.dismiss();\r\n            }\r\n        });\r\n        const dialogLayoutFunction = this._dialogView.layoutSubviews;\r\n        this._dialogView.layoutSubviews = function () {\r\n            //dialogLayoutFunction.call(this._dialogView);\r\n            this._dialogView.frame = this.rootView.bounds; //this.superview.rectangleInView(this.superview.bounds, this.rootView);\r\n            const padding = RootViewParameters.paddingLength;\r\n            const labelHeight = padding;\r\n            const searchTextFieldHeight = this.bounds.height;\r\n            this._containerView.frame = this.superview.rectangleInView(this.frame, this.rootView)\r\n                .rectangleWithHeight(this.expandedContainerViewHeight);\r\n            this._searchTextField.frame = this._containerView.bounds.rectangleWithHeight(searchTextFieldHeight).rectangleWithInsets(0, 16, 0, 0);\r\n            this._tableView.frame = this._containerView.bounds.rectangleWithInsets(0, 0, 0, searchTextFieldHeight);\r\n            //this._tableView.style.maxHeight = \"\" + this._tableView.intrinsicContentHeight() + \"px\";\r\n        }.bind(this);\r\n        // var animateDialogAppearing = this._dialogView.animateAppearing;\r\n        // this._dialogView.animateAppearing = function (this: SearchableDropdown) {\r\n        //     animateDialogAppearing.call(this._dialogView);\r\n        //     this.style.zIndex = \"101\";\r\n        //     if (this.highlightLabel) {\r\n        //         this.highlightLabel.textColor = UIColor.whiteColor;\r\n        //         this.highlightLabel.style.zIndex = \"101\";\r\n        //         this.highlightLabel.userInteractionEnabled = NO;\r\n        //     }\r\n        //     this._searchTextField.focus();\r\n        // }.bind(this)\r\n        // var animateDialogDisappearing = this._dialogView.animateDisappearing;\r\n        // this._dialogView.animateDisappearing = function (this: SearchableDropdown) {\r\n        //     animateDialogDisappearing.call(this._dialogView);\r\n        //     this.style.zIndex = \"0\";\r\n        //     if (this.highlightLabel) {\r\n        //         this.highlightLabel.textColor = CBColor.primaryContentColor;\r\n        //         this.highlightLabel.style.zIndex = \"0\";\r\n        //         this.highlightLabel.userInteractionEnabled = YES;\r\n        //     }\r\n        //     this._searchTextField.blur();\r\n        // }.bind(this)\r\n        this._tableView.numberOfRows = function () {\r\n            var result = this.drawingData.length;\r\n            if (IS_NOT(this.isSingleSelection) && this.showsSelectedSectionInMultipleSelectionMode) {\r\n                result = result + this.selectedData.length;\r\n            }\r\n            return result;\r\n        }.bind(this);\r\n        const newReusableViewForIdentifierFunction = this._tableView.newReusableViewForIdentifier.bind(this._tableView);\r\n        this._tableView.newReusableViewForIdentifier = function (identifier, rowIndex) {\r\n            //if (identifier == \"SelectedItemRow\") {\r\n            const view = new SearchableDropdownRow(elementID + identifier + rowIndex);\r\n            view.stopsPointerEventPropagation = NO;\r\n            view.pausesPointerEvents = NO;\r\n            return view;\r\n            // }\r\n            // return newReusableViewForIdentifierFunction(identifier, rowIndex);\r\n        }.bind(this);\r\n        const viewForSelectedItemRow = function (index) {\r\n            const view = this._tableView.reusableViewForIdentifier(\"SelectedItemRow\", index);\r\n            view.titleLabel.text = LanguageService.stringForCurrentLanguage(this.selectedData[index].title);\r\n            view.selected = YES;\r\n            return view;\r\n        }.bind(this);\r\n        this._tableView.viewForRowWithIndex = function (index) {\r\n            const view = this._tableView.reusableViewForIdentifier(\"SubjectView\", index);\r\n            view.style.borderBottomColor = \"\";\r\n            view.style.borderBottomStyle = \"\";\r\n            view.style.borderBottomWidth = \"\";\r\n            const rowWasHovered = function (sender, event) {\r\n                this.focusedRowIndex = index;\r\n            }.bind(this);\r\n            view.addTargetForControlEvent(UIButton.controlEvent.PointerHover, rowWasHovered);\r\n            view.removeTargetForControlEvent(UIButton.controlEvent.PointerHover, view._SearchableDropdownRowWasHoveredFunction);\r\n            view._SearchableDropdownRowWasHoveredFunction = rowWasHovered;\r\n            view.focused = (this.focusedRowIndex == index);\r\n            if (!this.isSingleSelection && this.showsSelectedSectionInMultipleSelectionMode) {\r\n                if (index < this.selectedData.length) {\r\n                    view.type = SearchableDropdownRow.type.selectedItem;\r\n                    view.titleText = LanguageService.stringForCurrentLanguage(this.selectedData[index].title);\r\n                    view.selected = YES;\r\n                    view.updateContentForCurrentState();\r\n                    if (index == this.selectedData.length - 1) {\r\n                        view.style.borderBottomColor = UIColor.colorWithRGBA(100, 100, 100).stringValue;\r\n                        view.style.borderBottomStyle = \"solid\";\r\n                        view.style.borderBottomWidth = \"1px\";\r\n                    }\r\n                    var viewWasTapped = function (sender, event) {\r\n                        this.selectedIndices.removeElementAtIndex(index);\r\n                        const selectedItem = this.selectedData[index];\r\n                        this.selectedData.removeElement(selectedItem);\r\n                        view.selected = NO;\r\n                        this.selectionDidChange(this.selectedData);\r\n                        //this.performFunctionWithDelay(0.15, function (this: SearchableDropdown<T>) {\r\n                        this.updateContentForCurrentSelection();\r\n                        //}.bind(this))\r\n                        // // Unselecting main body item if possible\r\n                        // var visibleRows = this._tableView._visibleRows as SearchableDropdownRow[]\r\n                        // var visibleIndices = this._tableView.indexesForVisibleRows()\r\n                        // visibleRows.forEach(function (this: SearchableDropdown<T>, visibleRow: SearchableDropdownRow, visibleRowIndex: number, visibleRowsArray: SearchableDropdownRow[]) {\r\n                        //     var rowDataIndex = visibleIndices[visibleRowIndex]\r\n                        //     visibleRow.selected = this.selectedData.contains(this.drawingData[rowDataIndex])\r\n                        // }.bind(this))\r\n                        this._searchTextField.focus();\r\n                        if (view.viewWasTappedFunction) {\r\n                            view.removeTargetForControlEvents([\r\n                                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap\r\n                            ], view.viewWasTappedFunction);\r\n                        }\r\n                    }.bind(this);\r\n                    // Removing previous event target if possible\r\n                    if (view.viewWasTappedFunction) {\r\n                        view.removeTargetForControlEvents([\r\n                            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap\r\n                        ], view.viewWasTappedFunction);\r\n                    }\r\n                    // Adding event target\r\n                    view.addTargetForControlEvents([\r\n                        UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap\r\n                    ], viewWasTapped);\r\n                    view.viewWasTappedFunction = viewWasTapped;\r\n                    return view;\r\n                }\r\n                index = index - this.selectedData.length;\r\n            }\r\n            // Datapoint\r\n            const datapoint = this.drawingData[index];\r\n            if (IS_NOT(datapoint)) {\r\n                return;\r\n            }\r\n            // Setting different style for section title rows\r\n            if (datapoint.isADropdownDataSection) {\r\n                view.type = SearchableDropdownRow.type.sectionTitle;\r\n                view.userInteractionEnabled = NO;\r\n            }\r\n            else {\r\n                view.type = SearchableDropdownRow.type.selectableItem;\r\n                view.userInteractionEnabled = YES;\r\n            }\r\n            if (datapoint._id == (this._customItem || nil)._id) {\r\n                view.type = SearchableDropdownRow.type.customItem;\r\n            }\r\n            view.updateContentForNormalState();\r\n            view.updateContentForCurrentState();\r\n            // Setting row title\r\n            view.titleText = LanguageService.stringForCurrentLanguage(datapoint.title);\r\n            view.titleLabel.textAlignment = UITextView.textAlignment.left;\r\n            // Highlighting of row\r\n            //view.highlighted = (this.highlightedRowIndex == index);\r\n            // Selecting of rows\r\n            view.selected = this.selectedRowIdentifiers.contains(datapoint._id); //this.selectedIndices.contains(index); //this.selectedDataContains(datapoint);\r\n            var viewWasTapped = function (sender, event) {\r\n                if (view.selected) {\r\n                    this.selectedIndices.removeElement(index);\r\n                    this.selectedData.removeElement(datapoint);\r\n                }\r\n                else {\r\n                    if (this.isSingleSelection) {\r\n                        this.selectedIndices = [index];\r\n                        this.selectedData = [datapoint];\r\n                        // view.selected = YES;\r\n                        this.selectionDidChange(this.selectedData);\r\n                        this.updateContentForCurrentSelection();\r\n                        this._dialogView.dismiss();\r\n                        return;\r\n                    }\r\n                    else {\r\n                        this.selectedIndices.push(index);\r\n                        this.selectedData.push(datapoint);\r\n                    }\r\n                }\r\n                //view.selected = !view.selected;\r\n                const selectedData = this.selectedData;\r\n                if (!view.selected) {\r\n                    view.selected = YES;\r\n                    this.performFunctionWithDelay(0.25, function () {\r\n                        this.selectionDidChange(selectedData);\r\n                        this.updateContentForCurrentSelection();\r\n                        if (this.showsSelectedSectionInMultipleSelectionMode) {\r\n                            this._tableView.contentOffset = this._tableView.contentOffset.pointByAddingY(view.frame.height);\r\n                        }\r\n                    }.bind(this));\r\n                }\r\n                else {\r\n                    view._checkbox.selected = NO;\r\n                    this.selectionDidChange(selectedData);\r\n                    this.performFunctionWithDelay(0.15, function () {\r\n                        view.selected = NO;\r\n                        this.updateContentForCurrentSelection();\r\n                        if (this.showsSelectedSectionInMultipleSelectionMode) {\r\n                            this._tableView.contentOffset = this._tableView.contentOffset.pointByAddingY(-view.frame.height);\r\n                        }\r\n                    }.bind(this));\r\n                }\r\n                this._searchTextField.focus();\r\n            }.bind(this);\r\n            // Removing previous event target if possible\r\n            if (view.viewWasTappedFunction) {\r\n                view.removeTargetForControlEvents([\r\n                    UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\r\n                ], view.viewWasTappedFunction);\r\n            }\r\n            // Adding event target\r\n            view.addTargetForControlEvents([\r\n                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\r\n            ], viewWasTapped);\r\n            view.viewWasTappedFunction = viewWasTapped;\r\n            return view;\r\n        }.bind(this);\r\n        this._keyValueStringFilter = new UIKeyValueStringFilter();\r\n    }\r\n    openDropdown() {\r\n        this._dialogView.showInView(this.rootView, YES);\r\n        this._searchTextField.focus();\r\n    }\r\n    closeDropdown() {\r\n        this._dialogView.dismiss(YES);\r\n    }\r\n    boundsDidChange() {\r\n        super.boundsDidChange();\r\n        this.setNeedsLayout();\r\n    }\r\n    set dropdownCode(dropdownCode) {\r\n        this._dropdownCode = dropdownCode;\r\n        this.fetchDropdownDataForCode(dropdownCode);\r\n    }\r\n    get dropdownCode() {\r\n        return this._dropdownCode;\r\n    }\r\n    fetchDropdownDataForCode(dropdownCode) {\r\n        CBCore.sharedInstance.socketClient.sendMessageForKeyWithPolicy(\"RetrieveDropdownDataForCode\", dropdownCode, CBSocketClient.completionPolicy.storedOrFirst, function (responseMessage) {\r\n            if (IS(responseMessage)) {\r\n                //alert(\"Loaded data.\")\r\n            }\r\n            else {\r\n                //alert(\"Failed to load data.\")\r\n                return;\r\n            }\r\n            const dropdownData = [];\r\n            responseMessage.data.forEach(function (sectionOrRow, index, array) {\r\n                if (sectionOrRow.isADropdownDataSection) {\r\n                    const dataSection = {\r\n                        _id: sectionOrRow._id,\r\n                        title: sectionOrRow.title,\r\n                        rowsData: [],\r\n                        isADropdownDataSection: YES,\r\n                        isADropdownDataRow: NO,\r\n                        attachedObject: sectionOrRow.attachedObject,\r\n                        itemCode: sectionOrRow.itemCode,\r\n                        dropdownCode: sectionOrRow.dropdownCode\r\n                    };\r\n                    const rowsData = dataSection.rowsData;\r\n                    sectionOrRow.rowsData.forEach(function (rowData, index, array) {\r\n                        rowsData.push({\r\n                            _id: rowData._id,\r\n                            title: rowData.title,\r\n                            isADropdownDataSection: NO,\r\n                            isADropdownDataRow: YES,\r\n                            attachedObject: rowData.attachedObject,\r\n                            itemCode: rowData.itemCode,\r\n                            dropdownCode: rowData.dropdownCode\r\n                        });\r\n                    });\r\n                    dataSection.rowsData = rowsData;\r\n                    dropdownData.push(dataSection);\r\n                }\r\n                else {\r\n                    dropdownData.push({\r\n                        _id: sectionOrRow._id,\r\n                        title: sectionOrRow.title,\r\n                        isADropdownDataRow: YES,\r\n                        itemCode: sectionOrRow.itemCode,\r\n                        dropdownCode: sectionOrRow.dropdownCode,\r\n                        attachedObject: sectionOrRow.attachedObject\r\n                    });\r\n                }\r\n            });\r\n            this.data = dropdownData;\r\n            this.didLoadDataForDropdownCode();\r\n        }.bind(this));\r\n    }\r\n    didLoadDataForDropdownCode() {\r\n    }\r\n    get focusedRowIndex() {\r\n        return this._focusedRowIndex;\r\n    }\r\n    set focusedRowIndex(focusedRowIndex) {\r\n        const previousFocusedRowIndex = this.focusedRowIndex;\r\n        this._focusedRowIndex = focusedRowIndex;\r\n        if (previousFocusedRowIndex != focusedRowIndex) {\r\n            this._tableView.visibleRowWithIndex(previousFocusedRowIndex).focused = NO;\r\n            const focusedRow = this._tableView.visibleRowWithIndex(this.focusedRowIndex);\r\n            focusedRow.focused = YES;\r\n            if (!this.keepFocusedRowVisible) {\r\n                return;\r\n            }\r\n            var contentOffset = this._tableView.contentOffset;\r\n            if (focusedRow.frame.y < contentOffset.y) {\r\n                contentOffset.y = focusedRow.frame.y;\r\n            }\r\n            if (focusedRow.frame.max.y > (contentOffset.y + this._tableView.bounds.height)) {\r\n                contentOffset = contentOffset.pointByAddingY(-(contentOffset.y + this._tableView.bounds.height -\r\n                    focusedRow.frame.max.y));\r\n            }\r\n            const animationDuration = this._tableView.animationDuration;\r\n            this._tableView.animationDuration = 0;\r\n            this._tableView.contentOffset = contentOffset;\r\n            this._tableView.animationDuration = animationDuration;\r\n        }\r\n    }\r\n    set expandedContainerViewHeight(expandedContainerViewHeight) {\r\n        this._expandedContainerViewHeight = expandedContainerViewHeight;\r\n        this._dialogView.setNeedsLayout();\r\n    }\r\n    get expandedContainerViewHeight() {\r\n        if (IS(this._expandedContainerViewHeight)) {\r\n            return this._expandedContainerViewHeight;\r\n        }\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding;\r\n        const result = this.superview.bounds.height - this.frame.max.y - padding;\r\n        return result;\r\n    }\r\n    selectedDataContains(datapoint) {\r\n        for (var i = 0; i < this.selectedData.length; i++) {\r\n            const value = this.selectedData[i];\r\n            if (value._id == datapoint._id) {\r\n                return YES;\r\n            }\r\n        }\r\n        return NO;\r\n    }\r\n    updateContentForNormalState() {\r\n        this.style.borderBottom = \"1px solid rgba(0,0,0,0.12)\";\r\n        this.titleLabel.textColor = CBColor.primaryContentColor;\r\n        this.backgroundColor = UIColor.transparentColor;\r\n        this.style.borderBottomColor = CBColor.primaryContentColor.colorWithAlpha(0.12).stringValue;\r\n    }\r\n    updateContentForHighlightedState() {\r\n        this.style.borderBottomWidth = \"2px\";\r\n        this.style.borderBottomColor = this.tintColor.stringValue;\r\n    }\r\n    selectionDidChange(selectedRows) {\r\n        // Update title to indicate the selection\r\n        this.updateTitleWithSelection(selectedRows);\r\n        this.sendControlEventForKey(SearchableDropdown.controlEvent.SelectionDidChange, nil);\r\n    }\r\n    updateContentForCurrentSelection() {\r\n        // Update selected rows in the top of the table view\r\n        this._tableView.reloadData();\r\n        this.setNeedsLayout();\r\n    }\r\n    get placeholderText() {\r\n        if (IS_UNDEFINED(this._placeholderText)) {\r\n            this._placeholderText = \"Not selected\";\r\n        }\r\n        return this._placeholderText;\r\n    }\r\n    set placeholderText(placeholderText) {\r\n        this._placeholderText = placeholderText;\r\n        this.updateTitleWithSelection(this.selectedData);\r\n    }\r\n    setPlaceholderText(key, defaultString, parameters) {\r\n        this.placeholderLocalizedTextObject = LanguageService.localizedTextObjectForKey(key, defaultString, parameters);\r\n        //this.titleLabel.setText(key, defaultString, parameters);\r\n    }\r\n    get placeholderLocalizedTextObject() {\r\n        if (IS_UNDEFINED(this._placeholderLocalizedTextObject)) {\r\n            this._placeholderLocalizedTextObject = LanguageService.localizedTextObjectForKey(\"searchableDropdownNotSelected\");\r\n        }\r\n        return this._placeholderLocalizedTextObject;\r\n    }\r\n    set placeholderLocalizedTextObject(placeholderText) {\r\n        this._placeholderLocalizedTextObject = placeholderText;\r\n        this.updateTitleWithSelection(this.selectedData);\r\n    }\r\n    updateTitleWithSelection(selectedRows) {\r\n        this.titleLabel.localizedTextObject = this.placeholderLocalizedTextObject;\r\n        if (selectedRows && selectedRows.length) {\r\n            const maxWidth = this.titleLabel.bounds.width;\r\n            this.titleLabel.localizedTextObject = nil;\r\n            this.titleLabel.text = \"\";\r\n            var stopLooping = NO;\r\n            selectedRows.forEach(function (selectedDatapoint, index, array) {\r\n                if (stopLooping) {\r\n                    return;\r\n                }\r\n                var selectedString = LanguageService.stringForCurrentLanguage(selectedDatapoint.title);\r\n                if (index) {\r\n                    selectedString = \", \" + selectedString;\r\n                }\r\n                const previousText = this.titleLabel.text;\r\n                this.titleLabel.text = this.titleLabel.text + selectedString;\r\n                this.overflowLabel.text = \"+\" + (array.length - index - 1);\r\n                if (index == array.length - 1) {\r\n                    this.overflowLabel.text = \"\";\r\n                }\r\n                if (index && (this.bounds.width -\r\n                    (this.overflowLabel.intrinsicContentWidth() + this.titleLabel.intrinsicContentWidth()) - 20) < 0) {\r\n                    this.titleLabel.text = previousText;\r\n                    this.overflowLabel.text = \"+\" + (array.length - index - 2 * 0);\r\n                    stopLooping = YES;\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n    updateFilteredData(filteringString) {\r\n        this._filteredData = [];\r\n        this.data.forEach(function (sectionOrRow, index, array) {\r\n            if (LanguageService.stringForCurrentLanguage(sectionOrRow.title).toLowerCase().contains(filteringString.toLowerCase())) {\r\n                this.filteredData.push(sectionOrRow);\r\n            }\r\n            else if (sectionOrRow.isADropdownDataSection) {\r\n                this._keyValueStringFilter.filterData(filteringString, sectionOrRow.rowsData, this._excludedData, \"title.\" + LanguageService.currentLanguageKey, sectionOrRow, function (filteredData, filteredIndexes, sectionFromThread) {\r\n                    if (filteredData.length) {\r\n                        this.filteredData.push({\r\n                            _id: sectionFromThread._id,\r\n                            title: sectionFromThread.title,\r\n                            rowsData: filteredData,\r\n                            isADropdownDataSection: sectionFromThread.isADropdownDataSection,\r\n                            isADropdownDataRow: sectionFromThread.isADropdownDataRow,\r\n                            attachedObject: sectionFromThread.attachedObject,\r\n                            itemCode: sectionFromThread.itemCode,\r\n                            dropdownCode: sectionFromThread.dropdownCode\r\n                        });\r\n                        if (this.allowsCustomItem && this._searchTextField.text && this._customItem) {\r\n                            this.filteredData.removeElement(this._customItem);\r\n                            this.filteredData.push(this._customItem);\r\n                        }\r\n                        this._isDrawingDataValid = NO;\r\n                        this._tableView.reloadData();\r\n                    }\r\n                }.bind(this));\r\n            }\r\n        }.bind(this));\r\n        if (this.allowsCustomItem && this._searchTextField.text) {\r\n            this.filteredData.removeElement(this._customItem);\r\n            this.initCustomItemWithTitle(this._searchTextField.text);\r\n            this.filteredData.push(this._customItem);\r\n        }\r\n        if (this.filteredData.length) {\r\n            this.focusedRowIndex = 0;\r\n        }\r\n        else {\r\n            this.focusedRowIndex = null;\r\n        }\r\n        this._isDrawingDataValid = NO;\r\n        this._tableView.reloadData();\r\n    }\r\n    initCustomItemWithTitle(title) {\r\n        if (IS_NOT(title)) {\r\n            this._customItem = undefined;\r\n        }\r\n        else {\r\n            this._customItem = {\r\n                _id: \"\" + MAKE_ID(),\r\n                title: LanguageService.localizedTextObjectForText(title),\r\n                rowsData: [],\r\n                isADropdownDataSection: NO,\r\n                isADropdownDataRow: YES,\r\n                attachedObject: undefined,\r\n                itemCode: \"custom_item\",\r\n                dropdownCode: this.dropdownCode\r\n            };\r\n        }\r\n    }\r\n    selectItemOrCustomItemWithTitle(title) {\r\n        if (IS_NOT(title)) {\r\n            this._customItem = undefined;\r\n        }\r\n        else {\r\n            var item = this.drawingData.find(function (dataItem, index, array) {\r\n                return (LanguageService.stringForCurrentLanguage(dataItem.title) == title);\r\n            });\r\n            if (this.allowsCustomItem && IS_NOT(item)) {\r\n                this._searchTextField.text = title;\r\n                this.updateFilteredData(title);\r\n                item = this._customItem;\r\n            }\r\n            if (IS_NOT(this.isSingleSelection)) {\r\n                if (IS_NOT(this.selectedDataContains(item))) {\r\n                    const selectedItemCodes = this.selectedItemCodes.copy();\r\n                    selectedItemCodes.push(item.itemCode);\r\n                    this.selectedItemCodes = selectedItemCodes;\r\n                }\r\n                return;\r\n            }\r\n            this.selectedItemCodes = [item.itemCode];\r\n        }\r\n    }\r\n    set data(data) {\r\n        this._data = data;\r\n        this.updateFilteredData(this._searchTextField.text);\r\n    }\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    set filteredData(data) {\r\n        this._filteredData = data;\r\n        this._isDrawingDataValid = NO;\r\n    }\r\n    get filteredData() {\r\n        return this._filteredData;\r\n    }\r\n    get drawingData() {\r\n        if (this._isDrawingDataValid) {\r\n            return this._drawingData;\r\n        }\r\n        const result = [];\r\n        this._filteredData.forEach(function (section) {\r\n            result.push({\r\n                _id: section._id,\r\n                title: section.title,\r\n                // @ts-ignore\r\n                rowsData: null,\r\n                isADropdownDataSection: section.isADropdownDataSection,\r\n                isADropdownDataRow: NO,\r\n                attachedObject: section.attachedObject,\r\n                itemCode: section.itemCode,\r\n                dropdownCode: section.dropdownCode\r\n            });\r\n            if (section.rowsData) {\r\n                section.rowsData.forEach(function (row) {\r\n                    result.push(row);\r\n                }.bind(this));\r\n            }\r\n        }.bind(this));\r\n        this._drawingData = result;\r\n        this._isDrawingDataValid = YES;\r\n        return result;\r\n    }\r\n    get selectedData() {\r\n        return this._selectedData;\r\n    }\r\n    set selectedData(selectedData) {\r\n        this._selectedData = selectedData;\r\n    }\r\n    clearSelection() {\r\n        this.selectedData = [];\r\n        this.selectedIndices = [];\r\n        this.updateTitleWithSelection(this.selectedData);\r\n        this.updateContentForCurrentSelection();\r\n        this.selectionDidChange(this.selectedData);\r\n    }\r\n    get selectedItemCodes() {\r\n        return this.selectedData.map(function (item) {\r\n            return item.itemCode;\r\n        });\r\n    }\r\n    set selectedItemCodes(selectedItemCodes) {\r\n        const selectedData = [];\r\n        const selectedIndices = [];\r\n        this._drawingData.forEach(function (item, index, array) {\r\n            if (selectedItemCodes.contains(item.itemCode)) {\r\n                selectedData.push(item);\r\n                selectedIndices.push(index);\r\n            }\r\n        });\r\n        this.selectedData = selectedData;\r\n        this.selectedIndices = selectedIndices;\r\n        this.updateTitleWithSelection(this.selectedData);\r\n        this.updateContentForCurrentSelection();\r\n        this.selectionDidChange(this.selectedData);\r\n    }\r\n    get selectedRowIdentifiers() {\r\n        const result = [];\r\n        this.selectedData.forEach(function (selectedDatapoint) {\r\n            result.push(selectedDatapoint._id);\r\n        }.bind(this));\r\n        return result;\r\n    }\r\n    wasAddedToViewTree() {\r\n        super.wasAddedToViewTree();\r\n        this.setNeedsLayout();\r\n    }\r\n    layoutSubviews() {\r\n        super.layoutSubviews();\r\n        const bounds = this.bounds;\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding;\r\n        this.updateTitleWithSelection(this.selectedData);\r\n        if (this._rightImageView) {\r\n            // var imageHeight = bounds.height - padding;\r\n            // this._rightImageView.frame = new UIRectangle(bounds.width - imageHeight - padding * 0.5, padding * 0.5, imageHeight, imageHeight);\r\n            this._rightImageView.frame = bounds.rectangleWithInsets(0, padding *\r\n                0.5, 0, 0).rectangleWithWidth(24, 1).rectangleWithHeight(24, 0.5);\r\n        }\r\n        if (this.overflowLabel) {\r\n            //this.overflowLabel.frame = bounds.rectangleWithInsets(padding, padding, 0, 0).rectangleWithInsets(0, this._rightImageView.bounds.width || 0, 0, 0).rectangleWithWidth(36, 1);\r\n            //this.titleLabel.style.maxWidth = \"\" + (bounds.width - (bounds.width - this.titleLabel.viewHTMLElement.offsetLeft - (this.overflowLabel.frame.x || 0)))\r\n            this.overflowLabel.style.width = \"36px\";\r\n            this.overflowLabel.style.right = \"32px\";\r\n            this.overflowLabel.centerYInContainer();\r\n            this.titleLabel.style.marginRight = \"60px\";\r\n            //this.overflowLabel.centerYInContainer();\r\n            //this.titleLabel.frame = this.titleLabel.frame.rectangleWithWidth(bounds.width - (bounds.width - this.titleLabel.frame.x - (this.overflowLabel.frame.x || 0)))\r\n        }\r\n    }\r\n}\r\nSearchableDropdown.controlEvent = Object.assign({}, UIView.controlEvent, {\r\n    \"SelectionDidChange\": \"SelectionDidChange\"\r\n});\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBColor.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBCore.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBDataInterfaces.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBSocketClient.ts","/Users/mart/UICoreApplication/webclient/scripts/RootViewParameters.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBCheckbox.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/SearchableDropdownRow.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/SearchTextField.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/Custom components/SearchableDropdown.d.ts","writeByteOrderMark":false,"text":"import { UIButton, UIColor, UIDialogView, UIImageView, UIKeyValueStringFilter, UILocalizedTextObject, UITableView, UITextView, UIView } from \"uicore-ts\";\r\nimport { CBDropdownDataItem } from \"../CBCore/CBDataInterfaces\";\r\nimport { SearchTextField } from \"./SearchTextField\";\r\nexport declare class SearchableDropdown<T> extends UIButton {\r\n    _keyValueStringFilter: UIKeyValueStringFilter;\r\n    _containerView: UIView;\r\n    _searchTextField: SearchTextField;\r\n    _dialogView: UIDialogView;\r\n    _tableView: UITableView;\r\n    _rightImageView: UIImageView;\r\n    highlightLabel: UITextView;\r\n    _data: CBDropdownDataItem<T>[];\r\n    _filteredData: CBDropdownDataItem<T>[];\r\n    _excludedData: string[];\r\n    tintColor: UIColor;\r\n    overflowLabel: UITextView;\r\n    selectedIndices: number[];\r\n    _selectedData: CBDropdownDataItem<T>[];\r\n    _drawingData: CBDropdownDataItem<T>[];\r\n    _isDrawingDataValid: boolean;\r\n    _placeholderText: string;\r\n    _expandedContainerViewHeight: number;\r\n    isSingleSelection: boolean;\r\n    showsSelectedSectionInMultipleSelectionMode: boolean;\r\n    _dropdownCode: string;\r\n    allowsCustomItem: boolean;\r\n    _customItem: CBDropdownDataItem<any>;\r\n    _focusedRowIndex: number;\r\n    keepFocusedRowVisible: boolean;\r\n    _placeholderLocalizedTextObject: UILocalizedTextObject;\r\n    constructor(elementID: string);\r\n    initView(elementID: any, viewHTMLElement: any, initViewData: any): void;\r\n    openDropdown(): void;\r\n    closeDropdown(): void;\r\n    boundsDidChange(): void;\r\n    set dropdownCode(dropdownCode: string);\r\n    get dropdownCode(): string;\r\n    fetchDropdownDataForCode(dropdownCode: string): void;\r\n    didLoadDataForDropdownCode(): void;\r\n    get focusedRowIndex(): number;\r\n    set focusedRowIndex(focusedRowIndex: number);\r\n    set expandedContainerViewHeight(expandedContainerViewHeight: number);\r\n    get expandedContainerViewHeight(): number;\r\n    selectedDataContains(datapoint: CBDropdownDataItem<T>): boolean;\r\n    updateContentForNormalState(): void;\r\n    updateContentForHighlightedState(): void;\r\n    static controlEvent: {\r\n        PointerDown: string;\r\n        PointerMove: string;\r\n        PointerLeave: string;\r\n        PointerEnter: string;\r\n        PointerUpInside: string;\r\n        PointerTap: string;\r\n        PointerUp: string;\r\n        MultipleTouches: string;\r\n        PointerCancel: string;\r\n        PointerHover: string;\r\n        EnterDown: string;\r\n        EnterUp: string;\r\n        EscDown: string;\r\n        TabDown: string;\r\n        LeftArrowDown: string;\r\n        RightArrowDown: string;\r\n        DownArrowDown: string;\r\n        UpArrowDown: string;\r\n        Focus: string;\r\n        Blur: string;\r\n    } & {\r\n        SelectionDidChange: string;\r\n    };\r\n    selectionDidChange(selectedRows: CBDropdownDataItem<T>[]): void;\r\n    updateContentForCurrentSelection(): void;\r\n    get placeholderText(): string;\r\n    set placeholderText(placeholderText: string);\r\n    setPlaceholderText(key: string, defaultString: string, parameters?: {\r\n        [x: string]: string;\r\n    }): void;\r\n    get placeholderLocalizedTextObject(): UILocalizedTextObject;\r\n    set placeholderLocalizedTextObject(placeholderText: UILocalizedTextObject);\r\n    updateTitleWithSelection(selectedRows: CBDropdownDataItem<T>[]): void;\r\n    updateFilteredData(filteringString: string): void;\r\n    initCustomItemWithTitle(title: string): void;\r\n    selectItemOrCustomItemWithTitle(title: string): void;\r\n    set data(data: CBDropdownDataItem<T>[]);\r\n    get data(): CBDropdownDataItem<T>[];\r\n    set filteredData(data: CBDropdownDataItem<T>[]);\r\n    get filteredData(): CBDropdownDataItem<T>[];\r\n    get drawingData(): CBDropdownDataItem<T>[];\r\n    get selectedData(): CBDropdownDataItem<T>[];\r\n    set selectedData(selectedData: CBDropdownDataItem<T>[]);\r\n    clearSelection(): void;\r\n    get selectedItemCodes(): string[];\r\n    set selectedItemCodes(selectedItemCodes: string[]);\r\n    get selectedRowIdentifiers(): string[];\r\n    wasAddedToViewTree(): void;\r\n    layoutSubviews(): void;\r\n}\r\n"}}
