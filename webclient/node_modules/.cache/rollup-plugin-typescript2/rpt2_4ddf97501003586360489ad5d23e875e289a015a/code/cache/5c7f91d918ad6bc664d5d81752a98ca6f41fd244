{"code":"import { IF, IS, IS_NOT_NIL, nil, UIView } from \"uicore-ts\";\r\nexport class RowView extends UIView {\r\n    constructor(elementID, cells = [], cellWidths = []) {\r\n        super(elementID);\r\n        this.padding = 0;\r\n        this._rowHeight = 50;\r\n        this._class = RowView;\r\n        this.superclass = UIView;\r\n        this._cells = cells;\r\n        this._cellWeights = cellWidths;\r\n    }\r\n    get cells() {\r\n        return this._cells;\r\n    }\r\n    set cells(cells) {\r\n        const previousCells = this.cells;\r\n        const cellWeights = this.cellWeights.copy();\r\n        // The cells are added to this._cells in this.addCell()\r\n        previousCells.copy().forEach(function (cell, index, array) {\r\n            if (!cells.contains(cell)) {\r\n                cell.removeFromSuperview();\r\n                this._cells.removeElement(cell);\r\n                cellWeights[index] = nil;\r\n            }\r\n        }.bind(this));\r\n        this.cellWeights = cellWeights.filter((value, index, array) => IS_NOT_NIL(value));\r\n        cells.copy().forEach(function (cell, index, array) {\r\n            if (!IS(cell.superview)) {\r\n                this.addCell(cell, 1, index);\r\n            }\r\n        }, this);\r\n        this._previousLayoutBounds = nil;\r\n        this.setNeedsLayout();\r\n    }\r\n    removeCellAtIndex(index) {\r\n        const remainingCells = this.cells.copy();\r\n        remainingCells.removeElementAtIndex(index);\r\n        this.cellWeights.removeElementAtIndex(index);\r\n        this.cells = remainingCells;\r\n    }\r\n    removeFirstCell() {\r\n        this.removeCellAtIndex(0);\r\n    }\r\n    removeLastCell() {\r\n        this.removeCellAtIndex(this.cells.length - 1);\r\n    }\r\n    addCell(cell, weight = 1, index = this.cells.length) {\r\n        if (this.cells.contains(cell) && IS_NOT_NIL(cell)) {\r\n            return;\r\n        }\r\n        this.cells.insertElementAtIndex(index, cell);\r\n        this.cellWeights.insertElementAtIndex(index, weight);\r\n        this.addSubview(cell);\r\n        this.setNeedsLayout();\r\n    }\r\n    get cellWeights() {\r\n        return this._cellWeights;\r\n    }\r\n    set cellWeights(widths) {\r\n        this._cellWeights = widths;\r\n        this._previousLayoutBounds = nil;\r\n        this.setNeedsLayout();\r\n    }\r\n    get cellWidths() {\r\n        return this._cellWidths;\r\n    }\r\n    set cellWidths(widths) {\r\n        this._cellWidths = widths;\r\n        this._previousLayoutBounds = nil;\r\n        this.setNeedsLayout();\r\n    }\r\n    get rowHeight() {\r\n        var result = IF(this._rowHeight)(() => this._rowHeight)\r\n            .ELSE(() => this.cells.map((value, index, array) => value.intrinsicContentHeight(this.bounds.width)).max());\r\n        return result; //this.bounds.height\r\n    }\r\n    layoutSubviews() {\r\n        const bounds = this.bounds;\r\n        if (bounds.isEqualTo(this._previousLayoutBounds)) {\r\n            return;\r\n        }\r\n        super.layoutSubviews();\r\n        this._previousLayoutBounds = bounds;\r\n        bounds.distributeViewsAlongWidth(this._cells, this._cellWeights, this.padding, this._cellWidths);\r\n        this.cells.forEach(function (cell, index, array) {\r\n            cell.frame = cell.frame.rectangleWithHeight(this.rowHeight);\r\n        }.bind(this));\r\n    }\r\n}\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/Custom components/RowView.d.ts","writeByteOrderMark":false,"text":"import { UIRectangle, UIView } from \"uicore-ts\";\r\nexport declare class RowView<CellType extends UIView = UIView> extends UIView {\r\n    _previousLayoutBounds: UIRectangle;\r\n    _cells: CellType[];\r\n    _cellWeights: number[];\r\n    padding: number;\r\n    _cellWidths: number[];\r\n    _rowHeight: number;\r\n    constructor(elementID?: string, cells?: CellType[], cellWidths?: number[]);\r\n    get cells(): CellType[];\r\n    set cells(cells: CellType[]);\r\n    removeCellAtIndex(index: number): void;\r\n    removeFirstCell(): void;\r\n    removeLastCell(): void;\r\n    addCell(cell: CellType, weight?: number, index?: number): void;\r\n    get cellWeights(): number[];\r\n    set cellWeights(widths: number[]);\r\n    get cellWidths(): number[];\r\n    set cellWidths(widths: number[]);\r\n    get rowHeight(): any;\r\n    layoutSubviews(): void;\r\n}\r\n"}}
