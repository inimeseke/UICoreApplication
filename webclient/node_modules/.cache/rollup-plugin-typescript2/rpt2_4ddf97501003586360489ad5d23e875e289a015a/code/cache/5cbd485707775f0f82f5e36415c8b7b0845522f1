{"code":"import { FIRST, FIRST_OR_NIL, IS, IS_NOT, nil, UICoreValues, UILink, UIObject, UIRoute, YES } from \"uicore-ts\";\r\nimport { LanguageService } from \"../Custom components/LanguageService\";\r\nimport { CBServerClient } from \"./CBServerClient\";\r\nimport { CBSocketClient } from \"./CBSocketClient\";\r\nexport class CBCore extends UIObject {\r\n    constructor() {\r\n        super();\r\n        this._isUserLoggedIn = nil;\r\n        this._cachedMinimizedChatInquiryIDs = nil;\r\n        this._socketClient = new CBSocketClient(this);\r\n        this._serverClient = new CBServerClient(this);\r\n        this._functionsToCallForEachSocketClient = [];\r\n        this._models = [];\r\n        this._class = CBCore;\r\n        this.superclass = UIObject;\r\n        if (CBCoreInitializerObject) {\r\n            LanguageService.useStoredLanguageValues(CBCoreInitializerObject.languageValues);\r\n        }\r\n        window.addEventListener(\"storage\", function (event) {\r\n            if (event.newValue == event.oldValue) {\r\n                return;\r\n            }\r\n            //console.log(\"\" + event.key + \" changed to \" + event.newValue + \" from \" + event.oldValue);\r\n            if (event.key == \"CBLanguageKey\") {\r\n                this.didSetLanguageKey();\r\n            }\r\n        }.bind(this));\r\n        //this.checkIfUserIsAuthenticated();\r\n        this.didSetLanguageKey();\r\n    }\r\n    static get sharedInstance() {\r\n        if (!CBCore._sharedInstance) {\r\n            CBCore._sharedInstance = new CBCore();\r\n        }\r\n        return CBCore._sharedInstance;\r\n    }\r\n    broadcastMessageInRootViewTree(message) {\r\n        UICoreValues.main.rootViewController.view.broadcastEventInSubtree(message);\r\n    }\r\n    get socketClient() {\r\n        return this._socketClient;\r\n    }\r\n    get serverClient() {\r\n        return this._serverClient;\r\n    }\r\n    set isUserLoggedIn(isUserLoggedIn) {\r\n        const previousValue = this.isUserLoggedIn;\r\n        localStorage.setItem(\"CBIsUserLoggedIn\", \"\" + isUserLoggedIn);\r\n        //this._isUserLoggedIn = isUserLoggedIn;\r\n        this.didSetIsUserLoggedIn(previousValue);\r\n    }\r\n    didSetIsUserLoggedIn(previousValue) {\r\n        const isUserLoggedIn = this.isUserLoggedIn;\r\n        if (isUserLoggedIn && previousValue != isUserLoggedIn) {\r\n            // Send message to views\r\n            this.broadcastMessageInRootViewTree({\r\n                name: CBCore.broadcastEventName.userDidLogIn,\r\n                parameters: nil\r\n            });\r\n            this.updateLinkTargets();\r\n        }\r\n        else if (previousValue != isUserLoggedIn) {\r\n            this.performFunctionWithDelay(0.01, function () {\r\n                UIRoute.currentRoute.routeByRemovingComponentsOtherThanOnesNamed([\r\n                    \"settings\",\r\n                    \"inquiry\"\r\n                ]).apply();\r\n                this.broadcastMessageInRootViewTree({\r\n                    name: CBCore.broadcastEventName.userDidLogOut,\r\n                    parameters: nil\r\n                });\r\n                this.updateLinkTargets();\r\n            }.bind(this));\r\n        }\r\n    }\r\n    updateLinkTargets() {\r\n        UICoreValues.main.rootViewController.view.forEachViewInSubtree(function (view) {\r\n            if (view instanceof UILink) {\r\n                view.updateTarget();\r\n            }\r\n        });\r\n    }\r\n    get isUserLoggedIn() {\r\n        const result = (localStorage.getItem(\"CBIsUserLoggedIn\") == \"true\");\r\n        return result;\r\n    }\r\n    get userProfile() {\r\n        var result = nil;\r\n        try {\r\n            result = JSON.parse(localStorage.getItem(\"CBUserProfile\"));\r\n        }\r\n        catch (error) {\r\n        }\r\n        // if (IS_NOT(result)) {\r\n        //     // Get userID from inquiryAccessKey if possible\r\n        //     var inquiryKey = this.inquiryAccessKey;\r\n        //     if (IS(inquiryKey)) {\r\n        //         result = FIRST_OR_NIL(this.inquiriesModel.inquiriesByCurrentUser.firstElement).inquirer\r\n        //     }\r\n        // }\r\n        return FIRST_OR_NIL(result);\r\n    }\r\n    set userProfile(userProfile) {\r\n        if (IS_NOT(userProfile)) {\r\n            localStorage.removeItem(\"CBUserProfile\");\r\n        }\r\n        localStorage.setItem(\"CBUserProfile\", JSON.stringify(userProfile));\r\n        this.didSetUserProfile();\r\n    }\r\n    didSetUserProfile() {\r\n        this.isUserLoggedIn = IS(this.userProfile);\r\n    }\r\n    set languageKey(languageKey) {\r\n        if (IS_NOT(languageKey)) {\r\n            localStorage.removeItem(\"CBLanguageKey\");\r\n        }\r\n        localStorage.setItem(\"CBLanguageKey\", JSON.stringify(languageKey));\r\n        this.didSetLanguageKey();\r\n    }\r\n    get languageKey() {\r\n        const result = FIRST(localStorage.getItem(\"CBLanguageKey\"), LanguageService.defaultLanguageKey).replace(\"\\\"\", \"\").replace(\"\\\"\", \"\");\r\n        return result;\r\n    }\r\n    didSetLanguageKey() {\r\n        UIRoute.currentRoute.routeWithComponent(\"settings\", { \"language\": this.languageKey }, YES).applyByReplacingCurrentRouteInHistory();\r\n    }\r\n    get externalServiceIdentifier() {\r\n        const result = JSON.parse(localStorage.getItem(\"CBExternalServiceIdentifier\"));\r\n        return result;\r\n    }\r\n    set externalServiceIdentifier(externalServiceIdentifier) {\r\n        localStorage.setItem(\"CBExternalServiceIdentifier\", JSON.stringify(externalServiceIdentifier));\r\n    }\r\n    reloadSocketConnection() {\r\n        // @ts-ignore\r\n        this.socketClient.socket.disconnect();\r\n        const messagesToBeSent = this.socketClient._messagesToBeSent.filter(function (messageItem, index, array) {\r\n            return (!messageItem.isBoundToUserWithID || messageItem.isBoundToUserWithID ==\r\n                CBCore.sharedInstance.userProfile._id);\r\n        });\r\n        this._socketClient = new CBSocketClient(this);\r\n        this._socketClient._messagesToBeSent = messagesToBeSent;\r\n        const socketClient = this._socketClient;\r\n        this._models.forEach(function (model, index, array) {\r\n            model.setSocketClient(socketClient);\r\n        });\r\n        this._functionsToCallForEachSocketClient.forEach(function (functionToCall, index, array) {\r\n            functionToCall();\r\n        });\r\n    }\r\n    callFunctionForEachSocketClient(functionToCall) {\r\n        this._functionsToCallForEachSocketClient.push(functionToCall);\r\n        functionToCall();\r\n    }\r\n}\r\nCBCore.broadcastEventName = {\r\n    \"userDidLogIn\": \"UserDidLogIn\",\r\n    \"userDidLogOut\": \"UserDidLogOut\"\r\n};\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBDataInterfaces.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBServerClient.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBSocketClient.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/CBCore/CBCore.d.ts","writeByteOrderMark":false,"text":"import { UIObject, UIViewBroadcastEvent } from \"uicore-ts\";\r\nimport { CBUserProfile } from \"./CBDataInterfaces\";\r\nimport { CBServerClient } from \"./CBServerClient\";\r\nimport { CBSocketClient } from \"./CBSocketClient\";\r\nexport declare class CBCore extends UIObject {\r\n    private static _sharedInstance;\r\n    _isUserLoggedIn: boolean;\r\n    _cachedMinimizedChatInquiryIDs: string[];\r\n    _socketClient: CBSocketClient;\r\n    _serverClient: CBServerClient;\r\n    _functionsToCallForEachSocketClient: (() => void)[];\r\n    _models: any[];\r\n    constructor();\r\n    static get sharedInstance(): CBCore;\r\n    static broadcastEventName: {\r\n        userDidLogIn: string;\r\n        userDidLogOut: string;\r\n    };\r\n    broadcastMessageInRootViewTree(message: UIViewBroadcastEvent): void;\r\n    get socketClient(): CBSocketClient;\r\n    get serverClient(): CBServerClient;\r\n    set isUserLoggedIn(isUserLoggedIn: boolean);\r\n    didSetIsUserLoggedIn(previousValue: boolean): void;\r\n    private updateLinkTargets;\r\n    get isUserLoggedIn(): boolean;\r\n    get userProfile(): CBUserProfile;\r\n    set userProfile(userProfile: CBUserProfile);\r\n    didSetUserProfile(): void;\r\n    set languageKey(languageKey: string);\r\n    get languageKey(): string;\r\n    didSetLanguageKey(): void;\r\n    get externalServiceIdentifier(): {\r\n        accessKey: string;\r\n        serviceID: string;\r\n        organizationID: string;\r\n    };\r\n    set externalServiceIdentifier(externalServiceIdentifier: {\r\n        accessKey: string;\r\n        serviceID: string;\r\n        organizationID: string;\r\n    });\r\n    reloadSocketConnection(): void;\r\n    callFunctionForEachSocketClient(functionToCall: () => void): void;\r\n}\r\n"}}
