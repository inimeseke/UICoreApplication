{"code":"import { __awaiter } from \"tslib\";\r\nimport { EXTEND, FIRST_OR_NIL, IS, IS_NOT, LAZY_VALUE, nil, NO, UIColor, UICore, UIDialogView, UIObject, UIRectangle, UIRoute, UITextView, UIView, UIViewController, wrapInNil, YES } from \"uicore-ts\";\r\nimport { BottomBarView } from \"./BottomBarView\";\r\nimport { CBColor } from \"./CBCore/CBColor\";\r\nimport { CBCore } from \"./CBCore/CBCore\";\r\nimport { SocketClient } from \"./CBCore/CBSocketClient\";\r\nimport { CBDialogView } from \"./Custom components/CBDialogView\";\r\nimport { CBDialogViewShower } from \"./Custom components/CBDialogViewShower\";\r\nimport { LanguageService } from \"./Custom components/LanguageService\";\r\nimport { InformationViewController } from \"./InformationViewController\";\r\nimport { InternalDropdownSettingsViewController } from \"./InternalDropdownSettingsViewController\";\r\nimport { InternalLanguageSettingsViewController } from \"./InternalLanguageSettingsViewController\";\r\nimport { LanguagesDialogView } from \"./LanguagesDialogView\";\r\nimport { RootViewParameters } from \"./RootViewParameters\";\r\nimport { SomeContentViewController } from \"./SomeContentViewController\";\r\nimport { TopBarView } from \"./TopBarView\";\r\nclass RootViewController extends UIViewController {\r\n    constructor(view) {\r\n        // Calling super\r\n        super(view);\r\n        this.languagesDialogViewController = new UIViewController(new LanguagesDialogView(\"LanguagesDialogView\"));\r\n        this.contentViewControllers = {\r\n            informationViewController: this.lazyContentViewControllerObjectWithClass(InformationViewController),\r\n            internalDropdownSettingsViewController: this.lazyContentViewControllerObjectWithClass(InternalDropdownSettingsViewController, () => __awaiter(this, void 0, void 0, function* () { return IS((yield SocketClient.AreCBInternalSettingsAvailableForCurrentUser()).result); })),\r\n            internalLanguageSettingsViewController: this.lazyContentViewControllerObjectWithClass(InternalLanguageSettingsViewController, () => __awaiter(this, void 0, void 0, function* () { return IS((yield SocketClient.AreCBInternalSettingsAvailableForCurrentUser()).result); }))\r\n        };\r\n        // Introspection variables\r\n        // this.class = RootViewController;\r\n        // this.superclass = UIViewController;\r\n        // Instance variables, initialize to nil or empty function, do not leave undefined to avoid excessive if blocks\r\n        // this._firstView = nil;\r\n        // this._secondView = nil;\r\n        // this._testView = nil;\r\n        // this._button = nil;\r\n        // The nil object avoids unneccessary crashes by allowing you to call any function or access any variable on it, returning nil\r\n        // Define properties with get and set functions so they can be accessed and set like variables\r\n        // Name variables that should be private, like property variables, with a _ sign, this also holds for private functions\r\n        // Avoid accessing variables and functions named with _ from outside as this creates strong coupling and hinders stability\r\n        // Code for further setup if necessary\r\n    }\r\n    loadIntrospectionVariables() {\r\n        super.loadIntrospectionVariables();\r\n        this.superclass = UIViewController;\r\n        this.startTime = Date.now();\r\n    }\r\n    lazyContentViewControllerObjectWithClass(classObject, shouldShow = () => YES) {\r\n        const result = {\r\n            class: classObject,\r\n            instance: nil,\r\n            shouldShow: shouldShow,\r\n            isInitialized: NO\r\n        };\r\n        UIObject.configureWithObject(result, {\r\n            // @ts-ignore\r\n            instance: LAZY_VALUE(() => {\r\n                result.isInitialized = YES;\r\n                return new classObject(new UIView(classObject.name.replace(\"ViewController\", \"View\")));\r\n            })\r\n        });\r\n        return result;\r\n    }\r\n    loadSubviews() {\r\n        UITextView.defaultTextColor = CBColor.primaryContentColor;\r\n        // Top bar\r\n        this.topBarView = new TopBarView(\"TopBarView\", nil);\r\n        this.view.addSubview(this.topBarView);\r\n        // Bottom bar\r\n        this.bottomBarView = new BottomBarView(\"BottomBarView\").configuredWithObject({\r\n            style: { overflow: \"hidden\" }\r\n        });\r\n        this.view.addSubview(this.bottomBarView);\r\n        // Main view\r\n        this.backgroundView = new UIView(\"RootViewBackgroundView\").configuredWithObject({\r\n            style: {\r\n                background: \"url(images/carrum_beta_wide.svg), linear-gradient(\" +\r\n                    CBColor.primaryTintColor.stringValue + \", \" + CBColor.primaryTintColor.stringValue + \")\",\r\n                backgroundSize: \"cover\",\r\n                backgroundRepeat: \"no-repeat\"\r\n            }\r\n        });\r\n        this.view.addSubview(this.backgroundView);\r\n        this._detailsDialogView = new UIDialogView(this.view.elementID + \"DetailsDialogView\")\r\n            .configuredWithObject({\r\n            dismiss: EXTEND((animated) => UIRoute.currentRoute.routeByRemovingComponentNamed(\"language\")\r\n                .routeByRemovingComponentNamed(\"introduction\").apply())\r\n        });\r\n        // Creating the default view\r\n        //this.handleRoute(nil)\r\n        // Initializing CBCore if needed\r\n        CBCore.sharedInstance;\r\n    }\r\n    viewDidAppear() {\r\n        const _super = Object.create(null, {\r\n            viewDidAppear: { get: () => super.viewDidAppear }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            _super.viewDidAppear.call(this);\r\n            this.topBarView.setNeedsLayout();\r\n        });\r\n    }\r\n    handleRoute(route) {\r\n        const _super = Object.create(null, {\r\n            handleRoute: { get: () => super.handleRoute }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            _super.handleRoute.call(this, route);\r\n            LanguageService.updateCurrentLanguageKey();\r\n            const currentURL = \"\" + window.location;\r\n            if (IS(currentURL)) {\r\n                // noinspection ES6MissingAwait\r\n                SocketClient.RouteDidChange(currentURL);\r\n            }\r\n            const contentViewControllerObject = this.contentViewControllers.allValues.find((value) => IS(route.componentWithViewController(value.class)));\r\n            if (IS(contentViewControllerObject)) {\r\n                const shouldShow = yield contentViewControllerObject.shouldShow();\r\n                if (!shouldShow) {\r\n                    return;\r\n                }\r\n                // Show content view\r\n                this.contentViewController = contentViewControllerObject.instance;\r\n            }\r\n            else {\r\n                // Main view controller\r\n                if (!IS(this.mainViewController)) {\r\n                    this.mainViewController = new SomeContentViewController(new UIView(\"mainView\"));\r\n                    //this.mainViewController.view.backgroundColor = UIColor.blueColor;\r\n                }\r\n                this.contentViewController = this.mainViewController;\r\n            }\r\n            if (IS(route.componentWithName(\"language\"))) {\r\n                this.detailsViewController = this.languagesDialogViewController;\r\n            }\r\n            else if (IS(route.componentWithName(\"introduction\"))) {\r\n                // Show merchant introduction view\r\n                if (IS_NOT(this.merchantIntroductionDialogViewController)) {\r\n                    const dialogView = new CBDialogView();\r\n                    dialogView.view = new UIView();\r\n                    dialogView.initCancelButtonIfNeeded();\r\n                    dialogView.view.setInnerHTML(\"rootViewControllerFillProfileView\", \"Please fill your merchant profile\");\r\n                    dialogView.titleLabel.style.whiteSpace = \"pre-wrap\";\r\n                    dialogView.backgroundColor = UIColor.whiteColor;\r\n                    // @ts-ignore\r\n                    const imgLoad = imagesLoaded(dialogView.viewHTMLElement);\r\n                    const imagesDidLoad = function (instance) {\r\n                        console.log(\"ALWAYS - all images have been loaded\");\r\n                        dialogView.setNeedsLayoutUpToRootView();\r\n                        imgLoad.off(\"always\", imagesDidLoad);\r\n                    }.bind(this);\r\n                    imgLoad.on(\"always\", imagesDidLoad);\r\n                    this.merchantIntroductionDialogViewController = new UIViewController(dialogView);\r\n                }\r\n                this.detailsViewController = this.merchantIntroductionDialogViewController;\r\n            }\r\n            else if (IS(route) && IS(this.detailsViewController)) {\r\n                this.detailsViewController = nil;\r\n                this._detailsDialogView.dismiss();\r\n                this._layoutViewSubviews();\r\n            }\r\n            const messageDialogComponent = route.componentWithName(\"alert\");\r\n            if (IS(messageDialogComponent)) {\r\n                const titleText = LanguageService.stringForKey(messageDialogComponent.parameters.title_key, LanguageService.currentLanguageKey, \"Title\");\r\n                CBDialogViewShower.alert(titleText, function () {\r\n                    UIRoute.currentRoute.routeByRemovingComponentNamed(messageDialogComponent.name).apply();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    viewDidReceiveBroadcastEvent(event) {\r\n        super.viewDidReceiveBroadcastEvent(event);\r\n        if (event.name == CBCore.broadcastEventName.userDidLogIn || event.name ==\r\n            CBCore.broadcastEventName.userDidLogOut) {\r\n            this.handleRoute(UIRoute.currentRoute);\r\n        }\r\n        if (event.name == UIView.broadcastEventName.LanguageChanged) {\r\n            this.detailsViewController = nil;\r\n            this._detailsDialogView.dismiss();\r\n            this._layoutViewSubviews();\r\n        }\r\n    }\r\n    set contentViewController(controller) {\r\n        if (this.contentViewController == controller) {\r\n            return;\r\n        }\r\n        if (this.contentViewController) {\r\n            this.removeChildViewController(this.contentViewController);\r\n        }\r\n        this._contentViewController = controller;\r\n        this.addChildViewControllerInContainer(controller, this.backgroundView);\r\n        this._layoutViewSubviews();\r\n        // this.contentViewController.view.setBorder(5, nil)\r\n        // this.contentViewController.view.style.overflow = \"scroll\";\r\n        //this.contentViewController.view.style.borderRadius = \"5px\";\r\n        this.contentViewController.view.style.boxShadow = \"0 3px 6px 0 rgba(0, 0, 0, 0.1)\";\r\n        this.view.setNeedsLayout();\r\n    }\r\n    get contentViewController() {\r\n        return this._contentViewController || nil;\r\n    }\r\n    set detailsViewController(controller) {\r\n        if (this.detailsViewController == controller) {\r\n            return;\r\n        }\r\n        if (this.detailsViewController) {\r\n            this.removeChildViewController(this.detailsViewController);\r\n        }\r\n        this._detailsViewController = controller;\r\n        if (!IS(controller)) {\r\n            return;\r\n        }\r\n        this.addChildViewControllerInDialogView(controller, this._detailsDialogView);\r\n        this._layoutViewSubviews();\r\n        this.detailsViewController.view.style.borderRadius = \"5px\";\r\n        this._detailsDialogView.showInView(this.view, YES);\r\n    }\r\n    get detailsViewController() {\r\n        return this._detailsViewController;\r\n    }\r\n    get paddingLength() {\r\n        return RootViewParameters.paddingLength;\r\n    }\r\n    updatePageScale() {\r\n        const actualPageWidth = (UIView.pageWidth * UIView.pageScale).integerValue;\r\n        const minScaleWidth = 700;\r\n        const maxScaleWidth = 1500;\r\n        const minScale = 0.7;\r\n        const maxScale = 1;\r\n        let scale = minScale + (maxScale - minScale) *\r\n            ((actualPageWidth - minScaleWidth) / (maxScaleWidth - minScaleWidth));\r\n        scale = Math.min(scale, maxScale);\r\n        scale = Math.max(scale, minScale);\r\n        UIView.pageScale = scale;\r\n    }\r\n    updateViewConstraints() {\r\n    }\r\n    updateViewStyles() {\r\n        //this.view.initStyleSelector(\"#\" + this.view.viewHTMLElement.id, \"left: 0; bottom: 0; right: 0; top: 0;\");\r\n    }\r\n    viewDidLayoutSubviews() {\r\n        super.viewDidLayoutSubviews();\r\n        //console.log(\"Loading took \" + (Date.now() - this.startTime) + \"ms\");\r\n    }\r\n    layoutViewsManually() {\r\n        super.layoutViewsManually();\r\n        this.updatePageScale();\r\n        // View bounds\r\n        const bounds = this.view.bounds;\r\n        // Top bar\r\n        this.topBarView.frame = new UIRectangle(0, 0, 65, bounds.width);\r\n        this.backgroundView.style.top = \"\" + this.topBarView.frame.height.integerValue + \"px\";\r\n        this.backgroundView.style.width = \"100%\";\r\n        this.backgroundView.style.height = \"fit-content\";\r\n        this.backgroundView.style.minHeight = \"\" +\r\n            (bounds.height - this.topBarView.frame.height - this.bottomBarView.frame.height).integerValue + \"px\";\r\n        this.contentViewController.view.style.position = \"relative\";\r\n        this.contentViewController.view.style.bottom = \"0\";\r\n        this.contentViewController.view.style.top = \"0\";\r\n        this.contentViewController.view.style.width = \"100%\";\r\n        this.contentViewController.view.setNeedsLayout();\r\n        if (1000 < this.backgroundView.bounds.width) {\r\n            this.contentViewController.view.style.marginBottom = \"\" +\r\n                Math.min((this.backgroundView.bounds.width - 1000) * 0.5, this.paddingLength).integerValue + \"px\";\r\n            this.contentViewController.view.style.marginTop = \"\" +\r\n                Math.min((this.backgroundView.bounds.width - 1000) * 0.5, this.paddingLength).integerValue + \"px\";\r\n            this.contentViewController.view.style.maxWidth = \"1000px\";\r\n            this.contentViewController.view.style.left = \"\" +\r\n                ((this.backgroundView.bounds.width - this.contentViewController.view.bounds.width) * 0.5).integerValue +\r\n                \"px\";\r\n        }\r\n        else {\r\n            this.contentViewController.view.style.margin = \"\";\r\n            this.contentViewController.view.style.left = \"\";\r\n            this.contentViewController.view.style.maxWidth = \"\";\r\n        }\r\n        this.contentViewController._layoutViewSubviews();\r\n        var contentViewControllerViewHeight = this.contentViewController.view.intrinsicContentHeight(this.contentViewController.view.bounds.width);\r\n        const detailsViewControllerViewHeight = FIRST_OR_NIL(this.detailsViewController).view.intrinsicContentHeight(this.contentViewController.view.bounds.width);\r\n        if (detailsViewControllerViewHeight > contentViewControllerViewHeight) {\r\n            contentViewControllerViewHeight = detailsViewControllerViewHeight;\r\n        }\r\n        this.contentViewController.view.style.height = \"\" + contentViewControllerViewHeight.integerValue + \"px\";\r\n        this.contentViewController.view.setNeedsLayout();\r\n        if (IS(this.detailsViewController)) {\r\n            var offset = -0.5 * (this.contentViewController.view.frame.width + this.paddingLength);\r\n            if (this.contentViewController.view.frame.x + offset < this.paddingLength) {\r\n                offset = this.paddingLength - this.contentViewController.view.frame.x;\r\n            }\r\n            this.contentViewController.view.style.transform = \"translateX(\" + 0 + \"px)\";\r\n            this.detailsViewController.view.frame = this.backgroundView.frame.rectangleWithInset(this.paddingLength).rectangleWithWidth(this.contentViewController.view.bounds.width, 0.5).rectangleWithHeight(Math.max(this.detailsViewController.view.intrinsicContentHeight(this.detailsViewController.view.bounds.width), this.contentViewController.view.bounds.height));\r\n        }\r\n        else {\r\n            this.contentViewController.view.style.transform = \"translateX(\" + 0 + \"px)\";\r\n        }\r\n        this.bottomBarView.frame = this.backgroundView.frame.rectangleWithY(this.backgroundView.frame.max.y).rectangleWithHeight(Math.max(100, this.bottomBarView.intrinsicContentHeight(this.backgroundView.frame.width)));\r\n        wrapInNil(this._detailsDialogView).setMaxSizes(this.bottomBarView.frame.max.y);\r\n    }\r\n}\r\ntry {\r\n    // @ts-ignore\r\n    var languageKey = (localStorage.getItem(\"CBLanguageKey\") || CBCoreInitializerObject.defaultLanguageKey || \"en\").replace(\"\\\"\", \"\").replace(\"\\\"\", \"\");\r\n    var loadingLabelElement = document.getElementById(\"LoadingLabel\");\r\n    var loadingTextObject = { \"en\": \"Loading.\" };\r\n    loadingLabelElement.innerHTML = (loadingTextObject[languageKey] || loadingTextObject[\"en\"]);\r\n    new UICore(\"RootView\", RootViewController);\r\n    var loadingViewElement = document.getElementById(\"LoadingView\");\r\n    var rootViewElement = document.getElementById(\"RootView\");\r\n    rootViewElement.removeChild(loadingViewElement);\r\n}\r\ncatch (exception) {\r\n    console.log(exception);\r\n    //window.location = \"/unsupported\";\r\n}\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/BottomBarView.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBColor.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBCore.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBSocketClient.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBDialogView.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBDialogViewShower.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts","/Users/mart/UICoreApplication/webclient/scripts/InformationViewController.ts","/Users/mart/UICoreApplication/webclient/scripts/InternalDropdownSettingsViewController.ts","/Users/mart/UICoreApplication/webclient/scripts/InternalLanguageSettingsViewController.ts","/Users/mart/UICoreApplication/webclient/scripts/LanguagesDialogView.ts","/Users/mart/UICoreApplication/webclient/scripts/RootViewParameters.ts","/Users/mart/UICoreApplication/webclient/scripts/SomeContentViewController.ts","/Users/mart/UICoreApplication/webclient/scripts/TopBarView.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/RootViewController.d.ts","writeByteOrderMark":false,"text":"export {};\r\n"}}
