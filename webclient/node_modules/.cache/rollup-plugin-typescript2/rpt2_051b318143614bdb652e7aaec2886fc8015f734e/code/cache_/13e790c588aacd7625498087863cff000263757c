{"code":"import { IS, nil, NO, UIActionIndicator, UIButton, UIColor, UICoreValues, UIDialogView, UIImageView, UIObject, UIRectangle, UITextView, YES } from \"uicore-ts\";\r\nimport { CBColor } from \"../CBCore/CBColor\";\r\nimport { RootViewParameters } from \"../RootViewParameters\";\r\nimport { CBDialogView } from \"./CBDialogView\";\r\nimport { LanguageService } from \"./LanguageService\";\r\nexport class CBDialogViewShower extends UIObject {\r\n    constructor(elementID) {\r\n        super();\r\n        this._class = CBDialogViewShower;\r\n        this.superclass = UIObject;\r\n        this.dialogView = new UIDialogView();\r\n        this.dialogView.view = new CBDialogView(elementID);\r\n        this.dialogView.view.backgroundColor = UIColor.whiteColor;\r\n        const dialogLayoutFunction = this.dialogView.layoutSubviews.bind(this.dialogView);\r\n        this.dialogView.layoutSubviews = function () {\r\n            dialogLayoutFunction();\r\n            this.dialogView.view.frame = new UIRectangle(0, 0, window.innerHeight, window.innerWidth).rectangleWithHeight(this.dialogView.view.intrinsicContentHeight(this.getDialogWidth()), 0.5).rectangleWithWidth(this.getDialogWidth(), 0.5);\r\n            this.dialogView.frame = UICoreValues.main.rootViewController.view.bounds;\r\n        }.bind(this);\r\n        this.dialogView.view.yesButton.addTargetForControlEvents([\r\n            UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\r\n        ], function (sender, event) {\r\n            this.yesButtonWasPressed();\r\n        }.bind(this));\r\n        this.dialogView.view.noButton.addTargetForControlEvents([\r\n            UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown\r\n        ], function (sender, event) {\r\n            this.noButtonWasPressed();\r\n        }.bind(this));\r\n    }\r\n    getDialogWidth() {\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding * 0.75;\r\n        var result = 250;\r\n        const width = this.dialogView.view.titleLabel.intrinsicContentWidth() + padding * 2;\r\n        result = Math.max(result, this.dialogView.view.view.intrinsicContentWidth(this.dialogView.view.view.viewHTMLElement.naturalHeight || 1000000000));\r\n        result = Math.max(result, width);\r\n        result = Math.min(result, 1000);\r\n        const dialogMaxWidth = (this.dialogView.superview ||\r\n            { \"bounds\": new UIRectangle(0, 0, 0, result) }).bounds.width;\r\n        result = Math.min(result, dialogMaxWidth);\r\n        return result;\r\n    }\r\n    yesButtonWasPressed() {\r\n    }\r\n    noButtonWasPressed() {\r\n    }\r\n    cancelButtonWasPressed() {\r\n    }\r\n    showQuestionDialogInRootView(titleTextObject, questionTextObject) {\r\n        this.dialogView.view.initTitleLabelIfNeeded();\r\n        this.dialogView.view.titleLabel.localizedTextObject = titleTextObject;\r\n        this.dialogView.view.initQuestionLabelIfNeeded();\r\n        if (IS(questionTextObject)) {\r\n            this.dialogView.view.questionLabel.localizedTextObject = questionTextObject;\r\n        }\r\n        this.dialogView.view.initYesNoButtonsIfNeeded();\r\n        this.dialogView.view.noButton.addTargetForControlEvents([\r\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\r\n        ], function (sender, event) {\r\n            this.noButtonWasPressed();\r\n        }.bind(this));\r\n        this.dialogView.view.yesButton.addTargetForControlEvents([\r\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\r\n        ], function (sender, event) {\r\n            this.yesButtonWasPressed();\r\n        }.bind(this));\r\n        this.dialogView.showInRootView(YES);\r\n    }\r\n    showMessageDialogInRootView(titleTextObject) {\r\n        this.dialogView.view.initTitleLabelIfNeeded();\r\n        this.dialogView.view.titleLabel.localizedTextObject = titleTextObject;\r\n        this.dialogView.view.initCancelButtonIfNeeded();\r\n        this.dialogView.view.cancelButton.addTargetForControlEvents([\r\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\r\n        ], function (sender, event) {\r\n            this.cancelButtonWasPressed();\r\n        }.bind(this));\r\n        this.dialogView.showInRootView(YES);\r\n        this.dialogView.view.cancelButton.focus();\r\n    }\r\n    showDialogInRootView(view) {\r\n        this.dialogView.view.view = view;\r\n        this.dialogView.view.initCancelButtonIfNeeded();\r\n        this.dialogView.view.cancelButton.addTargetForControlEvents([\r\n            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\r\n        ], function (sender, event) {\r\n            this.cancelButtonWasPressed();\r\n        }.bind(this));\r\n        this.dialogView.showInRootView(YES);\r\n        this.dialogView.view.cancelButton.focus();\r\n    }\r\n    showImageDialogInRootView(imageURL, deleteImageCallback) {\r\n        var loadingLabel = new UITextView();\r\n        loadingLabel.text = \"Loading image.\";\r\n        loadingLabel.textAlignment = UITextView.textAlignment.center;\r\n        this.dialogView.view.view = loadingLabel;\r\n        const imageView = new UIImageView();\r\n        imageView.imageSource = imageURL;\r\n        imageView.viewHTMLElement.onload = (event) => {\r\n            this.dialogView.view.view = imageView;\r\n            imageView.setNeedsLayoutUpToRootView();\r\n        };\r\n        imageView.fillMode = UIImageView.fillMode.aspectFitIfLarger;\r\n        if (IS(deleteImageCallback)) {\r\n            this.dialogView.view.initYesNoButtonsIfNeeded();\r\n            this.dialogView.view.yesButton.titleLabel.text = \"Close\";\r\n            this.dialogView.view.noButton.titleLabel.text = \"Delete\";\r\n            this.dialogView.view.noButtonDismissesDialog = NO;\r\n            this.dialogView.view.noButton.addTargetForControlEvents([\r\n                UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\r\n            ], function (sender, event) {\r\n                const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(function () {\r\n                    //this.dialogView.dismiss()\r\n                }.bind(this));\r\n                var textObject = LanguageService.localizedTextObjectForText(\"Delete this image.\");\r\n                dialogShower.showQuestionDialogInRootView(textObject);\r\n                dialogShower.yesButtonWasPressed = function () {\r\n                    deleteImageCallback();\r\n                    dialogShower.dialogView.dismiss();\r\n                };\r\n            }.bind(this));\r\n            this.dialogView.view.yesButton.addTargetForControlEvents([\r\n                UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside\r\n            ], function (sender, event) {\r\n                this.dialogView.dismiss();\r\n            }.bind(this));\r\n        }\r\n        else {\r\n            this.dialogView.view.initCancelButtonIfNeeded();\r\n            this.dialogView.view.cancelButton.titleLabel.text = \"Close\";\r\n        }\r\n        this.dialogView.showInRootView(YES);\r\n        this.dialogView.view.cancelButton.focus();\r\n    }\r\n    showActionIndicatorDialogInRootView(message) {\r\n        const actionIndicator = new UIActionIndicator();\r\n        this.dialogView.zIndex = 150;\r\n        this.dialogView.view.view = actionIndicator;\r\n        actionIndicator.style.minHeight = \"100px\";\r\n        this.dialogView.view.initQuestionLabelIfNeeded();\r\n        this.dialogView.view.questionLabel.text = message;\r\n        actionIndicator.start();\r\n        this.dialogView.view.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.5);\r\n        this.dialogView.view.questionLabel.textColor = UIColor.whiteColor;\r\n        this.dialogView.dismissesOnTapOutside = NO;\r\n        CBDialogViewShower.currentActionIndicatorDialogViewShower = this;\r\n        this.dialogView.showInRootView(NO);\r\n        this.dialogView.view.cancelButton.focus();\r\n    }\r\n    static showNextDialog() {\r\n        (CBDialogViewShower.nextShowDialogFunctions.firstElement || nil)();\r\n        CBDialogViewShower.nextShowDialogFunctions.removeElementAtIndex(0);\r\n    }\r\n    static alert(text, dismissCallback = nil) {\r\n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);\r\n        const textObject = LanguageService.localizedTextObjectForText(text);\r\n        const showDialogFunction = dialogShower.showMessageDialogInRootView.bind(dialogShower, textObject);\r\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);\r\n    }\r\n    static localizedAlert(textObject, dismissCallback = nil) {\r\n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);\r\n        const showDialogFunction = dialogShower.showMessageDialogInRootView.bind(dialogShower, textObject);\r\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);\r\n    }\r\n    static showQuestionDialog(questionText, dismissCallback = nil) {\r\n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);\r\n        const textObject = LanguageService.localizedTextObjectForText(questionText);\r\n        const showDialogFunction = dialogShower.showQuestionDialogInRootView.bind(dialogShower, textObject);\r\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);\r\n        return dialogShower;\r\n    }\r\n    static showImageDialog(imageURL, deleteImageCallback = nil, dismissCallback = nil) {\r\n        var dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);\r\n        var showDialogFunction = dialogShower.showImageDialogInRootView.bind(dialogShower, imageURL, deleteImageCallback);\r\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);\r\n        return dialogShower;\r\n    }\r\n    static showDialog(view, dismissCallback = nil) {\r\n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);\r\n        const showDialogFunction = dialogShower.showDialogInRootView.bind(dialogShower, view);\r\n        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);\r\n        return dialogShower;\r\n    }\r\n    static showActionIndicatorDialog(message, dismissCallback = nil) {\r\n        if (IS(CBDialogViewShower.currentActionIndicatorDialogViewShower)) {\r\n            CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.view.questionLabel.text = message;\r\n            CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.view.setNeedsLayoutUpToRootView();\r\n            return;\r\n        }\r\n        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);\r\n        dialogShower.showActionIndicatorDialogInRootView(message);\r\n        return dialogShower;\r\n    }\r\n    static hideActionIndicatorDialog() {\r\n        CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.dismiss();\r\n        CBDialogViewShower.currentActionIndicatorDialogViewShower = nil;\r\n    }\r\n    static _dialogShowerWithDismissCallback(dismissCallback) {\r\n        const dialogShower = new CBDialogViewShower();\r\n        const dismissFunction = dialogShower.dialogView.dismiss.bind(dialogShower.dialogView);\r\n        dialogShower.dialogView.dismiss = function () {\r\n            dismissFunction();\r\n            dismissCallback();\r\n            CBDialogViewShower.currentDialogViewShower = null;\r\n            CBDialogViewShower.showNextDialog();\r\n        };\r\n        return dialogShower;\r\n    }\r\n    static _showDialogWithFunction(showDialogFunction, dialogShower) {\r\n        if (IS(CBDialogViewShower.currentDialogViewShower)) {\r\n            CBDialogViewShower.nextShowDialogFunctions.push(showDialogFunction);\r\n        }\r\n        else {\r\n            CBDialogViewShower.currentDialogViewShower = dialogShower;\r\n            showDialogFunction();\r\n        }\r\n    }\r\n}\r\nCBDialogViewShower.nextShowDialogFunctions = [];\r\nCBDialogViewShower.currentActionIndicatorDialogViewShower = nil;\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBColor.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBDataInterfaces.ts","/Users/mart/UICoreApplication/webclient/scripts/RootViewParameters.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBDialogView.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/Custom components/CBDialogViewShower.d.ts","writeByteOrderMark":false,"text":"import { UIDialogView, UIObject, UIView } from \"uicore-ts\";\r\nimport { CBLocalizedTextObject } from \"../CBCore/CBDataInterfaces\";\r\nimport { CBDialogView } from \"./CBDialogView\";\r\nexport declare class CBDialogViewShower extends UIObject {\r\n    dialogView: UIDialogView<CBDialogView>;\r\n    static currentDialogViewShower: CBDialogViewShower;\r\n    static nextShowDialogFunctions: Function[];\r\n    static currentActionIndicatorDialogViewShower: CBDialogViewShower;\r\n    constructor(elementID?: string);\r\n    getDialogWidth(): number;\r\n    yesButtonWasPressed(): void;\r\n    noButtonWasPressed(): void;\r\n    cancelButtonWasPressed(): void;\r\n    showQuestionDialogInRootView(titleTextObject?: CBLocalizedTextObject, questionTextObject?: CBLocalizedTextObject): void;\r\n    showMessageDialogInRootView(titleTextObject?: CBLocalizedTextObject): void;\r\n    showDialogInRootView(view: UIView): void;\r\n    showImageDialogInRootView(imageURL: string, deleteImageCallback?: Function): void;\r\n    showActionIndicatorDialogInRootView(message: string): void;\r\n    static showNextDialog(): void;\r\n    static alert(text: string, dismissCallback?: Function): void;\r\n    static localizedAlert(textObject: CBLocalizedTextObject, dismissCallback?: Function): void;\r\n    static showQuestionDialog(questionText: string, dismissCallback?: Function): CBDialogViewShower;\r\n    static showImageDialog(imageURL: string, deleteImageCallback?: Function, dismissCallback?: Function): CBDialogViewShower;\r\n    static showDialog(view: UIView, dismissCallback?: Function): CBDialogViewShower;\r\n    static showActionIndicatorDialog(message: string, dismissCallback?: Function): CBDialogViewShower;\r\n    static hideActionIndicatorDialog(): void;\r\n    private static _dialogShowerWithDismissCallback;\r\n    private static _showDialogWithFunction;\r\n}\r\n"}}
