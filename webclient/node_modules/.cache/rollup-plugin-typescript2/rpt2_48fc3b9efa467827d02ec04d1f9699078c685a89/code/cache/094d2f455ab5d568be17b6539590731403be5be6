{"code":"import { __awaiter } from \"tslib\";\r\nimport { FIRST, IS, IS_DEFINED, IS_NOT, MAKE_ID, nil, NO, UIColor, UITextArea, UITextView, UIView, UIViewController, YES } from \"uicore-ts\";\r\nimport { CBColor } from \"./CBCore/CBColor\";\r\nimport { CBCore } from \"./CBCore/CBCore\";\r\nimport { SocketClient } from \"./CBCore/CBSocketClient\";\r\nimport { CBButton } from \"./Custom components/CBButton\";\r\nimport { CBCheckbox } from \"./Custom components/CBCheckbox\";\r\nimport { CBDialogViewShower } from \"./Custom components/CBDialogViewShower\";\r\nimport { CBTextField } from \"./Custom components/CBTextField\";\r\nimport { LanguageService } from \"./Custom components/LanguageService\";\r\nimport { SearchableDropdown } from \"./Custom components/SearchableDropdown\";\r\nimport { RootViewParameters } from \"./RootViewParameters\";\r\nexport class InternalDropdownSettingsViewController extends UIViewController {\r\n    constructor(view) {\r\n        // Calling super\r\n        super(view);\r\n        // Code for further setup if necessary\r\n    }\r\n    loadIntrospectionVariables() {\r\n        super.loadIntrospectionVariables();\r\n        this.superclass = UIViewController;\r\n    }\r\n    loadSubviews() {\r\n        this.view.backgroundColor = UIColor.whiteColor;\r\n        this.titleLabel = new UITextView(this.view.elementID + \"TitleLabel\", UITextView.type.header2);\r\n        this.titleLabel.text = \"Internal dropdown settings\";\r\n        this.view.addSubview(this.titleLabel);\r\n        this.dropdownCodeTextField = new CBTextField(this.view.elementID + \"DropdownCodeTextField\");\r\n        this.dropdownCodeTextField.placeholderText = \"Dropdown code\";\r\n        this.view.addSubview(this.dropdownCodeTextField);\r\n        this.dropdownCodesTextArea = new UITextArea(this.view.elementID + \"DropdownCodesTextArea\");\r\n        this.dropdownCodesTextArea.placeholderText = \"Available dropdown codes\";\r\n        this.view.addSubview(this.dropdownCodesTextArea);\r\n        this.loadButton = new CBButton(this.view.elementID + \"LoadButton\");\r\n        this.loadButton.titleLabel.text = \"Load\";\r\n        this.view.addSubview(this.loadButton);\r\n        this.saveButton = new CBButton(this.view.elementID + \"SaveButton\");\r\n        this.saveButton.titleLabel.setText(\"internalDropdownSettingsViewControllerSaveButton\", \"Save\");\r\n        this.view.addSubview(this.saveButton);\r\n        // this.textArea = new UITextArea(this.view.elementID + \"TextArea\")\r\n        // this.view.addSubview(this.textArea)\r\n        this.dropdown = new SearchableDropdown(this.view.elementID + \"SearchableDropdown\");\r\n        this.dropdown._controlEventTargets[UIView.controlEvent.PointerUpInside] = [];\r\n        this.dropdown._controlEventTargets[UIView.controlEvent.EnterDown] = [];\r\n        this.dropdown._dialogView = nil;\r\n        this.dropdown.isSingleSelection = YES;\r\n        this.dropdown._rightImageView.imageSource = nil;\r\n        this.dropdown.keepFocusedRowVisible = NO;\r\n        this.view.addSubview(this.dropdown);\r\n        this.dropdown._tableView.style.borderWidth = \"1px\";\r\n        this.dropdown._tableView.style.borderStyle = \"solid\";\r\n        this.dropdown._tableView.style.borderColor = CBColor.primaryContentColor.stringValue;\r\n        this.view.addSubview(this.dropdown._tableView);\r\n        this.addButton = new CBButton(this.view.elementID + \"AddButton\");\r\n        this.addButton.titleLabel.text = \"Add row\";\r\n        this.addButton.setBackgroundColorsWithNormalColor(UIColor.greenColor);\r\n        this.view.addSubview(this.addButton);\r\n        this.deleteButton = new CBButton(this.view.elementID + \"DeleteButton\");\r\n        this.deleteButton.titleLabel.text = \"Delete row\";\r\n        this.deleteButton.setBackgroundColorsWithNormalColor(UIColor.redColor);\r\n        this.view.addSubview(this.deleteButton);\r\n        this.deleteDropdownButton = new CBButton(this.view.elementID + \"DeleteDropdownButton\");\r\n        this.deleteDropdownButton.titleLabel.text = \"Delete dropdown\";\r\n        this.deleteDropdownButton.setBackgroundColorsWithNormalColor(UIColor.redColor);\r\n        this.view.addSubview(this.deleteDropdownButton);\r\n        this.clearDropdownButton = new CBButton(this.view.elementID + \"ClearDropdownButton\");\r\n        this.clearDropdownButton.titleLabel.text = \"Clear dropdown\";\r\n        this.clearDropdownButton.setBackgroundColorsWithNormalColor(UIColor.redColor);\r\n        this.view.addSubview(this.clearDropdownButton);\r\n        // Selecting of purpose of itemtitleTextArea\r\n        this.itemTitleCheckbox = new CBCheckbox(this.view.elementID + \"ItemTitleCheckbox\");\r\n        this.itemAttachedObjectCheckbox = new CBCheckbox(this.view.elementID + \"ItemTitleCheckbox\");\r\n        this.itemTitleCheckbox.titleLabel.text = \"Item title\";\r\n        this.itemAttachedObjectCheckbox.titleLabel.text = \"Attached object\";\r\n        this.itemTitleCheckbox.selected = YES;\r\n        this.view.addSubviews([this.itemTitleCheckbox, this.itemAttachedObjectCheckbox]);\r\n        this.itemTitleOrAttachedObjectTextArea = new UITextArea(this.view.elementID +\r\n            \"ItemTitleOrAttachedObjectTextArea\");\r\n        this.itemTitleOrAttachedObjectTextArea.placeholderText = \"Title\";\r\n        this.view.addSubview(this.itemTitleOrAttachedObjectTextArea);\r\n        this.itemTitleJSONLabel = new UITextView(this.view.elementID + \"ItemTitleJSONLabel\");\r\n        this.view.addSubview(this.itemTitleJSONLabel);\r\n        this.itemTitleDidChange();\r\n        this.isASectionCheckbox = new CBCheckbox(this.view.elementID + \"IsASectionCheckbox\");\r\n        this.isASectionCheckbox.titleLabel.text = \"Is a section\";\r\n        this.view.addSubview(this.isASectionCheckbox);\r\n        this.itemCodeTextField = new CBTextField(this.view.elementID + \"ItemCodeTextField\");\r\n        this.itemCodeTextField.placeholderText = \"Item code\";\r\n        this.view.addSubview(this.itemCodeTextField);\r\n        this.downButton = new CBButton(this.view.elementID + \"DownButton\");\r\n        this.downButton.titleLabel.text = \"Down\";\r\n        this.view.addSubview(this.downButton);\r\n        this.upButton = new CBButton(this.view.elementID + \"UpButton\");\r\n        this.upButton.titleLabel.text = \"Up\";\r\n        this.view.addSubview(this.upButton);\r\n        this.dataTextJSONLabel = new UITextView(this.view.elementID + \"DataTextJSONLabel\");\r\n        this.dataTextJSONLabel.text = \"Data in JSON format\";\r\n        this.view.addSubview(this.dataTextJSONLabel);\r\n        this.dataTextArea = new UITextArea(this.view.elementID + \"DataTextArea\");\r\n        this.dataTextArea.placeholderText = \"Data in JSON format\";\r\n        this.view.addSubview(this.dataTextArea);\r\n        this.loadPlainDataButton = new CBButton(this.view.elementID + \"LoadPlainDataButton\");\r\n        this.loadPlainDataButton.titleLabel.text = \"Load plain data\";\r\n        this.view.addSubview(this.loadPlainDataButton);\r\n        this.loadJSONDataButton = new CBButton(this.view.elementID + \"LoadJSONDataButton\");\r\n        this.loadJSONDataButton.titleLabel.text = \"Load JSON data\";\r\n        this.view.addSubview(this.loadJSONDataButton);\r\n        [\r\n            this.itemTitleCheckbox, this.itemAttachedObjectCheckbox\r\n        ].forEach(function (checkbox, index, array) {\r\n            checkbox.addTargetForControlEvents([\r\n                CBCheckbox.controlEvent.EnterDown, CBCheckbox.controlEvent.SelectionChange\r\n            ], function (sender, event) {\r\n                [\r\n                    this.itemTitleCheckbox, this.itemAttachedObjectCheckbox\r\n                ].forEach(function (checkboxObject, index, array) {\r\n                    checkboxObject.selected = (checkboxObject == sender);\r\n                });\r\n                this.updateitemDetailsView();\r\n            }.bind(this));\r\n        }.bind(this));\r\n        this.downButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            const data = this.dropdown.drawingData;\r\n            const rowIndex = this.dropdown.selectedIndices.firstElement;\r\n            if (this.dropdown.selectedData.firstElement && rowIndex < data.length - 1) {\r\n                const row = data[rowIndex];\r\n                data.removeElementAtIndex(rowIndex);\r\n                data.insertElementAtIndex(rowIndex + 1, row);\r\n                this.dropdown.selectedIndices[0] = rowIndex + 1;\r\n                this.dropdown._drawingData = data;\r\n                this.reloadTableData();\r\n            }\r\n        }.bind(this));\r\n        this.upButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            const data = this.dropdown.drawingData;\r\n            const rowIndex = this.dropdown.selectedIndices.firstElement;\r\n            if (this.dropdown.selectedData.firstElement && rowIndex > 0) {\r\n                const row = data[rowIndex];\r\n                data.removeElementAtIndex(rowIndex);\r\n                data.insertElementAtIndex(rowIndex - 1, row);\r\n                this.dropdown.selectedIndices[0] = rowIndex - 1;\r\n                this.dropdown._drawingData = data;\r\n                this.reloadTableData();\r\n            }\r\n        }.bind(this));\r\n        this.dropdown.addTargetForControlEvent(SearchableDropdown.controlEvent.SelectionDidChange, function (sender, event) {\r\n            this.updateitemDetailsView();\r\n        }.bind(this));\r\n        this.isASectionCheckbox.addTargetForControlEvent(CBCheckbox.controlEvent.SelectionChange, function (sender, event) {\r\n            const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n            selectedItem.isADropdownDataSection = sender.selected;\r\n            selectedItem.isADropdownDataRow = IS_NOT(sender.selected);\r\n            this.reloadTableData();\r\n        }.bind(this));\r\n        this.itemCodeTextField.textField.addTargetForControlEvent(UITextArea.controlEvent.TextChange, function (sender, event) {\r\n            const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n            selectedItem.itemCode = this.itemCodeTextField.text;\r\n        }.bind(this));\r\n        this.itemTitleOrAttachedObjectTextArea.addTargetForControlEvent(UITextArea.controlEvent.TextChange, function (sender, event) {\r\n            if (this.itemTitleCheckbox.selected) {\r\n                this.itemTitleDidChange();\r\n            }\r\n            else {\r\n                this.itemAttachedObjectDidChange();\r\n            }\r\n            this.reloadTableData();\r\n        }.bind(this));\r\n        //this.loadSubjectData()\r\n        this.updateAvailableCodes();\r\n        this.loadButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            this.loadData();\r\n        }.bind(this));\r\n        this.saveButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            CBCore.sharedInstance.socketClient.sendMessageForKey(\"RetrieveDropdownCodes\", nil, function (codes) {\r\n                this.saveData();\r\n            }.bind(this));\r\n        }.bind(this));\r\n        this.addButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            const title = JSON.parse(this.itemTitleOrAttachedObjectTextArea.text);\r\n            if (IS_NOT(LanguageService.stringForCurrentLanguage(title))) {\r\n                title[LanguageService.defaultLanguageKey] = \"<Title>\";\r\n            }\r\n            const itemID = MAKE_ID();\r\n            const dataRow = {\r\n                _id: itemID,\r\n                title: title,\r\n                isADropdownDataRow: !this.isASectionCheckbox.selected,\r\n                isADropdownDataSection: this.isASectionCheckbox.selected,\r\n                attachedObject: undefined,\r\n                itemCode: nil,\r\n                dropdownCode: (this.dropdown.selectedData.firstElement || {}).dropdownCodes\r\n            };\r\n            const rowIndex = this.dropdown.selectedIndices.firstElement;\r\n            if (IS_DEFINED(rowIndex)) {\r\n                this.dropdown.drawingData.insertElementAtIndex(rowIndex + 1, dataRow);\r\n                this.reloadTableData();\r\n            }\r\n            else {\r\n                this.dropdown.drawingData.push(dataRow);\r\n                this.reloadTableData();\r\n                this.dropdown._tableView.scrollToBottom();\r\n            }\r\n        }.bind(this));\r\n        this.deleteButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            const rowIndex = this.dropdown.selectedIndices.firstElement;\r\n            if (IS_DEFINED(rowIndex)) {\r\n                this.dropdown.drawingData.removeElementAtIndex(rowIndex);\r\n                this.dropdown.selectedData.removeElementAtIndex(0);\r\n                this.dropdown.selectedIndices.removeElementAtIndex(0);\r\n                this.dropdown.selectionDidChange(this.dropdown.selectedData);\r\n            }\r\n            this.reloadTableData();\r\n        }.bind(this));\r\n        this.deleteDropdownButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            if (this.dropdownCodeTextField.text && confirm(\"Are you sure you want to delete this dropdown?\")) {\r\n                if (this.dropdownCodeTextField.text &&\r\n                    confirm(\"This will REMOVE THE DROPDOWN FROM THE SERVER, are you definitely sure?\")) {\r\n                    CBCore.sharedInstance.socketClient.sendMessageForKey(\"DeleteDropdownDataForCode\", this.dropdownCodeTextField.text, function () {\r\n                        this.updateAvailableCodes();\r\n                    }.bind(this));\r\n                    this.dropdownCodeTextField.text = nil;\r\n                    this.dropdown.data = [];\r\n                    this.updateitemDetailsView();\r\n                }\r\n            }\r\n        }.bind(this));\r\n        this.clearDropdownButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            if (this.dropdownCodeTextField.text && confirm(\"Are you sure you want to clear this dropdown?\")) {\r\n                this.dropdown.data = [];\r\n                this.dropdown.selectedData = [];\r\n                this.dropdown.selectedIndices = [];\r\n                this.updateitemDetailsView();\r\n            }\r\n        }.bind(this));\r\n        this.loadPlainDataButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            this.loadPlainData();\r\n        }.bind(this));\r\n        this.loadJSONDataButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            this.loadJSONData();\r\n        }.bind(this));\r\n    }\r\n    reloadTableData() {\r\n        this.dropdown._tableView.reloadData();\r\n        const dataToShow = {};\r\n        this.dropdown.drawingData.forEach(function (dataItem, index, array) {\r\n            dataToShow[FIRST(dataItem.itemCode, dataItem._id)] = dataItem.title;\r\n        });\r\n        this.dataTextArea.text = JSON.stringify(dataToShow, null, 2);\r\n    }\r\n    updateAvailableCodes() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            var { result: codes } = yield SocketClient.RetrieveDropdownCodes();\r\n            this.dropdownCodesTextArea.text = \"Saved codes: \" + JSON.stringify(codes);\r\n            if (codes.length && IS_NOT(this.dropdownCodeTextField.text)) {\r\n                this.dropdownCodeTextField.text = codes.firstElement;\r\n                this.loadData();\r\n            }\r\n        });\r\n    }\r\n    updateitemDetailsView() {\r\n        const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n        if (IS(selectedItem)) {\r\n            if (this.itemTitleCheckbox.selected) {\r\n                this.itemTitleOrAttachedObjectTextArea.text = JSON.stringify(selectedItem.title, null, 2);\r\n                this.itemTitleDidChange();\r\n            }\r\n            else {\r\n                this.itemTitleOrAttachedObjectTextArea.text = JSON.stringify(selectedItem.attachedObject, null, 2);\r\n                this.itemAttachedObjectDidChange();\r\n            }\r\n            this.itemCodeTextField.text = selectedItem.itemCode;\r\n        }\r\n        this.isASectionCheckbox.selected = IS(selectedItem.isADropdownDataSection);\r\n    }\r\n    loadData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (IS_NOT(this.dropdownCodeTextField.text)) {\r\n                this.loadSubjectData();\r\n                return;\r\n            }\r\n            var { result: responseMessage } = yield SocketClient.RetrieveDropdownDataForCode(this.dropdownCodeTextField.text);\r\n            this._layoutViewSubviews();\r\n            if (IS(responseMessage)) {\r\n                CBDialogViewShower.alert(\"Loaded data.\");\r\n            }\r\n            else {\r\n                CBDialogViewShower.alert(\"Failed to load data.\");\r\n                return;\r\n            }\r\n            const dropdownData = [];\r\n            responseMessage.data.forEach(function (sectionOrRow, index, array) {\r\n                if (sectionOrRow.isADropdownDataSection) {\r\n                    const dataSection = {\r\n                        _id: sectionOrRow._id,\r\n                        title: sectionOrRow.title,\r\n                        rowsData: [],\r\n                        isADropdownDataSection: YES,\r\n                        isADropdownDataRow: NO,\r\n                        attachedObject: sectionOrRow.attachedObject,\r\n                        itemCode: sectionOrRow.itemCode,\r\n                        dropdownCode: sectionOrRow.dropdownCode\r\n                    };\r\n                    const rowsData = dataSection.rowsData;\r\n                    sectionOrRow.rowsData.forEach(function (rowData, index, array) {\r\n                        rowsData.push({\r\n                            _id: rowData._id,\r\n                            title: rowData.title,\r\n                            isADropdownDataSection: NO,\r\n                            isADropdownDataRow: YES,\r\n                            attachedObject: rowData.attachedObject,\r\n                            itemCode: rowData.itemCode,\r\n                            dropdownCode: rowData.dropdownCode\r\n                        });\r\n                    });\r\n                    dataSection.rowsData = rowsData;\r\n                    dropdownData.push(dataSection);\r\n                }\r\n                else {\r\n                    dropdownData.push({\r\n                        _id: sectionOrRow._id,\r\n                        title: sectionOrRow.title,\r\n                        attachedObject: sectionOrRow.attachedObject,\r\n                        isADropdownDataRow: YES,\r\n                        itemCode: sectionOrRow.itemCode,\r\n                        dropdownCode: sectionOrRow.dropdownCode\r\n                    });\r\n                }\r\n            });\r\n            this.dropdown.selectedData.removeElementAtIndex(0);\r\n            this.dropdown.selectedIndices.removeElementAtIndex(0);\r\n            this.dropdown.data = dropdownData;\r\n            this.reloadTableData();\r\n            this.updateitemDetailsView();\r\n        });\r\n    }\r\n    saveData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const uploadData = {\r\n                dropdownCode: this.dropdownCodeTextField.text,\r\n                data: []\r\n            };\r\n            var currentRowsTarget = uploadData.data;\r\n            this.dropdown.drawingData.forEach(function (item, index, array) {\r\n                if (item.isADropdownDataSection) {\r\n                    currentRowsTarget = [];\r\n                    uploadData.data.push({\r\n                        title: item.title,\r\n                        attachedObject: item.attachedObject,\r\n                        rowsData: currentRowsTarget,\r\n                        isADropdownDataSection: YES,\r\n                        isADropdownDataRow: NO,\r\n                        itemCode: FIRST(item.itemCode, item._id),\r\n                        dropdownCode: uploadData.dropdownCode\r\n                    });\r\n                }\r\n                else {\r\n                    currentRowsTarget.push({\r\n                        title: item.title,\r\n                        attachedObject: item.attachedObject,\r\n                        isADropdownDataSection: NO,\r\n                        isADropdownDataRow: YES,\r\n                        itemCode: FIRST(item.itemCode, item._id),\r\n                        dropdownCode: uploadData.dropdownCode\r\n                    });\r\n                }\r\n            }.bind(this));\r\n            // Send the data to server to be saved\r\n            var { result: response } = yield SocketClient.SaveDropdownData(uploadData);\r\n            this.updateAvailableCodes();\r\n            if (IS(response)) {\r\n                CBDialogViewShower.alert(\"Saved successfully.\");\r\n                this.loadData();\r\n            }\r\n            else {\r\n                CBDialogViewShower.alert(\"Failed to save dropdown data.\");\r\n            }\r\n        });\r\n    }\r\n    loadPlainData() {\r\n        const drawingData = [];\r\n        const lines = this.dataTextArea.text.split(\"\\n\");\r\n        lines.forEach(function (line, index, array) {\r\n            const lineItems = line.trim().split(\" \");\r\n            drawingData.push({\r\n                _id: \"\" + index,\r\n                title: {\r\n                    \"en\": lineItems.lastElement\r\n                },\r\n                isADropdownDataRow: YES,\r\n                isADropdownDataSection: NO,\r\n                attachedObject: undefined,\r\n                itemCode: lineItems.firstElement,\r\n                dropdownCode: this.dropdownCodeTextField.text\r\n            });\r\n        }.bind(this));\r\n        this.dropdown._drawingData = drawingData;\r\n        this.dropdown._isDrawingDataValid = YES;\r\n        this.reloadTableData();\r\n        if (this.dropdown.selectedIndices.length) {\r\n            this.dropdown._selectedData = [this.dropdown.drawingData[this.dropdown.selectedIndices.firstElement]];\r\n        }\r\n        this.updateitemDetailsView();\r\n    }\r\n    loadJSONData() {\r\n        const drawingData = [];\r\n        var itemTitles = {};\r\n        try {\r\n            itemTitles = JSON.parse(this.dataTextArea.text);\r\n        }\r\n        catch (exception) {\r\n            CBDialogViewShower.alert(exception);\r\n            return;\r\n        }\r\n        var index = 0;\r\n        itemTitles.forEach(function (itemTitle, itemCode) {\r\n            drawingData.push({\r\n                _id: \"\" + index,\r\n                title: itemTitle,\r\n                isADropdownDataRow: YES,\r\n                isADropdownDataSection: NO,\r\n                attachedObject: undefined,\r\n                itemCode: itemCode,\r\n                dropdownCode: this.dropdownCodeTextField.text\r\n            });\r\n            index = index + 1;\r\n        }.bind(this));\r\n        this.dropdown._drawingData = drawingData;\r\n        this.dropdown._isDrawingDataValid = YES;\r\n        this.reloadTableData();\r\n        if (this.dropdown.selectedIndices.length) {\r\n            this.dropdown._selectedData = [this.dropdown.drawingData[this.dropdown.selectedIndices.firstElement]];\r\n        }\r\n        this.updateitemDetailsView();\r\n    }\r\n    itemTitleDidChange() {\r\n        const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n        if (IS_NOT(this.itemTitleOrAttachedObjectTextArea.text) || this.itemTitleOrAttachedObjectTextArea.text ==\r\n            \"undefined\") {\r\n            this.itemTitleOrAttachedObjectTextArea.text = \"{  }\";\r\n        }\r\n        try {\r\n            const selectedItemTitle = JSON.parse(this.itemTitleOrAttachedObjectTextArea.text);\r\n            if (selectedItemTitle instanceof Object && !(selectedItemTitle instanceof Array)) {\r\n                this.itemTitleJSONLabel.textColor = CBColor.primaryContentColor;\r\n                this.itemTitleJSONLabel.text = \"No issues detected\";\r\n                //this.itemtitleTextArea.text = JSON.stringify(selectedItemTitle, null, 2)\r\n                selectedItem.title = selectedItemTitle;\r\n            }\r\n            else {\r\n                this.itemTitleJSONLabel.textColor = UIColor.redColor;\r\n                this.itemTitleJSONLabel.text = \"JSON has to describe a CBLocalizedTextObject.\";\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.itemTitleJSONLabel.text = error.message;\r\n            this.itemTitleJSONLabel.textColor = UIColor.redColor;\r\n        }\r\n    }\r\n    itemAttachedObjectDidChange() {\r\n        const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n        if (IS_NOT(this.itemTitleOrAttachedObjectTextArea.text) || this.itemTitleOrAttachedObjectTextArea.text ==\r\n            \"undefined\") {\r\n            this.itemTitleOrAttachedObjectTextArea.text = \"{ undefined }\";\r\n        }\r\n        try {\r\n            var selectedItemAttachedObject;\r\n            if (this.itemTitleOrAttachedObjectTextArea.text != \"{ undefined }\") {\r\n                selectedItemAttachedObject = JSON.parse(this.itemTitleOrAttachedObjectTextArea.text);\r\n            }\r\n            if (selectedItemAttachedObject == null ||\r\n                (selectedItemAttachedObject instanceof Object && !(selectedItemAttachedObject instanceof Array))) {\r\n                this.itemTitleJSONLabel.textColor = CBColor.primaryContentColor;\r\n                this.itemTitleJSONLabel.text = \"No issues detected\";\r\n                //this.itemtitleTextArea.text = JSON.stringify(selectedItemTitle, null, 2)\r\n                selectedItem.attachedObject = selectedItemAttachedObject;\r\n            }\r\n            else {\r\n                this.itemTitleJSONLabel.textColor = UIColor.redColor;\r\n                this.itemTitleJSONLabel.text = \"JSON has to describe an object.\";\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.itemTitleJSONLabel.text = error.message;\r\n            this.itemTitleJSONLabel.textColor = UIColor.redColor;\r\n        }\r\n    }\r\n    loadSubjectData() {\r\n        //this.dropdown.data = new EnterCarInquirySubjectDetailsTopRowView(\"asd\").dataForDropdown()\r\n    }\r\n    viewDidAppear() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n        });\r\n    }\r\n    viewWillDisappear() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n        });\r\n    }\r\n    handleRoute(route) {\r\n        const _super = Object.create(null, {\r\n            handleRoute: { get: () => super.handleRoute }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            _super.handleRoute.call(this, route);\r\n            const inquiryComponent = route.componentWithName(InternalDropdownSettingsViewController.routeComponentName);\r\n            this.reloadTableData();\r\n            route.didcompleteComponent(inquiryComponent);\r\n        });\r\n    }\r\n    updateViewConstraints() {\r\n        super.updateViewConstraints();\r\n    }\r\n    updateViewStyles() {\r\n        super.updateViewStyles();\r\n    }\r\n    viewDidLayoutSubviews() {\r\n        super.viewDidLayoutSubviews();\r\n    }\r\n    layoutViewsManually() {\r\n        super.layoutViewsManually();\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding;\r\n        // View bounds\r\n        const bounds = this.view.bounds.rectangleWithInset(padding);\r\n        this.titleLabel.frame = bounds.rectangleWithHeight(labelHeight * 2);\r\n        var rowFrame = this.titleLabel.frame.rectangleForNextRow(padding);\r\n        rowFrame.distributeViewsAlongWidth([this.dropdownCodeTextField, this.loadButton, this.saveButton], [\r\n            2, 1, 1\r\n        ], padding);\r\n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 5);\r\n        this.dropdownCodesTextArea.frame = rowFrame;\r\n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 2);\r\n        this.dropdown.frame = rowFrame.rectangleWithWidth(bounds.width * 0.5 - padding * 0.5);\r\n        this.dropdown._tableView.frame = this.dropdown.frame.rectangleForNextRow(padding, 500);\r\n        this.dropdown._tableView.setMargins(0, 0, padding, 0);\r\n        var deleteAddFrame = this.dropdown.frame.rectangleForNextColumn(padding * 0.5, this.dropdown.frame.width +\r\n            padding * 0.5);\r\n        deleteAddFrame.distributeViewsAlongWidth([this.deleteButton, this.addButton], 1, padding);\r\n        this.itemCodeTextField.frame = deleteAddFrame.rectangleForNextRow(padding);\r\n        var itemTextAreaPurposesFrame = this.itemCodeTextField.frame.rectangleForNextRow(padding, labelHeight * 2);\r\n        itemTextAreaPurposesFrame.distributeViewsEquallyAlongWidth([\r\n            this.itemTitleCheckbox, this.itemAttachedObjectCheckbox\r\n        ], padding);\r\n        this.itemTitleOrAttachedObjectTextArea.frame = itemTextAreaPurposesFrame.rectangleForNextRow(padding, labelHeight *\r\n            11);\r\n        this.itemTitleJSONLabel.frame = this.itemTitleOrAttachedObjectTextArea.frame.rectangleForNextRow(padding, labelHeight);\r\n        this.isASectionCheckbox.frame = this.itemTitleJSONLabel.frame.rectangleForNextRow(padding, labelHeight);\r\n        const downUpFrame = this.isASectionCheckbox.frame.rectangleForNextRow(padding, labelHeight * 2);\r\n        downUpFrame.distributeViewsAlongWidth([this.downButton, this.upButton], 1, padding);\r\n        downUpFrame.rectangleForNextRow(padding).distributeViewsEquallyAlongWidth([\r\n            this.deleteDropdownButton, this.clearDropdownButton\r\n        ], padding);\r\n        this.dataTextJSONLabel.frame = this.dropdownCodesTextArea.frame.rectangleWithY(this.dropdown._tableView.frame.max.y +\r\n            padding).rectangleWithHeight(labelHeight);\r\n        this.dataTextArea.frame = this.dataTextJSONLabel.frame.rectangleForNextRow(padding, 500);\r\n        this.dataTextArea.frame.rectangleForNextRow(padding, labelHeight *\r\n            2).distributeViewsEquallyAlongWidth([this.loadPlainDataButton, this.loadJSONDataButton], padding);\r\n        this.loadPlainDataButton.setMargins(0, 0, padding, 0);\r\n    }\r\n}\r\nInternalDropdownSettingsViewController.routeComponentName = \"internal_dropdown_settings\";\r\nInternalDropdownSettingsViewController.ParameterIdentifierName = {};\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBColor.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBCore.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBDataInterfaces.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBSocketClient.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBButton.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBCheckbox.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBDialogViewShower.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBTextField.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/SearchableDropdown.ts","/Users/mart/UICoreApplication/webclient/scripts/RootViewParameters.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/InternalDropdownSettingsViewController.d.ts","writeByteOrderMark":false,"text":"import { UIButton, UIRoute, UITableView, UITextArea, UITextView, UIViewController } from \"uicore-ts\";\r\nimport { CBButton } from \"./Custom components/CBButton\";\r\nimport { CBCheckbox } from \"./Custom components/CBCheckbox\";\r\nimport { CBTextField } from \"./Custom components/CBTextField\";\r\nimport { SearchableDropdown } from \"./Custom components/SearchableDropdown\";\r\nexport declare class InternalDropdownSettingsViewController extends UIViewController {\r\n    titleLabel: UITextView;\r\n    loadButton: UIButton;\r\n    dropdownCodeTextField: CBTextField;\r\n    tableView: UITableView;\r\n    textArea: UITextArea;\r\n    dropdown: SearchableDropdown<undefined>;\r\n    saveButton: CBButton;\r\n    deleteButton: CBButton;\r\n    addButton: CBButton;\r\n    itemTitleOrAttachedObjectTextArea: UITextArea;\r\n    isASectionCheckbox: CBCheckbox;\r\n    downButton: CBButton;\r\n    upButton: CBButton;\r\n    itemTitleJSONLabel: UITextView;\r\n    dropdownCodesTextArea: UITextArea;\r\n    deleteDropdownButton: CBButton;\r\n    itemCodeTextField: CBTextField;\r\n    clearDropdownButton: CBButton;\r\n    dataTextArea: UITextArea;\r\n    dataTextJSONLabel: UITextView;\r\n    loadPlainDataButton: CBButton;\r\n    loadJSONDataButton: CBButton;\r\n    itemTitleCheckbox: CBCheckbox;\r\n    itemAttachedObjectCheckbox: CBCheckbox;\r\n    constructor(view: any);\r\n    loadIntrospectionVariables(): void;\r\n    static readonly routeComponentName = \"internal_dropdown_settings\";\r\n    static readonly ParameterIdentifierName: {};\r\n    loadSubviews(): void;\r\n    reloadTableData(): void;\r\n    updateAvailableCodes(): Promise<void>;\r\n    updateitemDetailsView(): void;\r\n    loadData(): Promise<void>;\r\n    saveData(): Promise<void>;\r\n    loadPlainData(): void;\r\n    loadJSONData(): void;\r\n    itemTitleDidChange(): void;\r\n    itemAttachedObjectDidChange(): void;\r\n    loadSubjectData(): void;\r\n    viewDidAppear(): Promise<void>;\r\n    viewWillDisappear(): Promise<void>;\r\n    handleRoute(route: UIRoute): Promise<void>;\r\n    updateViewConstraints(): void;\r\n    updateViewStyles(): void;\r\n    viewDidLayoutSubviews(): void;\r\n    layoutViewsManually(): void;\r\n}\r\n"}}
