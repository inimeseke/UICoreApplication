{"code":"import { __awaiter } from \"tslib\";\r\nimport { FIRST, IS, IS_DEFINED, IS_NOT, MAKE_ID, nil, NO, UIColor, UICoreValues, UITextArea, UITextView, UIView, UIViewController, YES } from \"uicore-ts\";\r\nimport { CBColor } from \"./CBCore/CBColor\";\r\nimport { CBCore } from \"./CBCore/CBCore\";\r\nimport { IS_NOT_SOCKET_ERROR } from \"./CBCore/CBSocketClient\";\r\nimport { CBButton } from \"./Custom components/CBButton\";\r\nimport { CBDialogViewShower } from \"./Custom components/CBDialogViewShower\";\r\nimport { CBTextField } from \"./Custom components/CBTextField\";\r\nimport { LanguageService } from \"./Custom components/LanguageService\";\r\nimport { SearchableDropdown } from \"./Custom components/SearchableDropdown\";\r\nimport { RootViewParameters } from \"./RootViewParameters\";\r\nexport class InternalLanguageSettingsViewController extends UIViewController {\r\n    constructor(view) {\r\n        // Calling super\r\n        super(view);\r\n        // Code for further setup if necessary\r\n    }\r\n    loadIntrospectionVariables() {\r\n        super.loadIntrospectionVariables();\r\n        this.superclass = UIViewController;\r\n    }\r\n    loadSubviews() {\r\n        this.view.backgroundColor = UIColor.whiteColor;\r\n        this.titleLabel = new UITextView(this.view.elementID + \"TitleLabel\", UITextView.type.header2);\r\n        this.titleLabel.text = \"Internal language settings\";\r\n        this.view.addSubview(this.titleLabel);\r\n        this.languageKeyTextField = new CBTextField(this.view.elementID + \"LanguageKeyTextField\");\r\n        this.languageKeyTextField.placeholderText = \"Language key\";\r\n        this.view.addSubview(this.languageKeyTextField);\r\n        this.languageKeysTextArea = new UITextArea(this.view.elementID + \"LanguageKeysTextArea\");\r\n        this.languageKeysTextArea.placeholderText = \"Available language keys\";\r\n        this.view.addSubview(this.languageKeysTextArea);\r\n        this.loadButton = new CBButton(this.view.elementID + \"LoadButton\");\r\n        this.loadButton.titleLabel.text = \"Load\";\r\n        this.view.addSubview(this.loadButton);\r\n        this.saveButton = new CBButton(this.view.elementID + \"SaveButton\");\r\n        this.saveButton.titleLabel.setText(\"internalLanguageSettingsViewControllerSaveButton\", \"Save\");\r\n        this.view.addSubview(this.saveButton);\r\n        // this.textArea = new UITextArea(this.view.elementID + \"TextArea\")\r\n        // this.view.addSubview(this.textArea)\r\n        this.dropdown = new SearchableDropdown(this.view.elementID + \"SearchableDropdown\");\r\n        this.dropdown._controlEventTargets[UIView.controlEvent.PointerUpInside] = [];\r\n        this.dropdown._controlEventTargets[UIView.controlEvent.EnterDown] = [];\r\n        this.dropdown._dialogView = nil;\r\n        this.dropdown.isSingleSelection = YES;\r\n        this.dropdown._rightImageView.imageSource = nil;\r\n        this.dropdown.keepFocusedRowVisible = NO;\r\n        this.view.addSubview(this.dropdown);\r\n        this.dropdown._tableView.style.borderWidth = \"1px\";\r\n        this.dropdown._tableView.style.borderStyle = \"solid\";\r\n        this.dropdown._tableView.style.borderColor = CBColor.primaryContentColor.stringValue;\r\n        this.view.addSubview(this.dropdown._tableView);\r\n        this.addButton = new CBButton(this.view.elementID + \"AddButton\");\r\n        this.addButton.titleLabel.text = \"Add text\";\r\n        this.addButton.setBackgroundColorsWithNormalColor(UIColor.greenColor);\r\n        this.view.addSubview(this.addButton);\r\n        this.deleteButton = new CBButton(this.view.elementID + \"DeleteButton\");\r\n        this.deleteButton.titleLabel.text = \"Delete text\";\r\n        this.deleteButton.setBackgroundColorsWithNormalColor(UIColor.redColor);\r\n        this.view.addSubview(this.deleteButton);\r\n        this.deleteLanguageButton = new CBButton(this.view.elementID + \"DeleteLanguageButton\");\r\n        this.deleteLanguageButton.titleLabel.text = \"Delete language\";\r\n        this.deleteLanguageButton.setBackgroundColorsWithNormalColor(UIColor.redColor);\r\n        this.view.addSubview(this.deleteLanguageButton);\r\n        this.clearLanguageButton = new CBButton(this.view.elementID + \"ClearLanguageButton\");\r\n        this.clearLanguageButton.titleLabel.text = \"Clear language\";\r\n        this.clearLanguageButton.setBackgroundColorsWithNormalColor(UIColor.redColor);\r\n        this.view.addSubview(this.clearLanguageButton);\r\n        this.itemKeyTextField = new CBTextField(this.view.elementID + \"ItemKeyTextField\");\r\n        this.itemKeyTextField.placeholderText = \"Item key\";\r\n        this.view.addSubview(this.itemKeyTextField);\r\n        this.itemTitleOrAttachedObjectTextArea = new UITextArea(this.view.elementID +\r\n            \"ItemTitleOrAttachedObjectTextArea\");\r\n        this.itemTitleOrAttachedObjectTextArea.placeholderText = \"Title\";\r\n        this.view.addSubview(this.itemTitleOrAttachedObjectTextArea);\r\n        this.itemTitleDidChange();\r\n        this.dataTextJSONLabel = new UITextView(this.view.elementID + \"DataTextJSONLabel\");\r\n        this.dataTextJSONLabel.text = \"Data in JSON format\";\r\n        this.view.addSubview(this.dataTextJSONLabel);\r\n        this.dataTextArea = new UITextArea(this.view.elementID + \"DataTextArea\");\r\n        this.dataTextArea.placeholderText = \"Data in JSON format\";\r\n        this.view.addSubview(this.dataTextArea);\r\n        this.loadJSONDataButton = new CBButton(this.view.elementID + \"LoadJSONDataButton\");\r\n        this.loadJSONDataButton.titleLabel.text = \"Load JSON data\";\r\n        this.view.addSubview(this.loadJSONDataButton);\r\n        this.dropdown.addTargetForControlEvent(SearchableDropdown.controlEvent.SelectionDidChange, function (sender, event) {\r\n            this.updateitemDetailsView();\r\n        }.bind(this));\r\n        const dropdownViewForRowWithIndexFunction = this.dropdown._tableView.viewForRowWithIndex.bind(this.dropdown._tableView);\r\n        this.dropdown._tableView.viewForRowWithIndex = function (rowIndex) {\r\n            const row = dropdownViewForRowWithIndexFunction(rowIndex);\r\n            const dataItem = this.dropdown.drawingData[rowIndex];\r\n            const key = dataItem.itemCode;\r\n            const value = dataItem.attachedObject;\r\n            if (LanguageService.languageValues[this.languageKeyTextField.text][key] == value) {\r\n                row.titleText = row.titleText + \" - static\";\r\n                row.alpha = 0.5;\r\n            }\r\n            else {\r\n                row.alpha = 1;\r\n            }\r\n            return row;\r\n        }.bind(this);\r\n        this.itemKeyTextField.textField.addTargetForControlEvent(UITextArea.controlEvent.TextChange, function (sender, event) {\r\n            const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n            const previousKey = selectedItem.itemCode;\r\n            const languageObject = LanguageService.languages[this.languageKeyTextField.text];\r\n            const languageValuesValue = languageObject[previousKey];\r\n            if (IS_NOT(languageValuesValue)) {\r\n                delete languageObject[previousKey];\r\n            }\r\n            languageObject[this.itemKeyTextField.text] = selectedItem.attachedObject;\r\n            selectedItem.title = LanguageService.localizedTextObjectForText(this.itemKeyTextField.text);\r\n            selectedItem.itemCode = this.itemKeyTextField.text;\r\n            selectedItem._id = this.itemKeyTextField.text;\r\n            this.reloadTableData();\r\n        }.bind(this));\r\n        this.itemTitleOrAttachedObjectTextArea.addTargetForControlEvent(UITextArea.controlEvent.TextChange, function (sender, event) {\r\n            this.itemTitleDidChange();\r\n            this.reloadTableData();\r\n        }.bind(this));\r\n        //this.loadSubjectData()\r\n        this.updateAvailableKeys();\r\n        this.loadButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            this.loadData();\r\n        }.bind(this));\r\n        this.saveButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            CBCore.sharedInstance.socketClient.sendMessageForKey(\"RetrieveLanguageData\", nil, function (codes) {\r\n                this.saveData();\r\n            }.bind(this));\r\n        }.bind(this));\r\n        this.addButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            const title = LanguageService.localizedTextObjectForText(this.itemKeyTextField.text);\r\n            const itemID = MAKE_ID();\r\n            const dataRow = {\r\n                _id: itemID,\r\n                title: title,\r\n                isADropdownDataRow: YES,\r\n                isADropdownDataSection: NO,\r\n                attachedObject: undefined,\r\n                itemCode: nil,\r\n                dropdownCode: (this.dropdown.selectedData.firstElement || {}).dropdownCodes\r\n            };\r\n            const rowIndex = this.dropdown.selectedIndices.firstElement;\r\n            if (IS_DEFINED(rowIndex)) {\r\n                this.dropdown.drawingData.insertElementAtIndex(rowIndex + 1, dataRow);\r\n                this.reloadTableData();\r\n            }\r\n            else {\r\n                this.dropdown.drawingData.push(dataRow);\r\n                this.reloadTableData();\r\n                this.dropdown._tableView.scrollToBottom();\r\n            }\r\n        }.bind(this));\r\n        this.deleteButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            const rowIndex = this.dropdown.selectedIndices.firstElement;\r\n            if (IS_DEFINED(rowIndex)) {\r\n                var selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n                var key = LanguageService.stringForCurrentLanguage(selectedItem.title);\r\n                delete LanguageService.languages[this.languageKeyTextField.text][key];\r\n                this.dropdown.drawingData.removeElementAtIndex(rowIndex);\r\n                this.dropdown.selectedData.removeElementAtIndex(0);\r\n                this.dropdown.selectedIndices.removeElementAtIndex(0);\r\n                this.dropdown.selectionDidChange(this.dropdown.selectedData);\r\n            }\r\n            this.reloadTableData();\r\n        }.bind(this));\r\n        this.deleteLanguageButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            if (this.languageKeyTextField.text && confirm(\"Are you sure you want to delete this language?\")) {\r\n                if (confirm(\"This will REMOVE THE LANGUAGE FROM THE SERVER, are you definitely sure?\")) {\r\n                    CBCore.sharedInstance.socketClient.sendMessageForKey(\"DeleteLanguageWithKey\", this.languageKeyTextField.text, function (responseMessage, respondWithMessage) {\r\n                        LanguageService.useStoredLanguageValues(responseMessage);\r\n                        this.updateAvailableKeys();\r\n                        this.languageKeyTextField.text = nil;\r\n                        this.dropdown.data = [];\r\n                        this.updateitemDetailsView();\r\n                    }.bind(this));\r\n                }\r\n            }\r\n        }.bind(this));\r\n        this.clearLanguageButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            if (this.languageKeyTextField.text && confirm(\"Are you sure you want to clear this language?\")) {\r\n                LanguageService.languages[this.languageKeyTextField.text] = {};\r\n                this.dropdown.data = [];\r\n                this.dropdown.selectedData = [];\r\n                this.dropdown.selectedIndices = [];\r\n                this.updateitemDetailsView();\r\n            }\r\n        }.bind(this));\r\n        this.loadJSONDataButton.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {\r\n            this.loadJSONData();\r\n        }.bind(this));\r\n    }\r\n    reloadTableData() {\r\n        this.dropdown._tableView.reloadData();\r\n        const dataToShow = {};\r\n        this.dropdown.drawingData.forEach(function (dataItem, index, array) {\r\n            dataToShow[FIRST(dataItem.itemCode, dataItem._id)] = dataItem.attachedObject;\r\n        });\r\n        this.dataTextArea.text = JSON.stringify(dataToShow, null, 2);\r\n    }\r\n    updateAvailableKeys() {\r\n        const codes = LanguageService.languages.allKeys;\r\n        this.languageKeysTextArea.text = \"Saved keys: \" + JSON.stringify(codes);\r\n        if (codes.length && IS_NOT(this.languageKeyTextField.text)) {\r\n            this.languageKeyTextField.text = codes.firstElement;\r\n            this.loadData();\r\n        }\r\n    }\r\n    updateitemDetailsView() {\r\n        const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n        if (IS(selectedItem)) {\r\n            this.itemKeyTextField.text = LanguageService.stringForCurrentLanguage(selectedItem.title);\r\n            this.itemTitleOrAttachedObjectTextArea.text = selectedItem.attachedObject;\r\n            this.itemTitleDidChange();\r\n        }\r\n    }\r\n    loadData() {\r\n        this._layoutViewSubviews();\r\n        const dropdownData = [];\r\n        LanguageService.languages[this.languageKeyTextField.text].forEach(function (value, key) {\r\n            const asd = 1;\r\n            dropdownData.push({\r\n                _id: key,\r\n                title: LanguageService.localizedTextObjectForText(key),\r\n                itemCode: key,\r\n                dropdownCode: \"Aasdasdasdasdasdasdasd\",\r\n                isADropdownDataRow: YES,\r\n                isADropdownDataSection: NO,\r\n                attachedObject: value\r\n            });\r\n        });\r\n        this.dropdown.selectedData.removeElementAtIndex(0);\r\n        this.dropdown.selectedIndices.removeElementAtIndex(0);\r\n        this.dropdown.data = dropdownData;\r\n        this.reloadTableData();\r\n        this.updateitemDetailsView();\r\n    }\r\n    saveData() {\r\n        const languageObject = {};\r\n        const languageKey = this.languageKeyTextField.text;\r\n        this.dropdown.drawingData.forEach(function (dataItem, index, array) {\r\n            const staticLanguageObject = LanguageService.languageValues[languageKey];\r\n            if (IS_NOT(staticLanguageObject[dataItem.itemCode] == dataItem.attachedObject)) {\r\n                languageObject[dataItem.itemCode] = dataItem.attachedObject;\r\n            }\r\n        });\r\n        CBCore.sharedInstance.socketClient.sendMessageForKey(\"RetrieveLanguageData\", nil, function (responseMessage, respondWithMessage) {\r\n            const asd = 1;\r\n            responseMessage[this.languageKeyTextField.text] = languageObject;\r\n            // Send the data to server to be saved\r\n            CBCore.sharedInstance.socketClient.sendMessageForKey(\"SaveLanguagesData\", responseMessage, function (response) {\r\n                if (IS_NOT_SOCKET_ERROR(response)) {\r\n                    CBDialogViewShower.alert(\"Saved successfully.\");\r\n                    LanguageService.useStoredLanguageValues(response);\r\n                    this.loadData();\r\n                    LanguageService.broadcastLanguageChangeEvent();\r\n                    UICoreValues.main.rootViewController.view.setNeedsLayout();\r\n                }\r\n                else {\r\n                    CBDialogViewShower.alert(\"Failed to save dropdown data.\");\r\n                }\r\n                this.updateAvailableKeys();\r\n            }.bind(this));\r\n        }.bind(this));\r\n    }\r\n    loadJSONData() {\r\n        const drawingData = [];\r\n        var itemTitles = {};\r\n        try {\r\n            itemTitles = JSON.parse(this.dataTextArea.text);\r\n        }\r\n        catch (exception) {\r\n            CBDialogViewShower.alert(exception);\r\n            return;\r\n        }\r\n        LanguageService.languages[this.languageKeyTextField.text] = JSON.parse(JSON.stringify(LanguageService.languageValues[this.languageKeyTextField.text])).objectByCopyingValuesRecursivelyFromObject(itemTitles);\r\n        this.loadData();\r\n        this.reloadTableData();\r\n        if (this.dropdown.selectedIndices.length) {\r\n            this.dropdown._selectedData = [this.dropdown.drawingData[this.dropdown.selectedIndices.firstElement]];\r\n        }\r\n        this.updateitemDetailsView();\r\n    }\r\n    itemTitleDidChange() {\r\n        const selectedItem = this.dropdown.selectedData.firstElement || nil;\r\n        selectedItem.attachedObject = this.itemTitleOrAttachedObjectTextArea.text;\r\n        const languageObject = LanguageService.languages[this.languageKeyTextField.text] || {};\r\n        languageObject[selectedItem.itemCode] = this.itemTitleOrAttachedObjectTextArea.text;\r\n    }\r\n    loadSubjectData() {\r\n        //this.dropdown.data = new EnterCarInquirySubjectDetailsTopRowView(\"asd\").dataForDropdown()\r\n    }\r\n    viewDidAppear() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n        });\r\n    }\r\n    viewWillDisappear() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n        });\r\n    }\r\n    handleRoute(route) {\r\n        const _super = Object.create(null, {\r\n            handleRoute: { get: () => super.handleRoute }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            _super.handleRoute.call(this, route);\r\n            const inquiryComponent = route.componentWithName(InternalLanguageSettingsViewController.routeComponentName);\r\n            this.reloadTableData();\r\n            route.didcompleteComponent(inquiryComponent);\r\n        });\r\n    }\r\n    updateViewConstraints() {\r\n        super.updateViewConstraints();\r\n    }\r\n    updateViewStyles() {\r\n        super.updateViewStyles();\r\n    }\r\n    viewDidLayoutSubviews() {\r\n        super.viewDidLayoutSubviews();\r\n    }\r\n    layoutViewsManually() {\r\n        super.layoutViewsManually();\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding;\r\n        // View bounds\r\n        const bounds = this.view.bounds.rectangleWithInset(padding);\r\n        this.titleLabel.frame = bounds.rectangleWithHeight(labelHeight * 2);\r\n        var rowFrame = this.titleLabel.frame.rectangleForNextRow(padding);\r\n        rowFrame.distributeViewsAlongWidth([this.languageKeyTextField, this.loadButton, this.saveButton], [\r\n            2, 1, 1\r\n        ], padding);\r\n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 5);\r\n        this.languageKeysTextArea.frame = rowFrame;\r\n        rowFrame = rowFrame.rectangleForNextRow(padding, labelHeight * 2);\r\n        this.dropdown.frame = rowFrame.rectangleWithWidth(bounds.width * 0.5 - padding * 0.5);\r\n        this.dropdown._tableView.frame = this.dropdown.frame.rectangleForNextRow(padding, 500);\r\n        this.dropdown._tableView.setMargins(0, 0, padding, 0);\r\n        var deleteAddFrame = this.dropdown.frame.rectangleForNextColumn(padding * 0.5, this.dropdown.frame.width +\r\n            padding * 0.5);\r\n        deleteAddFrame.distributeViewsAlongWidth([this.deleteButton, this.addButton], 1, padding);\r\n        this.itemKeyTextField.frame = deleteAddFrame.rectangleForNextRow(padding);\r\n        this.itemTitleOrAttachedObjectTextArea.frame = this.itemKeyTextField.frame.rectangleForNextRow(padding, labelHeight *\r\n            11);\r\n        this.itemTitleOrAttachedObjectTextArea.frame.rectangleForNextRow(padding, labelHeight *\r\n            2).distributeViewsEquallyAlongWidth([this.deleteLanguageButton, this.clearLanguageButton], padding);\r\n        this.dataTextJSONLabel.frame = this.languageKeysTextArea.frame.rectangleWithY(this.dropdown._tableView.frame.max.y +\r\n            padding).rectangleWithHeight(labelHeight);\r\n        this.dataTextArea.frame = this.dataTextJSONLabel.frame.rectangleForNextRow(padding, 500);\r\n        this.dataTextArea.frame.rectangleForNextRow(padding, labelHeight *\r\n            2).distributeViewsEquallyAlongWidth([this.loadJSONDataButton], padding);\r\n        this.loadJSONDataButton.setMargins(0, 0, padding, 0);\r\n    }\r\n}\r\nInternalLanguageSettingsViewController.routeComponentName = \"internal_language_settings\";\r\nInternalLanguageSettingsViewController.ParameterIdentifierName = {};\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBColor.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBCore.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBDataInterfaces.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBSocketClient.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBButton.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBDialogViewShower.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/CBTextField.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/SearchableDropdown.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/SearchableDropdownRow.ts","/Users/mart/UICoreApplication/webclient/scripts/RootViewParameters.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/InternalLanguageSettingsViewController.d.ts","writeByteOrderMark":false,"text":"import { UIButton, UIRoute, UITableView, UITextArea, UITextView, UIViewController } from \"uicore-ts\";\r\nimport { CBButton } from \"./Custom components/CBButton\";\r\nimport { CBTextField } from \"./Custom components/CBTextField\";\r\nimport { SearchableDropdown } from \"./Custom components/SearchableDropdown\";\r\nexport declare class InternalLanguageSettingsViewController extends UIViewController {\r\n    titleLabel: UITextView;\r\n    loadButton: UIButton;\r\n    languageKeyTextField: CBTextField;\r\n    tableView: UITableView;\r\n    textArea: UITextArea;\r\n    dropdown: SearchableDropdown<string>;\r\n    saveButton: CBButton;\r\n    deleteButton: CBButton;\r\n    addButton: CBButton;\r\n    itemKeyTextField: CBTextField;\r\n    itemTitleOrAttachedObjectTextArea: UITextArea;\r\n    languageKeysTextArea: UITextArea;\r\n    deleteLanguageButton: CBButton;\r\n    clearLanguageButton: CBButton;\r\n    dataTextArea: UITextArea;\r\n    dataTextJSONLabel: UITextView;\r\n    loadJSONDataButton: CBButton;\r\n    constructor(view: any);\r\n    loadIntrospectionVariables(): void;\r\n    static readonly routeComponentName = \"internal_language_settings\";\r\n    static readonly ParameterIdentifierName: {};\r\n    loadSubviews(): void;\r\n    reloadTableData(): void;\r\n    updateAvailableKeys(): void;\r\n    updateitemDetailsView(): void;\r\n    loadData(): void;\r\n    saveData(): void;\r\n    loadJSONData(): void;\r\n    itemTitleDidChange(): void;\r\n    loadSubjectData(): void;\r\n    viewDidAppear(): Promise<void>;\r\n    viewWillDisappear(): Promise<void>;\r\n    handleRoute(route: UIRoute): Promise<void>;\r\n    updateViewConstraints(): void;\r\n    updateViewStyles(): void;\r\n    viewDidLayoutSubviews(): void;\r\n    layoutViewsManually(): void;\r\n}\r\n"}}
