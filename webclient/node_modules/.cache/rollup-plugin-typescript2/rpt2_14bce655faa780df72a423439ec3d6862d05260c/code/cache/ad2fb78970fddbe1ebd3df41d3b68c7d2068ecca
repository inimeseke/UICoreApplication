{"code":"import { IS, nil, NO, UIButton, UIColor, UICoreValues, UIImageView, UIRectangle, UIRoute, UITextView, UIView, YES } from \"uicore-ts\";\r\nimport { CBColor } from \"./CBCore/CBColor\";\r\nimport { CBCore } from \"./CBCore/CBCore\";\r\nimport { LanguageService } from \"./Custom components/LanguageService\";\r\nexport class LanguagesDialogView extends UIView {\r\n    constructor(elementID, element) {\r\n        super(elementID, element);\r\n        this._class = LanguagesDialogView;\r\n        this.superclass = super.class;\r\n    }\r\n    initView(elementID, viewHTMLElement) {\r\n        super.initView(elementID, viewHTMLElement);\r\n        // Adding a title label\r\n        this.titleLabel = new UITextView(\"LanguagesDialogTitleLabel\", UITextView.type.header1);\r\n        this.titleLabel.setText(\"selectLanguageTitle\", \"Select language\");\r\n        this.titleLabel.textAlignment = UITextView.textAlignment.center;\r\n        this.titleLabel.textColor = UIColor.whiteColor;\r\n        this.addSubview(this.titleLabel);\r\n        // Initializing the buttons array\r\n        this.buttons = [];\r\n        const languageKeys = Object.keys(LanguageService.languages);\r\n        languageKeys.forEach(function (languageKey, index, array) {\r\n            const language = LanguageService.languages[languageKey];\r\n            // Creating a language button\r\n            const languageButton = new UIButton(\"LeftBarLanguageButton\" + language.languageNameShort);\r\n            languageButton.titleLabel.text = language.languageName;\r\n            this.buttons.push(languageButton);\r\n            this.addSubview(languageButton);\r\n            // Adding a selected image view to the button\r\n            const selectedImageView = new UIImageView(\"SelectedImage\" + language.languageNameShort);\r\n            selectedImageView.imageSource = \"images/baseline-check-24px.svg\";\r\n            selectedImageView.style.filter = \"invert(0.35) sepia(1) saturate(5) hue-rotate(175deg)\";\r\n            languageButton.addSubview(selectedImageView);\r\n            // Augmenting button layout function\r\n            const buttonLayoutFunction = languageButton.layoutSubviews;\r\n            languageButton.layoutSubviews = function () {\r\n                // Setting frame for the imageView\r\n                const bounds = languageButton.bounds;\r\n                const padding = 10;\r\n                const imageHeight = bounds.height - 2 * padding;\r\n                selectedImageView.frame = new UIRectangle(bounds.width - imageHeight -\r\n                    padding, padding, imageHeight, imageHeight);\r\n                // Calling original function\r\n                buttonLayoutFunction.call(languageButton);\r\n            };\r\n            languageButton.setNeedsLayout();\r\n            // Setting up button visual dynamics\r\n            languageButton.updateContentForNormalState = function () {\r\n                languageButton.titleLabel.textColor = CBColor.primaryContentColor;\r\n                languageButton.backgroundColor = UIColor.whiteColor;\r\n                selectedImageView.hidden = YES;\r\n            };\r\n            languageButton.updateContentForHighlightedState = function () {\r\n                languageButton.titleLabel.textColor = CBColor.primaryContentColor;\r\n                languageButton.backgroundColor = UIColor.colorWithRGBA(200, 200, 200);\r\n            };\r\n            languageButton.updateContentForSelectedAndHighlightedState = languageButton.updateContentForHighlightedState;\r\n            languageButton.updateContentForSelectedState = function () {\r\n                languageButton.titleLabel.textColor = CBColor.primaryContentColor;\r\n                languageButton.backgroundColor = UIColor.whiteColor;\r\n                selectedImageView.hidden = NO;\r\n            };\r\n            languageButton.updateContentForCurrentState();\r\n            // Setting initial button selected state\r\n            const currentLanguageKey = UIRoute.currentRoute.componentWithName(\"settings\").parameters.language;\r\n            if (IS(currentLanguageKey)) {\r\n                if (currentLanguageKey == languageKey) {\r\n                    languageButton.selected = YES;\r\n                }\r\n            }\r\n            else if (languageKey == \"en\") {\r\n                languageButton.selected = YES;\r\n            }\r\n            // Adding the button press action\r\n            languageButton.addTargetForControlEvents([\r\n                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside\r\n            ], function (sender, event) {\r\n                CBCore.sharedInstance.languageKey = languageKey;\r\n                this.buttons.forEach(function (button, index, array) {\r\n                    button.selected = NO;\r\n                });\r\n                languageButton.selected = YES;\r\n                LanguageService.updateCurrentLanguageKey();\r\n                this.rootView.broadcastEventInSubtree({\r\n                    name: UIView.broadcastEventName.LanguageChanged,\r\n                    parameters: nil\r\n                });\r\n            }.bind(this));\r\n        }, this);\r\n    }\r\n    wasAddedToViewTree() {\r\n        super.wasAddedToViewTree();\r\n        this._previousLanguageKey = LanguageService.currentLanguageKey;\r\n    }\r\n    didReceiveBroadcastEvent(event) {\r\n        super.didReceiveBroadcastEvent(event);\r\n        if (event.name == UICoreValues.broadcastEventName.RouteDidChange && this._previousLanguageKey !=\r\n            LanguageService.currentLanguageKey) {\r\n            this._previousLanguageKey = LanguageService.currentLanguageKey;\r\n            this.rootView.broadcastEventInSubtree({\r\n                name: UIView.broadcastEventName.LanguageChanged,\r\n                parameters: nil\r\n            });\r\n        }\r\n    }\r\n    layoutSubviews() {\r\n        super.layoutSubviews();\r\n        if (this.hidden) {\r\n            return;\r\n        }\r\n        const maxWidth = 350;\r\n        if (this.bounds.width > maxWidth) {\r\n            this.bounds = this.bounds.rectangleWithWidth(maxWidth);\r\n        }\r\n        // Variables\r\n        const bounds = this.bounds;\r\n        const sidePadding = 20 * 0;\r\n        this.titleLabel.frame = new UIRectangle(sidePadding, sidePadding, 50, bounds.width - sidePadding * 2);\r\n        var previousFrame = this.titleLabel.frame;\r\n        this.buttons.forEach(function (button, index, array) {\r\n            button.frame = previousFrame.rectangleWithY(previousFrame.max.y + 1).rectangleWithWidth(bounds.width -\r\n                sidePadding * 2);\r\n            previousFrame = button.frame;\r\n        });\r\n        this.bounds = bounds.rectangleWithHeight(this.intrinsicContentHeight(bounds.width));\r\n        this.style.maxHeight = \"\" + bounds.height.integerValue + \"px\";\r\n        this.centerInContainer();\r\n    }\r\n}\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBColor.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBCore.ts","/Users/mart/UICoreApplication/webclient/scripts/Custom components/LanguageService.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/LanguagesDialogView.d.ts","writeByteOrderMark":false,"text":"import { UIButton, UITextView, UIView, UIViewBroadcastEvent } from \"uicore-ts\";\r\nexport declare class LanguagesDialogView extends UIView {\r\n    titleLabel: UITextView;\r\n    buttons: UIButton[];\r\n    _previousLanguageKey: string;\r\n    constructor(elementID: string, element?: HTMLElement);\r\n    initView(elementID: any, viewHTMLElement: any): void;\r\n    wasAddedToViewTree(): void;\r\n    didReceiveBroadcastEvent(event: UIViewBroadcastEvent): void;\r\n    layoutSubviews(): void;\r\n}\r\n"}}
