{"code":"import { IS, nil, UIObject, YES } from \"uicore-ts\";\r\nexport class CBServerClient extends UIObject {\r\n    constructor(core) {\r\n        super();\r\n        this._class = CBServerClient;\r\n        this.superclass = UIObject;\r\n        this._core = core;\r\n    }\r\n    sendJSONObject(URL, objectToSend, completion) {\r\n        this.sendRequest(\"POST\", URL, objectToSend, function (status, response) {\r\n            if (status != 200) {\r\n                console.log(\"GET \" + URL + \" \" + status);\r\n                if (IS(completion)) {\r\n                    completion(nil);\r\n                }\r\n                return;\r\n            }\r\n            const result = JSON.parse(response);\r\n            if (IS(completion)) {\r\n                completion(result);\r\n            }\r\n        }.bind(this));\r\n    }\r\n    retrieveJSONObject(URL, completion) {\r\n        this.retrieveJSONObjectWithCaching(URL, nil, nil, YES, completion);\r\n    }\r\n    retrieveJSONObjectWithCaching(URL, cacheObject, cacheKey, forceUpdate, completion) {\r\n        if (IS(cacheObject[cacheKey]) && !forceUpdate) {\r\n            if (IS(completion)) {\r\n                completion(cacheObject[cacheKey]);\r\n            }\r\n            return;\r\n        }\r\n        this.sendRequest(\"GET\", URL, null, function (status, response) {\r\n            if (status != 200) {\r\n                console.log(\"GET \" + URL + \" \" + status);\r\n                if (IS(completion)) {\r\n                    completion(nil);\r\n                }\r\n                return;\r\n            }\r\n            const result = JSON.parse(response);\r\n            cacheObject[cacheKey] = result;\r\n            if (IS(completion)) {\r\n                completion(result);\r\n            }\r\n        }.bind(this));\r\n    }\r\n    sendRequest(method, URL, data, completion) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(method, URL, true);\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n        xhr.onreadystatechange = processRequest;\r\n        function processRequest(event) {\r\n            if (xhr.readyState == 4) {\r\n                if (IS(completion)) {\r\n                    completion(xhr.status, xhr.responseText);\r\n                }\r\n            }\r\n        }\r\n        xhr.send(JSON.stringify(data));\r\n    }\r\n}\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBCore.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/CBCore/CBServerClient.d.ts","writeByteOrderMark":false,"text":"import { UIObject } from \"uicore-ts\";\r\nimport { CBCore } from \"./CBCore\";\r\nexport declare class CBServerClient extends UIObject {\r\n    _core: CBCore;\r\n    constructor(core: CBCore);\r\n    sendJSONObject(URL: string, objectToSend: any, completion: (response: any) => void): void;\r\n    retrieveJSONObject(URL: string, completion: (response: any) => void): void;\r\n    retrieveJSONObjectWithCaching(URL: string, cacheObject: any, cacheKey: string, forceUpdate: boolean, completion: (response: any) => void): void;\r\n    sendRequest(method: string, URL: string, data: any, completion: (status: number, response: string) => void): void;\r\n}\r\n"}}
