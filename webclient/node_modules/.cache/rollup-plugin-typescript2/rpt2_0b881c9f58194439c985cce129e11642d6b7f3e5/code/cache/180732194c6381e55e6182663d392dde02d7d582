{"code":"import { FIRST_OR_NIL, IS, IS_DEFINED, IS_NOT, nil, UICoreValues, UIRoute, UIView } from \"uicore-ts\";\r\nexport class LanguageService {\r\n    static useStoredLanguageValues(values = {}) {\r\n        LanguageService.languages = JSON.parse(JSON.stringify(LanguageService.languageValues)).objectByCopyingValuesRecursivelyFromObject(values);\r\n        LanguageService.broadcastLanguageChangeEvent();\r\n    }\r\n    static broadcastLanguageChangeEvent() {\r\n        UICoreValues.main.rootViewController.view.broadcastEventInSubtree({\r\n            name: UIView.broadcastEventName.LanguageChanged,\r\n            parameters: {}\r\n        });\r\n    }\r\n    static get defaultLanguageKey() {\r\n        // @ts-ignore\r\n        return (CBCoreInitializerObject.defaultLanguageKey || \"en\");\r\n    }\r\n    static get currentLanguageKey() {\r\n        if (!LanguageService._currentLanguageKey) {\r\n            LanguageService.updateCurrentLanguageKey();\r\n        }\r\n        return LanguageService._currentLanguageKey;\r\n    }\r\n    static updateCurrentLanguageKey(route = UIRoute.currentRoute) {\r\n        var result = route.componentWithName(\"settings\").parameters.language;\r\n        if (IS_NOT(result)) {\r\n            result = LanguageService.defaultLanguageKey;\r\n        }\r\n        LanguageService._currentLanguageKey = result;\r\n    }\r\n    get currentLanguageKey() {\r\n        const result = LanguageService.currentLanguageKey;\r\n        return result;\r\n    }\r\n    static stringForKey(key, languageKey, defaultString, parameters) {\r\n        var result;\r\n        if (IS(key) && LanguageService.languages[languageKey] &&\r\n            IS_DEFINED(LanguageService.languages[languageKey][key])) {\r\n            result = LanguageService.languages[languageKey][key];\r\n        }\r\n        else {\r\n            result = defaultString;\r\n        }\r\n        if (IS(parameters)) {\r\n            const parameterKeys = Object.keys(parameters);\r\n            parameterKeys.forEach(function (key, index, array) {\r\n                const keyString = \"%\" + key + \"%\";\r\n                const parameter = parameters[key];\r\n                var parameterString;\r\n                if (parameter instanceof Object) {\r\n                    parameterString = UICoreValues.languageService.stringForCurrentLanguage(parameter);\r\n                }\r\n                else {\r\n                    parameterString = parameter;\r\n                }\r\n                result = result.replace(new RegExp(keyString, \"g\"), parameterString);\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    stringForKey(key, languageKey, defaultString, parameters) {\r\n        return LanguageService.stringForKey(key, languageKey, defaultString, parameters);\r\n    }\r\n    static localizedTextObjectForKey(key, defaultString = key, parameters) {\r\n        const result = {};\r\n        LanguageService.languages.forEach(function (languageObject, languageKey) {\r\n            result[languageKey] = LanguageService.stringForKey(key, languageKey, defaultString, parameters);\r\n        });\r\n        return result;\r\n    }\r\n    localizedTextObjectForKey(key, defaultString, parameters) {\r\n        const result = LanguageService.localizedTextObjectForKey(key, defaultString, parameters);\r\n        return result;\r\n    }\r\n    static localizedTextObjectForText(text) {\r\n        if (IS_NOT(text)) {\r\n            return nil;\r\n        }\r\n        const result = {\r\n            [LanguageService.defaultLanguageKey]: text\r\n        };\r\n        return result;\r\n    }\r\n    localizedTextObjectForText(text) {\r\n        const result = LanguageService.localizedTextObjectForText(text);\r\n        return result;\r\n    }\r\n    static stringForCurrentLanguage(localizedTextObject) {\r\n        if (!LanguageService || !localizedTextObject) {\r\n            const asd = 1;\r\n        }\r\n        if (localizedTextObject === \"\" + localizedTextObject) {\r\n            return localizedTextObject;\r\n        }\r\n        localizedTextObject = FIRST_OR_NIL(localizedTextObject);\r\n        var result = localizedTextObject[LanguageService.currentLanguageKey];\r\n        if (IS_NOT(result)) {\r\n            result = localizedTextObject[LanguageService.defaultLanguageKey];\r\n        }\r\n        if (IS_NOT(result)) {\r\n            result = localizedTextObject[\"en\"];\r\n        }\r\n        if (IS_NOT(result)) {\r\n            result = \"\";\r\n        }\r\n        return result;\r\n    }\r\n    stringForCurrentLanguage(localizedTextObject) {\r\n        return LanguageService.stringForCurrentLanguage(localizedTextObject);\r\n    }\r\n}\r\nLanguageService.languageValues = {\r\n    \"en\": {\r\n        \"languageName\": \"English\",\r\n        \"languageNameShort\": \"ENG\",\r\n        \"topBarTitle\": \"Carrum\",\r\n        \"selectLanguageTitle\": \"Select language\",\r\n        \"leftBarTitle\": \"Title\"\r\n    },\r\n    \"est\": {\r\n        \"languageName\": \"Eesti keel\",\r\n        \"languageNameShort\": \"EST\",\r\n        \"topBarTitle\": \"Carrum\",\r\n        \"selectLanguageTitle\": \"Vali keel\",\r\n        \"leftBarTitle\": \"Pealkiri\"\r\n    }\r\n};\r\nLanguageService.languages = JSON.parse(JSON.stringify(LanguageService.languageValues));\r\nUICoreValues.languageService = LanguageService;\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBDataInterfaces.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/Custom components/LanguageService.d.ts","writeByteOrderMark":false,"text":"import { UILanguageService, UILocalizedTextObject, UIRoute } from \"uicore-ts\";\r\nimport { CBLocalizedTextObject } from \"../CBCore/CBDataInterfaces\";\r\nexport declare class LanguageService implements UILanguageService {\r\n    static _currentLanguageKey: string;\r\n    static languageValues: {\r\n        en: {\r\n            languageName: string;\r\n            languageNameShort: string;\r\n            topBarTitle: string;\r\n            selectLanguageTitle: string;\r\n            leftBarTitle: string;\r\n        };\r\n        est: {\r\n            languageName: string;\r\n            languageNameShort: string;\r\n            topBarTitle: string;\r\n            selectLanguageTitle: string;\r\n            leftBarTitle: string;\r\n        };\r\n    };\r\n    static languages: any;\r\n    static useStoredLanguageValues(values?: {}): void;\r\n    static broadcastLanguageChangeEvent(): void;\r\n    static get defaultLanguageKey(): any;\r\n    static get currentLanguageKey(): string;\r\n    static updateCurrentLanguageKey(route?: UIRoute): void;\r\n    get currentLanguageKey(): string;\r\n    static stringForKey(key: string, languageKey: string, defaultString: string, parameters?: {\r\n        [x: string]: string | UILocalizedTextObject;\r\n    }): any;\r\n    stringForKey(key: string, languageKey: string, defaultString: string, parameters?: {\r\n        [x: string]: string | UILocalizedTextObject;\r\n    }): any;\r\n    static localizedTextObjectForKey(key: string, defaultString?: string, parameters?: {\r\n        [x: string]: string | UILocalizedTextObject;\r\n    }): {};\r\n    localizedTextObjectForKey(key: string, defaultString?: string, parameters?: {\r\n        [x: string]: string | UILocalizedTextObject;\r\n    }): {};\r\n    static localizedTextObjectForText(text: string): any;\r\n    localizedTextObjectForText(text: string): any;\r\n    static stringForCurrentLanguage(localizedTextObject: CBLocalizedTextObject | string): any;\r\n    stringForCurrentLanguage(localizedTextObject: CBLocalizedTextObject): any;\r\n}\r\n"}}
