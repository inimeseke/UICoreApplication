{"code":"import { __awaiter } from \"tslib\";\r\nimport { UIColor, UIViewController } from \"uicore-ts\";\r\nimport { CBCore } from \"./CBCore/CBCore\";\r\nimport { RootViewParameters } from \"./RootViewParameters\";\r\nexport class InformationViewController extends UIViewController {\r\n    constructor(view) {\r\n        // Calling super\r\n        super(view);\r\n        // Code for further setup if necessary\r\n    }\r\n    loadIntrospectionVariables() {\r\n        super.loadIntrospectionVariables();\r\n        this.superclass = UIViewController;\r\n    }\r\n    loadSubviews() {\r\n        this.view.backgroundColor = UIColor.whiteColor;\r\n    }\r\n    viewDidAppear() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n        });\r\n    }\r\n    viewWillDisappear() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n        });\r\n    }\r\n    handleRoute(route) {\r\n        const _super = Object.create(null, {\r\n            handleRoute: { get: () => super.handleRoute }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            _super.handleRoute.call(this, route);\r\n            CBCore.sharedInstance.didSetLanguageKey();\r\n            const inquiryComponent = route.componentWithName(InformationViewController.routeComponentName);\r\n            const key = inquiryComponent.parameters[InformationViewController.ParameterIdentifierName.key];\r\n            this.view.setInnerHTML(key, \"Failed to load data for key\");\r\n            this.view.setNeedsLayoutUpToRootView();\r\n            // @ts-ignore\r\n            const imgLoad = imagesLoaded(this.view.viewHTMLElement);\r\n            const imagesDidLoad = function (instance) {\r\n                console.log(\"ALWAYS - all images have been loaded\");\r\n                this.view.setNeedsLayoutUpToRootView();\r\n                imgLoad.off(\"always\", imagesDidLoad);\r\n            }.bind(this);\r\n            imgLoad.on(\"always\", imagesDidLoad);\r\n            route.didcompleteComponent(inquiryComponent);\r\n        });\r\n    }\r\n    updateViewConstraints() {\r\n        super.updateViewConstraints();\r\n    }\r\n    updateViewStyles() {\r\n        super.updateViewStyles();\r\n    }\r\n    viewDidLayoutSubviews() {\r\n        super.viewDidLayoutSubviews();\r\n    }\r\n    layoutViewsManually() {\r\n        super.layoutViewsManually();\r\n        const padding = RootViewParameters.paddingLength;\r\n        const labelHeight = padding;\r\n        // View bounds\r\n        const bounds = this.view.bounds.rectangleWithInset(padding);\r\n    }\r\n}\r\nInformationViewController.routeComponentName = \"information\";\r\nInformationViewController.ParameterIdentifierName = {\r\n    \"key\": \"key\"\r\n};\r\n","references":["/Users/mart/UICoreApplication/webclient/node_modules/uicore-ts/compiledScripts/index.d.ts","/Users/mart/UICoreApplication/webclient/scripts/CBCore/CBCore.ts","/Users/mart/UICoreApplication/webclient/scripts/RootViewParameters.ts"],"dts":{"name":"/Users/mart/UICoreApplication/webclient/node_modules/.cache/rollup-plugin-typescript2/placeholder/InformationViewController.d.ts","writeByteOrderMark":false,"text":"import { UIRoute, UIViewController } from \"uicore-ts\";\r\nexport declare class InformationViewController extends UIViewController {\r\n    constructor(view: any);\r\n    loadIntrospectionVariables(): void;\r\n    static readonly routeComponentName = \"information\";\r\n    static readonly ParameterIdentifierName: {\r\n        key: string;\r\n    };\r\n    loadSubviews(): void;\r\n    viewDidAppear(): Promise<void>;\r\n    viewWillDisappear(): Promise<void>;\r\n    handleRoute(route: UIRoute): Promise<void>;\r\n    updateViewConstraints(): void;\r\n    updateViewStyles(): void;\r\n    viewDidLayoutSubviews(): void;\r\n    layoutViewsManually(): void;\r\n}\r\n"}}
